
J1939_PORT_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fac  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08006140  08006140  00016140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006250  08006250  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006258  08006258  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006258  08006258  00016258  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006260  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006ac  20000010  08006270  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  08006270  000206bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001871b  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fe4  00000000  00000000  0003875b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003b740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003c9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002430f  00000000  00000000  0003db18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001477b  00000000  00000000  00061e27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ddff1  00000000  00000000  000765a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00154593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da0  00000000  00000000  001545e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006128 	.word	0x08006128

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08006128 	.word	0x08006128

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SendOneMessage>:
/**
* @param[in] J1939_MESSAGE *
* @note sends *MsgPtr information, all data fields (such as data length, priority, and source address) must have been set. \n
*/
void SendOneMessage(J1939_MESSAGE *MsgPtr)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    //Set the last part of the message to ensure that the DataLength specification. (Refer to CAN B2.0)
    MsgPtr->Mxe.Res = 0; //Refer to the data link layer of J1939 (SAE J1939-21)
 80004d4:	687a      	ldr	r2, [r7, #4]
 80004d6:	7813      	ldrb	r3, [r2, #0]
 80004d8:	f36f 0341 	bfc	r3, #1, #1
 80004dc:	7013      	strb	r3, [r2, #0]
    MsgPtr->Mxe.RTR = 0;
 80004de:	687a      	ldr	r2, [r7, #4]
 80004e0:	7913      	ldrb	r3, [r2, #4]
 80004e2:	f36f 1307 	bfc	r3, #4, #4
 80004e6:	7113      	strb	r3, [r2, #4]
    if (MsgPtr->Mxe.DataLength > 8)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	791b      	ldrb	r3, [r3, #4]
 80004ec:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80004f0:	b2db      	uxtb	r3, r3
 80004f2:	2b08      	cmp	r3, #8
 80004f4:	d905      	bls.n	8000502 <SendOneMessage+0x36>
        MsgPtr->Mxe.DataLength = 8;
 80004f6:	687a      	ldr	r2, [r7, #4]
 80004f8:	7913      	ldrb	r3, [r2, #4]
 80004fa:	2108      	movs	r1, #8
 80004fc:	f361 0303 	bfi	r3, r1, #0, #4
 8000500:	7113      	strb	r3, [r2, #4]
    //Send a frame of message and load all the messages in J1939_MESSAGE into the own structure of the can module
    Port_CAN_Transmit(MsgPtr);
 8000502:	6878      	ldr	r0, [r7, #4]
 8000504:	f001 f924 	bl	8001750 <J1939_CAN_Transmit>
}
 8000508:	bf00      	nop
 800050a:	3708      	adds	r7, #8
 800050c:	46bd      	mov	sp, r7
 800050e:	bd80      	pop	{r7, pc}

08000510 <J1939_DequeueMessage>:
* @return RC_SUCCESS message dequeue successfully
* @return RC_QUEUEEMPTY no message to return
* @note reads a message from the receiving queue to *MsgPtr. If we are using interrupts, we need to disable the interrupts. When getting data from the receive queue
*/
j1939_uint8_t J1939_DequeueMessage(J1939_MESSAGE *MsgPtr)
{
 8000510:	b4b0      	push	{r4, r5, r7}
 8000512:	b085      	sub	sp, #20
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
    j1939_uint8_t _rc = RC_SUCCESS;
 8000518:	2300      	movs	r3, #0
 800051a:	73fb      	strb	r3, [r7, #15]
//*************************** Off accept interruption ***************** **************
#if J1939_POLL_ECAN == J1939_FALSE
    Port_RXinterruptDisable();
#endif

    if (RXQueueCount == 0)
 800051c:	4b17      	ldr	r3, [pc, #92]	; (800057c <J1939_DequeueMessage+0x6c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d102      	bne.n	800052a <J1939_DequeueMessage+0x1a>
    {
        _rc = RC_QUEUEEMPTY;
 8000524:	2301      	movs	r3, #1
 8000526:	73fb      	strb	r3, [r7, #15]
 8000528:	e022      	b.n	8000570 <J1939_DequeueMessage+0x60>
    }
    else
    {
        *MsgPtr = RXQueue[RXHead];
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <J1939_DequeueMessage+0x70>)
 800052c:	781b      	ldrb	r3, [r3, #0]
 800052e:	4619      	mov	r1, r3
 8000530:	6878      	ldr	r0, [r7, #4]
 8000532:	4a14      	ldr	r2, [pc, #80]	; (8000584 <J1939_DequeueMessage+0x74>)
 8000534:	460b      	mov	r3, r1
 8000536:	009b      	lsls	r3, r3, #2
 8000538:	440b      	add	r3, r1
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	4413      	add	r3, r2
 800053e:	4604      	mov	r4, r0
 8000540:	461d      	mov	r5, r3
 8000542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000546:	682b      	ldr	r3, [r5, #0]
 8000548:	6023      	str	r3, [r4, #0]
        RXHead++;
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <J1939_DequeueMessage+0x70>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	3301      	adds	r3, #1
 8000550:	b2da      	uxtb	r2, r3
 8000552:	4b0b      	ldr	r3, [pc, #44]	; (8000580 <J1939_DequeueMessage+0x70>)
 8000554:	701a      	strb	r2, [r3, #0]
        if (RXHead >= J1939_RX_QUEUE_SIZE)
 8000556:	4b0a      	ldr	r3, [pc, #40]	; (8000580 <J1939_DequeueMessage+0x70>)
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	2b09      	cmp	r3, #9
 800055c:	d902      	bls.n	8000564 <J1939_DequeueMessage+0x54>
            RXHead = 0;
 800055e:	4b08      	ldr	r3, [pc, #32]	; (8000580 <J1939_DequeueMessage+0x70>)
 8000560:	2200      	movs	r2, #0
 8000562:	701a      	strb	r2, [r3, #0]
        RXQueueCount--;
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <J1939_DequeueMessage+0x6c>)
 8000566:	781b      	ldrb	r3, [r3, #0]
 8000568:	3b01      	subs	r3, #1
 800056a:	b2da      	uxtb	r2, r3
 800056c:	4b03      	ldr	r3, [pc, #12]	; (800057c <J1939_DequeueMessage+0x6c>)
 800056e:	701a      	strb	r2, [r3, #0]
    //***************************Open to accept interruption **************** **************
#if J1939_POLL_ECAN == J1939_FALSE
    Port_RXinterruptEnable();
#endif

    return _rc;
 8000570:	7bfb      	ldrb	r3, [r7, #15]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3714      	adds	r7, #20
 8000576:	46bd      	mov	sp, r7
 8000578:	bcb0      	pop	{r4, r5, r7}
 800057a:	4770      	bx	lr
 800057c:	2000014d 	.word	0x2000014d
 8000580:	20000148 	.word	0x20000148
 8000584:	20000178 	.word	0x20000178

08000588 <J1939_Read_Message>:
* @return RC_SUCCESS read the message successfully,
* @return RC_QUEUEEMPTY Reading the message is unsuccessful and there is no message.
* @note reads a message from the receiving queue to *MsgPtr.
*/
j1939_uint8_t J1939_Read_Message(J1939_MESSAGE *MsgPtr)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
    return J1939_DequeueMessage(MsgPtr);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f7ff ffbd 	bl	8000510 <J1939_DequeueMessage>
 8000596:	4603      	mov	r3, r0
}
 8000598:	4618      	mov	r0, r3
 800059a:	3708      	adds	r7, #8
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <J1939_EnqueueMessage>:
* @note This program puts *MsgPtr in the message queue\n
If the information cannot be enqueued or sent, there will be a corresponding return prompt,\n
If the transmit interrupt is set (available), when the message is queued, the transmit interrupt is enabled
*/
j1939_uint8_t J1939_EnqueueMessage(J1939_MESSAGE *MsgPtr)
{
 80005a0:	b4b0      	push	{r4, r5, r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
    j1939_uint8_t _rc = RC_SUCCESS;
 80005a8:	2300      	movs	r3, #0
 80005aa:	73fb      	strb	r3, [r7, #15]

    if (0)
        _rc = RC_CANNOTTRANSMIT;
    else
    {
        if ((J1939_OVERWRITE_TX_QUEUE == J1939_TRUE) ||
 80005ac:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <J1939_EnqueueMessage+0x80>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	2b04      	cmp	r3, #4
 80005b2:	d82d      	bhi.n	8000610 <J1939_EnqueueMessage+0x70>
            (TTXQueueCount < J1939_TX_QUEUE_SIZE))
        {
            if (TTXQueueCount < J1939_TX_QUEUE_SIZE)
 80005b4:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <J1939_EnqueueMessage+0x80>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d813      	bhi.n	80005e4 <J1939_EnqueueMessage+0x44>
            {
                TTXQueueCount++;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <J1939_EnqueueMessage+0x80>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b2da      	uxtb	r2, r3
 80005c4:	4b16      	ldr	r3, [pc, #88]	; (8000620 <J1939_EnqueueMessage+0x80>)
 80005c6:	701a      	strb	r2, [r3, #0]
                TXTail++;
 80005c8:	4b16      	ldr	r3, [pc, #88]	; (8000624 <J1939_EnqueueMessage+0x84>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	3301      	adds	r3, #1
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <J1939_EnqueueMessage+0x84>)
 80005d2:	701a      	strb	r2, [r3, #0]
                if (TXTail >= J1939_TX_QUEUE_SIZE)
 80005d4:	4b13      	ldr	r3, [pc, #76]	; (8000624 <J1939_EnqueueMessage+0x84>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b04      	cmp	r3, #4
 80005da:	d908      	bls.n	80005ee <J1939_EnqueueMessage+0x4e>
                    TXTail = 0;
 80005dc:	4b11      	ldr	r3, [pc, #68]	; (8000624 <J1939_EnqueueMessage+0x84>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
 80005e2:	e004      	b.n	80005ee <J1939_EnqueueMessage+0x4e>
            }
            else
            {
                J1939_Flags.TransmitMessagesdCover = 1; //Send data is covered, the previous frame data is covered
 80005e4:	4a10      	ldr	r2, [pc, #64]	; (8000628 <J1939_EnqueueMessage+0x88>)
 80005e6:	7813      	ldrb	r3, [r2, #0]
 80005e8:	f043 0301 	orr.w	r3, r3, #1
 80005ec:	7013      	strb	r3, [r2, #0]
            }
            TXQueue[TXTail] = *MsgPtr;
 80005ee:	4b0d      	ldr	r3, [pc, #52]	; (8000624 <J1939_EnqueueMessage+0x84>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	4619      	mov	r1, r3
 80005f4:	4a0d      	ldr	r2, [pc, #52]	; (800062c <J1939_EnqueueMessage+0x8c>)
 80005f6:	460b      	mov	r3, r1
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	440b      	add	r3, r1
 80005fc:	009b      	lsls	r3, r3, #2
 80005fe:	441a      	add	r2, r3
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	4614      	mov	r4, r2
 8000604:	461d      	mov	r5, r3
 8000606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800060a:	682b      	ldr	r3, [r5, #0]
 800060c:	6023      	str	r3, [r4, #0]
 800060e:	e001      	b.n	8000614 <J1939_EnqueueMessage+0x74>
        }
        else
            _rc = RC_QUEUEFULL;
 8000610:	2301      	movs	r3, #1
 8000612:	73fb      	strb	r3, [r7, #15]
#if J1939_POLL_ECAN == J1939_FALSE
    Port_TXinterruptEnable();
    //Trigger to send interrupt
    Port_TXinterruptOk();
#endif
    return _rc;
 8000614:	7bfb      	ldrb	r3, [r7, #15]
}
 8000616:	4618      	mov	r0, r3
 8000618:	3714      	adds	r7, #20
 800061a:	46bd      	mov	sp, r7
 800061c:	bcb0      	pop	{r4, r5, r7}
 800061e:	4770      	bx	lr
 8000620:	20000174 	.word	0x20000174
 8000624:	20000340 	.word	0x20000340
 8000628:	2000014c 	.word	0x2000014c
 800062c:	20000354 	.word	0x20000354

08000630 <J1939_Send_Message>:
* @return RC_QUEUEFULL Sending the message is unsuccessful, the sending queue is full, and the message entering the queue fails
* @return RC_CANNOTTRANSMIT Sending the message is unsuccessful, the system cannot send the message currently
* @note If the message cannot be enqueued or sent, there will be a corresponding return prompt,\n
*/
j1939_uint8_t J1939_Send_Message(J1939_MESSAGE *MsgPtr)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
    return J1939_EnqueueMessage(MsgPtr);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ffb1 	bl	80005a0 <J1939_EnqueueMessage>
 800063e:	4603      	mov	r3, r0
}
 8000640:	4618      	mov	r0, r3
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}

08000648 <J1939_Initialization>:
*
* @note This code is called during system initialization, (placed after CAN device initialization)\n
Initialize J1939 global variables\n
*/
void J1939_Initialization()
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
    /*Initialize global variables*/
    J1939_Flags.FlagVal = 0; //No address is declared, other flags will be set to 0 (reset)
 800064c:	4b29      	ldr	r3, [pc, #164]	; (80006f4 <J1939_Initialization+0xac>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]

    /*Initialize receiving and sending queues*/
    TXHead = 0;
 8000652:	4b29      	ldr	r3, [pc, #164]	; (80006f8 <J1939_Initialization+0xb0>)
 8000654:	2200      	movs	r2, #0
 8000656:	701a      	strb	r2, [r3, #0]
    TXTail = 0xFF;
 8000658:	4b28      	ldr	r3, [pc, #160]	; (80006fc <J1939_Initialization+0xb4>)
 800065a:	22ff      	movs	r2, #255	; 0xff
 800065c:	701a      	strb	r2, [r3, #0]
    RXHead = 0;
 800065e:	4b28      	ldr	r3, [pc, #160]	; (8000700 <J1939_Initialization+0xb8>)
 8000660:	2200      	movs	r2, #0
 8000662:	701a      	strb	r2, [r3, #0]
    RXTail = 0xFF;
 8000664:	4b27      	ldr	r3, [pc, #156]	; (8000704 <J1939_Initialization+0xbc>)
 8000666:	22ff      	movs	r2, #255	; 0xff
 8000668:	701a      	strb	r2, [r3, #0]
    TTXQueueCount = 0;
 800066a:	4b27      	ldr	r3, [pc, #156]	; (8000708 <J1939_Initialization+0xc0>)
 800066c:	2200      	movs	r2, #0
 800066e:	701a      	strb	r2, [r3, #0]
    RXQueueCount = 0;
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <J1939_Initialization+0xc4>)
 8000672:	2200      	movs	r2, #0
 8000674:	701a      	strb	r2, [r3, #0]
    /*Initialize node address*/
    NodeAddress = J1939_STARTING_ADDRESS_1;
 8000676:	4b26      	ldr	r3, [pc, #152]	; (8000710 <J1939_Initialization+0xc8>)
 8000678:	2233      	movs	r2, #51	; 0x33
 800067a:	701a      	strb	r2, [r3, #0]

    /*Initialize the selection of CAN nodes*/
    /*Initialize the request list*/
    REQUEST_LIST.PGN = 0;
 800067c:	4b25      	ldr	r3, [pc, #148]	; (8000714 <J1939_Initialization+0xcc>)
 800067e:	2200      	movs	r2, #0
 8000680:	609a      	str	r2, [r3, #8]
    REQUEST_LIST.data = J1939_NULL;
 8000682:	4b24      	ldr	r3, [pc, #144]	; (8000714 <J1939_Initialization+0xcc>)
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
    REQUEST_LIST.update = J1939_NULL;
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <J1939_Initialization+0xcc>)
 800068a:	2200      	movs	r2, #0
 800068c:	60da      	str	r2, [r3, #12]
    REQUEST_LIST.lenght = 0;
 800068e:	4b21      	ldr	r3, [pc, #132]	; (8000714 <J1939_Initialization+0xcc>)
 8000690:	2200      	movs	r2, #0
 8000692:	809a      	strh	r2, [r3, #4]

    REQUEST_LIST.next = J1939_NULL;
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <J1939_Initialization+0xcc>)
 8000696:	2200      	movs	r2, #0
 8000698:	611a      	str	r2, [r3, #16]
    /*Set the TP protocol to idle*/
#if J1939_TP_RX_TX
    J1939_TP_State_t = J1939_TP_NULL;
 800069a:	4b1f      	ldr	r3, [pc, #124]	; (8000718 <J1939_Initialization+0xd0>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]

    TP_TX_MSG.packets_request_num = 0;
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <J1939_Initialization+0xd4>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_TX_MSG.packets_total = 0;
 80006a8:	4b1c      	ldr	r3, [pc, #112]	; (800071c <J1939_Initialization+0xd4>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    TP_TX_MSG.packet_offset_p = 0;
 80006b0:	4b1a      	ldr	r3, [pc, #104]	; (800071c <J1939_Initialization+0xd4>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    TP_TX_MSG.time = 0;
 80006b8:	4b18      	ldr	r3, [pc, #96]	; (800071c <J1939_Initialization+0xd4>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    TP_TX_MSG.state = J1939_TP_TX_WAIT;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <J1939_Initialization+0xd4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    TP_RX_MSG.packets_ok_num = 0;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <J1939_Initialization+0xd8>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
    TP_RX_MSG.packets_total = 0;
 80006d0:	4b13      	ldr	r3, [pc, #76]	; (8000720 <J1939_Initialization+0xd8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_RX_MSG.time = 0;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <J1939_Initialization+0xd8>)
 80006da:	2200      	movs	r2, #0
 80006dc:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
    TP_RX_MSG.state = J1939_TP_RX_WAIT;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <J1939_Initialization+0xd8>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
#endif
}
 80006e8:	bf00      	nop
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr
 80006f2:	bf00      	nop
 80006f4:	2000014c 	.word	0x2000014c
 80006f8:	200003cc 	.word	0x200003cc
 80006fc:	20000340 	.word	0x20000340
 8000700:	20000148 	.word	0x20000148
 8000704:	20000042 	.word	0x20000042
 8000708:	20000174 	.word	0x20000174
 800070c:	2000014d 	.word	0x2000014d
 8000710:	2000003c 	.word	0x2000003c
 8000714:	200003b8 	.word	0x200003b8
 8000718:	20000041 	.word	0x20000041
 800071c:	20000240 	.word	0x20000240
 8000720:	20000048 	.word	0x20000048

08000724 <J1939_Poll>:
        If the interrupt mode is used, this program will not process receiving and sending messages, only address contention timeout. \n
*/
//Declare TP polling function
void J1939_TP_Poll();
void J1939_Poll()
{
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
    //We must call the J1939_ReceiveMessages accept function before the time is reset to 0.
#if J1939_POLL_ECAN == J1939_TRUE

    //J1939_Address = NodeAddress;//TODO :remove
    J1939_ReceiveMessages();
 8000728:	f000 f830 	bl	800078c <J1939_ReceiveMessages>
    J1939_TransmitMessages();
 800072c:	f000 fa9a 	bl	8000c64 <J1939_TransmitMessages>

#if J1939_TP_RX_TX
    J1939_TP_Poll();
 8000730:	f000 fd64 	bl	80011fc <J1939_TP_Poll>
#endif //J1939_TP_RX_TX
#endif //J1939_POLL_ECAN == J1939_TRUE
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <J1939_Messages_Filter>:
        1. Set filter 0 to only accept broadcast information (PF = 240 -255).
        2. Set filter 1, 2 only accept global address (J1939_GLOBAL_ADDRESS)
        3. As the program runs, filter 2 will be changed to adapt to the program logic.
*/
j1939_uint8_t J1939_Messages_Filter(J1939_MESSAGE *MsgPtr)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
    /*Filter 0*/
    if ((MsgPtr->Mxe.PDUFormat) >= 240)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	785b      	ldrb	r3, [r3, #1]
 8000744:	2bef      	cmp	r3, #239	; 0xef
 8000746:	d901      	bls.n	800074c <J1939_Messages_Filter+0x14>
    {
        return RC_SUCCESS;
 8000748:	2300      	movs	r3, #0
 800074a:	e016      	b.n	800077a <J1939_Messages_Filter+0x42>
    }
    /*Filter 1*/
    if (((MsgPtr->Mxe.PDUFormat) < 240) && (MsgPtr->Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS))
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	785b      	ldrb	r3, [r3, #1]
 8000750:	2bef      	cmp	r3, #239	; 0xef
 8000752:	d805      	bhi.n	8000760 <J1939_Messages_Filter+0x28>
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	789b      	ldrb	r3, [r3, #2]
 8000758:	2bff      	cmp	r3, #255	; 0xff
 800075a:	d101      	bne.n	8000760 <J1939_Messages_Filter+0x28>
    {
        return RC_SUCCESS;
 800075c:	2300      	movs	r3, #0
 800075e:	e00c      	b.n	800077a <J1939_Messages_Filter+0x42>
    }

        if (((MsgPtr->Mxe.PDUFormat) < 240) && (MsgPtr->Mxe.PDUSpecific == NodeAddress))
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	785b      	ldrb	r3, [r3, #1]
 8000764:	2bef      	cmp	r3, #239	; 0xef
 8000766:	d807      	bhi.n	8000778 <J1939_Messages_Filter+0x40>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	789a      	ldrb	r2, [r3, #2]
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <J1939_Messages_Filter+0x50>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	429a      	cmp	r2, r3
 8000772:	d101      	bne.n	8000778 <J1939_Messages_Filter+0x40>
        {
            return RC_SUCCESS;
 8000774:	2300      	movs	r3, #0
 8000776:	e000      	b.n	800077a <J1939_Messages_Filter+0x42>
        }

    return RC_CANNOTTRANSMIT;
 8000778:	2302      	movs	r3, #2
}
 800077a:	4618      	mov	r0, r3
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	2000003c 	.word	0x2000003c

0800078c <J1939_ReceiveMessages>:
        If the information is a network management information or long frame transmission (TP), the received information will be processed in this function. \n
        Otherwise, the information will be placed in the user's receiving queue. \n
        Note: The interrupt is disabled during the running of this program. \n
*/
void J1939_ReceiveMessages(void)
{
 800078c:	b5b0      	push	{r4, r5, r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
#if J1939_TP_RX_TX
    j1939_uint32_t _pgn = 0;
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
#endif //J1939_TP_RX_TX
    /*Read information from the receiving cache to OneMessage, OneMessage is a global variable*/
    /*Port_CAN_Receive function reads data and returns 1, and returns 0 if there is no data*/
    if (Port_CAN_Receive(&OneMessage))
 8000796:	4873      	ldr	r0, [pc, #460]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000798:	f001 f830 	bl	80017fc <J1939_CAN_Receive>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	f000 8251 	beq.w	8000c46 <J1939_ReceiveMessages+0x4ba>
    {
#if J1939SoftwareFilterEn == J1939_TRUE
        if (J1939_Messages_Filter(&OneMessage) != RC_SUCCESS)
 80007a4:	486f      	ldr	r0, [pc, #444]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80007a6:	f7ff ffc7 	bl	8000738 <J1939_Messages_Filter>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	f040 8247 	bne.w	8000c40 <J1939_ReceiveMessages+0x4b4>
        {
            return;
        }
#endif //J1939SoftwareFilterEn
        switch (OneMessage.Mxe.PDUFormat)
 80007b2:	4b6c      	ldr	r3, [pc, #432]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80007b4:	785b      	ldrb	r3, [r3, #1]
 80007b6:	2bec      	cmp	r3, #236	; 0xec
 80007b8:	d009      	beq.n	80007ce <J1939_ReceiveMessages+0x42>
 80007ba:	2bec      	cmp	r3, #236	; 0xec
 80007bc:	f300 81bc 	bgt.w	8000b38 <J1939_ReceiveMessages+0x3ac>
 80007c0:	2bea      	cmp	r3, #234	; 0xea
 80007c2:	f000 8170 	beq.w	8000aa6 <J1939_ReceiveMessages+0x31a>
 80007c6:	2beb      	cmp	r3, #235	; 0xeb
 80007c8:	f000 80d4 	beq.w	8000974 <J1939_ReceiveMessages+0x1e8>
 80007cc:	e1b4      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
        {
#if J1939_TP_RX_TX
        case J1939_PF_TP_CM: //Refer to J1939-21 TP multi-frame transmission protocol
            _pgn = (j1939_uint32_t)((OneMessage.Mxe.Data[7] << 16) & 0xFF0000) + (j1939_uint32_t)((OneMessage.Mxe.Data[6] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[5]) & 0xFF);
 80007ce:	4b65      	ldr	r3, [pc, #404]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80007d0:	7b1b      	ldrb	r3, [r3, #12]
 80007d2:	041b      	lsls	r3, r3, #16
 80007d4:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 80007d8:	4b62      	ldr	r3, [pc, #392]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80007da:	7adb      	ldrb	r3, [r3, #11]
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	4313      	orrs	r3, r2
 80007e2:	4a60      	ldr	r2, [pc, #384]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80007e4:	7a92      	ldrb	r2, [r2, #10]
 80007e6:	4413      	add	r3, r2
 80007e8:	607b      	str	r3, [r7, #4]
            if ((J1939_TP_State_t == J1939_TP_NULL) && (TP_RX_MSG.state == J1939_TP_RX_WAIT))
 80007ea:	4b5f      	ldr	r3, [pc, #380]	; (8000968 <J1939_ReceiveMessages+0x1dc>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d154      	bne.n	800089c <J1939_ReceiveMessages+0x110>
 80007f2:	4b5e      	ldr	r3, [pc, #376]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 80007f4:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d14f      	bne.n	800089c <J1939_ReceiveMessages+0x110>
            {
                if (OneMessage.Mxe.Data[0] == 16)
 80007fc:	4b59      	ldr	r3, [pc, #356]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80007fe:	795b      	ldrb	r3, [r3, #5]
 8000800:	2b10      	cmp	r3, #16
 8000802:	f040 8196 	bne.w	8000b32 <J1939_ReceiveMessages+0x3a6>
                {
                    J1939_TP_State_t = J1939_TP_RX;
 8000806:	4b58      	ldr	r3, [pc, #352]	; (8000968 <J1939_ReceiveMessages+0x1dc>)
 8000808:	2201      	movs	r2, #1
 800080a:	701a      	strb	r2, [r3, #0]

                    TP_RX_MSG.tp_rx_msg.SA = OneMessage.Mxe.SourceAddress;
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 800080e:	78da      	ldrb	r2, [r3, #3]
 8000810:	4b56      	ldr	r3, [pc, #344]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 8000812:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
                    TP_RX_MSG.tp_rx_msg.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[7] << 16) & 0xFF0000) + (j1939_uint32_t)((OneMessage.Mxe.Data[6] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[5]) & 0xFF);
 8000816:	4b53      	ldr	r3, [pc, #332]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000818:	7b1b      	ldrb	r3, [r3, #12]
 800081a:	041b      	lsls	r3, r3, #16
 800081c:	f403 027f 	and.w	r2, r3, #16711680	; 0xff0000
 8000820:	4b50      	ldr	r3, [pc, #320]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000822:	7adb      	ldrb	r3, [r3, #11]
 8000824:	021b      	lsls	r3, r3, #8
 8000826:	b29b      	uxth	r3, r3
 8000828:	4313      	orrs	r3, r2
 800082a:	4a4e      	ldr	r2, [pc, #312]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 800082c:	7a92      	ldrb	r2, [r2, #10]
 800082e:	4413      	add	r3, r2
 8000830:	4a4e      	ldr	r2, [pc, #312]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 8000832:	6013      	str	r3, [r2, #0]
                    /*If the system is busy*/
                    if (TP_RX_MSG.osbusy)
 8000834:	4b4d      	ldr	r3, [pc, #308]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 8000836:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800083a:	2b00      	cmp	r3, #0
 800083c:	d004      	beq.n	8000848 <J1939_ReceiveMessages+0xbc>
                    {
                        TP_RX_MSG.state = J1939_TP_RX_ERROR;
 800083e:	4b4b      	ldr	r3, [pc, #300]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 8000840:	2203      	movs	r2, #3
 8000842:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                        break;
 8000846:	e1fe      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
                    }
                    /* Determine whether there is enough memory to receive data, if not directly, disconnect the connection*/
                    if (((j1939_uint32_t)((OneMessage.Mxe.Data[2] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[1]) & 0xFF)) > J1939_TP_MAX_MESSAGE_LENGTH)
 8000848:	4b46      	ldr	r3, [pc, #280]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 800084a:	79db      	ldrb	r3, [r3, #7]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b29b      	uxth	r3, r3
 8000850:	4a44      	ldr	r2, [pc, #272]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000852:	7992      	ldrb	r2, [r2, #6]
 8000854:	4413      	add	r3, r2
 8000856:	2bf0      	cmp	r3, #240	; 0xf0
 8000858:	d904      	bls.n	8000864 <J1939_ReceiveMessages+0xd8>
                    {
                        TP_RX_MSG.state = J1939_TP_RX_ERROR;
 800085a:	4b44      	ldr	r3, [pc, #272]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 800085c:	2203      	movs	r2, #3
 800085e:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                        break;
 8000862:	e1f0      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
                    }
                    TP_RX_MSG.tp_rx_msg.byte_count = ((j1939_uint32_t)((OneMessage.Mxe.Data[2] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[1]) & 0xFF));
 8000864:	4b3f      	ldr	r3, [pc, #252]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000866:	79db      	ldrb	r3, [r3, #7]
 8000868:	b29b      	uxth	r3, r3
 800086a:	021b      	lsls	r3, r3, #8
 800086c:	b29a      	uxth	r2, r3
 800086e:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000870:	799b      	ldrb	r3, [r3, #6]
 8000872:	b29b      	uxth	r3, r3
 8000874:	4413      	add	r3, r2
 8000876:	b29a      	uxth	r2, r3
 8000878:	4b3c      	ldr	r3, [pc, #240]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 800087a:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
                    TP_RX_MSG.packets_total = OneMessage.Mxe.Data[3];
 800087e:	4b39      	ldr	r3, [pc, #228]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000880:	7a1a      	ldrb	r2, [r3, #8]
 8000882:	4b3a      	ldr	r3, [pc, #232]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 8000884:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                    TP_RX_MSG.time = J1939_TP_T2;
 8000888:	4b38      	ldr	r3, [pc, #224]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 800088a:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800088e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
                    TP_RX_MSG.state = J1939_TP_RX_READ_DATA;
 8000892:	4b36      	ldr	r3, [pc, #216]	; (800096c <J1939_ReceiveMessages+0x1e0>)
 8000894:	2201      	movs	r2, #1
 8000896:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                    break;
 800089a:	e1d4      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
                }
                goto PutInReceiveQueue;
                break;
            }
            if (J1939_TP_State_t == J1939_TP_TX)
 800089c:	4b32      	ldr	r3, [pc, #200]	; (8000968 <J1939_ReceiveMessages+0x1dc>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b02      	cmp	r3, #2
 80008a2:	d152      	bne.n	800094a <J1939_ReceiveMessages+0x1be>
            {
                /*Check PGN*/
                if (_pgn == TP_TX_MSG.tp_tx_msg.PGN)
 80008a4:	4b32      	ldr	r3, [pc, #200]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	429a      	cmp	r2, r3
 80008ac:	d14d      	bne.n	800094a <J1939_ReceiveMessages+0x1be>
                {
                    switch (OneMessage.Mxe.Data[0])
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	2bff      	cmp	r3, #255	; 0xff
 80008b4:	d04b      	beq.n	800094e <J1939_ReceiveMessages+0x1c2>
 80008b6:	2bff      	cmp	r3, #255	; 0xff
 80008b8:	dc4b      	bgt.n	8000952 <J1939_ReceiveMessages+0x1c6>
 80008ba:	2b13      	cmp	r3, #19
 80008bc:	d03b      	beq.n	8000936 <J1939_ReceiveMessages+0x1aa>
 80008be:	2b13      	cmp	r3, #19
 80008c0:	dc47      	bgt.n	8000952 <J1939_ReceiveMessages+0x1c6>
 80008c2:	2b10      	cmp	r3, #16
 80008c4:	d047      	beq.n	8000956 <J1939_ReceiveMessages+0x1ca>
 80008c6:	2b11      	cmp	r3, #17
 80008c8:	d143      	bne.n	8000952 <J1939_ReceiveMessages+0x1c6>
                    case J1939_RTS_CONTROL_BYTE:
                        /* The program runs here, indicating that a virtual link has been established with device 1 in the network (as the sender), but a link request from device 2 has been received, and the same PGN message request*/
                        /* According to the data link layer of J1939-21, we need to keep the original link and do nothing. Device 2 will automatically give up the link for timeout */
                        break;
                    case J1939_CTS_CONTROL_BYTE:
                        if ((J1939_TP_TX_CM_WAIT == TP_TX_MSG.state) || (J1939_TP_WAIT_ACK == TP_TX_MSG.state))
 80008ca:	4b29      	ldr	r3, [pc, #164]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 80008cc:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d004      	beq.n	80008de <J1939_ReceiveMessages+0x152>
 80008d4:	4b26      	ldr	r3, [pc, #152]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 80008d6:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80008da:	2b04      	cmp	r3, #4
 80008dc:	d13d      	bne.n	800095a <J1939_ReceiveMessages+0x1ce>
                        {
                            /* Send and wait to be held */
                            if (0x00u == OneMessage.Mxe.Data[1])
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80008e0:	799b      	ldrb	r3, [r3, #6]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d105      	bne.n	80008f2 <J1939_ReceiveMessages+0x166>
                            {
                                /* Refresh waiting counter */
                                TP_TX_MSG.time = J1939_TP_T4;
 80008e6:	4b22      	ldr	r3, [pc, #136]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 80008e8:	f240 421a 	movw	r2, #1050	; 0x41a
 80008ec:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
                                    TP_TX_MSG.packet_offset_p = (j1939_uint8_t)(OneMessage.Mxe.Data[2] - 1);
                                    TP_TX_MSG.state = J1939_TP_TX_DT;
                                }
                            }
                        }
                        break;
 80008f0:	e033      	b.n	800095a <J1939_ReceiveMessages+0x1ce>
                                if ((OneMessage.Mxe.Data[2] + OneMessage.Mxe.Data[1]) > (TP_TX_MSG.packets_total + 1))
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80008f4:	79db      	ldrb	r3, [r3, #7]
 80008f6:	461a      	mov	r2, r3
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 80008fa:	799b      	ldrb	r3, [r3, #6]
 80008fc:	441a      	add	r2, r3
 80008fe:	4b1c      	ldr	r3, [pc, #112]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 8000900:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000904:	3301      	adds	r3, #1
 8000906:	429a      	cmp	r2, r3
 8000908:	dd04      	ble.n	8000914 <J1939_ReceiveMessages+0x188>
                                    TP_TX_MSG.state = J1939_TP_TX_ERROR;
 800090a:	4b19      	ldr	r3, [pc, #100]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 800090c:	2205      	movs	r2, #5
 800090e:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        break;
 8000912:	e022      	b.n	800095a <J1939_ReceiveMessages+0x1ce>
                                    TP_TX_MSG.packets_request_num = OneMessage.Mxe.Data[1];
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000916:	799a      	ldrb	r2, [r3, #6]
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 800091a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
                                    TP_TX_MSG.packet_offset_p = (j1939_uint8_t)(OneMessage.Mxe.Data[2] - 1);
 800091e:	4b11      	ldr	r3, [pc, #68]	; (8000964 <J1939_ReceiveMessages+0x1d8>)
 8000920:	79db      	ldrb	r3, [r3, #7]
 8000922:	3b01      	subs	r3, #1
 8000924:	b2da      	uxtb	r2, r3
 8000926:	4b12      	ldr	r3, [pc, #72]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 8000928:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
                                    TP_TX_MSG.state = J1939_TP_TX_DT;
 800092c:	4b10      	ldr	r3, [pc, #64]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 800092e:	2203      	movs	r2, #3
 8000930:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        break;
 8000934:	e011      	b.n	800095a <J1939_ReceiveMessages+0x1ce>
                    case J1939_EOMACK_CONTROL_BYTE:
                        if (J1939_TP_WAIT_ACK == TP_TX_MSG.state)
 8000936:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 8000938:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800093c:	2b04      	cmp	r3, #4
 800093e:	d10e      	bne.n	800095e <J1939_ReceiveMessages+0x1d2>
                        {
                            TP_TX_MSG.state = J1939_TX_DONE;
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <J1939_ReceiveMessages+0x1e4>)
 8000942:	2206      	movs	r2, #6
 8000944:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                        }
                        //Here can add a verification of the data
                        break;
 8000948:	e009      	b.n	800095e <J1939_ReceiveMessages+0x1d2>
                        //Receive a connection abandonment, do nothing, the agreement will actively abandon the connection after a delay
                        break;
                    default:
                        break;
                    }
                }
 800094a:	bf00      	nop
 800094c:	e0f4      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
                        break;
 800094e:	bf00      	nop
 8000950:	e0f2      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
                        break;
 8000952:	bf00      	nop
 8000954:	e0f0      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
                        break;
 8000956:	bf00      	nop
 8000958:	e0ee      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
                        break;
 800095a:	bf00      	nop
 800095c:	e0ec      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
                        break;
 800095e:	bf00      	nop
            }
            goto PutInReceiveQueue;
 8000960:	e0ea      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
 8000962:	bf00      	nop
 8000964:	20000150 	.word	0x20000150
 8000968:	20000041 	.word	0x20000041
 800096c:	20000048 	.word	0x20000048
 8000970:	20000240 	.word	0x20000240
            break;
#endif //J1939_TP_RX_TX

#if J1939_TP_RX_TX
        case J1939_PF_DT:
            if ((TP_RX_MSG.state == J1939_TP_RX_DATA_WAIT) && (TP_RX_MSG.tp_rx_msg.SA == OneMessage.Mxe.SourceAddress))
 8000974:	4bb5      	ldr	r3, [pc, #724]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000976:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 800097a:	2b02      	cmp	r3, #2
 800097c:	f040 80db 	bne.w	8000b36 <J1939_ReceiveMessages+0x3aa>
 8000980:	4bb2      	ldr	r3, [pc, #712]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000982:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
 8000986:	4bb2      	ldr	r3, [pc, #712]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000988:	78db      	ldrb	r3, [r3, #3]
 800098a:	429a      	cmp	r2, r3
 800098c:	f040 80d3 	bne.w	8000b36 <J1939_ReceiveMessages+0x3aa>
            {
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u] = OneMessage.Mxe.Data[1];
 8000990:	4baf      	ldr	r3, [pc, #700]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000992:	795b      	ldrb	r3, [r3, #5]
 8000994:	3b01      	subs	r3, #1
 8000996:	461a      	mov	r2, r3
 8000998:	4613      	mov	r3, r2
 800099a:	00db      	lsls	r3, r3, #3
 800099c:	1a9b      	subs	r3, r3, r2
 800099e:	4aac      	ldr	r2, [pc, #688]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 80009a0:	7991      	ldrb	r1, [r2, #6]
 80009a2:	4aaa      	ldr	r2, [pc, #680]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 80009a4:	4413      	add	r3, r2
 80009a6:	460a      	mov	r2, r1
 80009a8:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 1] = OneMessage.Mxe.Data[2];
 80009aa:	4ba9      	ldr	r3, [pc, #676]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 80009ac:	795b      	ldrb	r3, [r3, #5]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	461a      	mov	r2, r3
 80009b2:	4613      	mov	r3, r2
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	1a9b      	subs	r3, r3, r2
 80009b8:	3301      	adds	r3, #1
 80009ba:	4aa5      	ldr	r2, [pc, #660]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 80009bc:	79d1      	ldrb	r1, [r2, #7]
 80009be:	4aa3      	ldr	r2, [pc, #652]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 80009c0:	4413      	add	r3, r2
 80009c2:	460a      	mov	r2, r1
 80009c4:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 2] = OneMessage.Mxe.Data[3];
 80009c6:	4ba2      	ldr	r3, [pc, #648]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 80009c8:	795b      	ldrb	r3, [r3, #5]
 80009ca:	3b01      	subs	r3, #1
 80009cc:	461a      	mov	r2, r3
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	3302      	adds	r3, #2
 80009d6:	4a9e      	ldr	r2, [pc, #632]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 80009d8:	7a11      	ldrb	r1, [r2, #8]
 80009da:	4a9c      	ldr	r2, [pc, #624]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 80009dc:	4413      	add	r3, r2
 80009de:	460a      	mov	r2, r1
 80009e0:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 3] = OneMessage.Mxe.Data[4];
 80009e2:	4b9b      	ldr	r3, [pc, #620]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 80009e4:	795b      	ldrb	r3, [r3, #5]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	461a      	mov	r2, r3
 80009ea:	4613      	mov	r3, r2
 80009ec:	00db      	lsls	r3, r3, #3
 80009ee:	1a9b      	subs	r3, r3, r2
 80009f0:	3303      	adds	r3, #3
 80009f2:	4a97      	ldr	r2, [pc, #604]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 80009f4:	7a51      	ldrb	r1, [r2, #9]
 80009f6:	4a95      	ldr	r2, [pc, #596]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 80009f8:	4413      	add	r3, r2
 80009fa:	460a      	mov	r2, r1
 80009fc:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 4] = OneMessage.Mxe.Data[5];
 80009fe:	4b94      	ldr	r3, [pc, #592]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000a00:	795b      	ldrb	r3, [r3, #5]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	461a      	mov	r2, r3
 8000a06:	4613      	mov	r3, r2
 8000a08:	00db      	lsls	r3, r3, #3
 8000a0a:	1a9b      	subs	r3, r3, r2
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	4a90      	ldr	r2, [pc, #576]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000a10:	7a91      	ldrb	r1, [r2, #10]
 8000a12:	4a8e      	ldr	r2, [pc, #568]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a14:	4413      	add	r3, r2
 8000a16:	460a      	mov	r2, r1
 8000a18:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 5] = OneMessage.Mxe.Data[6];
 8000a1a:	4b8d      	ldr	r3, [pc, #564]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000a1c:	795b      	ldrb	r3, [r3, #5]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	461a      	mov	r2, r3
 8000a22:	4613      	mov	r3, r2
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	1a9b      	subs	r3, r3, r2
 8000a28:	3305      	adds	r3, #5
 8000a2a:	4a89      	ldr	r2, [pc, #548]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000a2c:	7ad1      	ldrb	r1, [r2, #11]
 8000a2e:	4a87      	ldr	r2, [pc, #540]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a30:	4413      	add	r3, r2
 8000a32:	460a      	mov	r2, r1
 8000a34:	711a      	strb	r2, [r3, #4]
                TP_RX_MSG.tp_rx_msg.data[(OneMessage.Mxe.Data[0] - 1) * 7u + 6] = OneMessage.Mxe.Data[7];
 8000a36:	4b86      	ldr	r3, [pc, #536]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000a38:	795b      	ldrb	r3, [r3, #5]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4613      	mov	r3, r2
 8000a40:	00db      	lsls	r3, r3, #3
 8000a42:	1a9b      	subs	r3, r3, r2
 8000a44:	3306      	adds	r3, #6
 8000a46:	4a82      	ldr	r2, [pc, #520]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000a48:	7b11      	ldrb	r1, [r2, #12]
 8000a4a:	4a80      	ldr	r2, [pc, #512]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a4c:	4413      	add	r3, r2
 8000a4e:	460a      	mov	r2, r1
 8000a50:	711a      	strb	r2, [r3, #4]
                /*Special processing to re-accept the received data packet*/
                if ((OneMessage.Mxe.Data[0]) > TP_RX_MSG.packets_ok_num)
 8000a52:	4b7f      	ldr	r3, [pc, #508]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000a54:	795a      	ldrb	r2, [r3, #5]
 8000a56:	4b7d      	ldr	r3, [pc, #500]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a58:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000a5c:	429a      	cmp	r2, r3
 8000a5e:	d907      	bls.n	8000a70 <J1939_ReceiveMessages+0x2e4>
                {
                    TP_RX_MSG.packets_ok_num++;
 8000a60:	4b7a      	ldr	r3, [pc, #488]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a62:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000a66:	3301      	adds	r3, #1
 8000a68:	b2da      	uxtb	r2, r3
 8000a6a:	4b78      	ldr	r3, [pc, #480]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a6c:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
                }
                TP_RX_MSG.time = J1939_TP_T1;
 8000a70:	4b76      	ldr	r3, [pc, #472]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a72:	f240 22ee 	movw	r2, #750	; 0x2ee
 8000a76:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
                /*Determine whether an even number of data packets have been received or the last data packet has been read*/
                if ((TP_RX_MSG.packets_ok_num % 2 == 0) || (TP_RX_MSG.packets_ok_num == TP_RX_MSG.packets_total))
 8000a7a:	4b74      	ldr	r3, [pc, #464]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a7c:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d008      	beq.n	8000a9c <J1939_ReceiveMessages+0x310>
 8000a8a:	4b70      	ldr	r3, [pc, #448]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a8c:	f893 20fd 	ldrb.w	r2, [r3, #253]	; 0xfd
 8000a90:	4b6e      	ldr	r3, [pc, #440]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a92:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000a96:	429a      	cmp	r2, r3
 8000a98:	f040 80d4 	bne.w	8000c44 <J1939_ReceiveMessages+0x4b8>
                {
                    TP_RX_MSG.state = J1939_TP_RX_READ_DATA;
 8000a9c:	4b6b      	ldr	r3, [pc, #428]	; (8000c4c <J1939_ReceiveMessages+0x4c0>)
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
                    break;
 8000aa4:	e0cf      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
            //The program cannot run to this point, but we can't give up the received data packet
            goto PutInReceiveQueue;
#endif //J1939_TP_RX_TX
        case J1939_PF_REQUEST:
            /*Use OneMessage.Mxe.PGN to store the requested PGN*/
            if (OneMessage.Mxe.Data[1] < 240)
 8000aa6:	4b6a      	ldr	r3, [pc, #424]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000aa8:	799b      	ldrb	r3, [r3, #6]
 8000aaa:	2bef      	cmp	r3, #239	; 0xef
 8000aac:	d81b      	bhi.n	8000ae6 <J1939_ReceiveMessages+0x35a>
            {
                OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[2] << 16) & 0x030000) + (j1939_uint32_t)((OneMessage.Mxe.Data[1] << 8) & 0xFF00) + 0x00;
 8000aae:	4b68      	ldr	r3, [pc, #416]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000ab0:	79db      	ldrb	r3, [r3, #7]
 8000ab2:	041b      	lsls	r3, r3, #16
 8000ab4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000ab8:	4b65      	ldr	r3, [pc, #404]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000aba:	799b      	ldrb	r3, [r3, #6]
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b29b      	uxth	r3, r3
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ac6:	4b62      	ldr	r3, [pc, #392]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000ac8:	b2d1      	uxtb	r1, r2
 8000aca:	2000      	movs	r0, #0
 8000acc:	4301      	orrs	r1, r0
 8000ace:	7359      	strb	r1, [r3, #13]
 8000ad0:	0a11      	lsrs	r1, r2, #8
 8000ad2:	b2c9      	uxtb	r1, r1
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	4301      	orrs	r1, r0
 8000ad8:	7399      	strb	r1, [r3, #14]
 8000ada:	0c12      	lsrs	r2, r2, #16
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	2100      	movs	r1, #0
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	73da      	strb	r2, [r3, #15]
 8000ae4:	e01d      	b.n	8000b22 <J1939_ReceiveMessages+0x396>
            }
            else
            {
                OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Mxe.Data[2] << 16) & 0x030000) + (j1939_uint32_t)((OneMessage.Mxe.Data[1] << 8) & 0xFF00) + (j1939_uint32_t)((OneMessage.Mxe.Data[0]) & 0xFF);
 8000ae6:	4b5a      	ldr	r3, [pc, #360]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000ae8:	79db      	ldrb	r3, [r3, #7]
 8000aea:	041b      	lsls	r3, r3, #16
 8000aec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8000af0:	4b57      	ldr	r3, [pc, #348]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000af2:	799b      	ldrb	r3, [r3, #6]
 8000af4:	021b      	lsls	r3, r3, #8
 8000af6:	b29b      	uxth	r3, r3
 8000af8:	4313      	orrs	r3, r2
 8000afa:	4a55      	ldr	r2, [pc, #340]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000afc:	7952      	ldrb	r2, [r2, #5]
 8000afe:	4413      	add	r3, r2
 8000b00:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000b04:	4b52      	ldr	r3, [pc, #328]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b06:	b2d1      	uxtb	r1, r2
 8000b08:	2000      	movs	r0, #0
 8000b0a:	4301      	orrs	r1, r0
 8000b0c:	7359      	strb	r1, [r3, #13]
 8000b0e:	0a11      	lsrs	r1, r2, #8
 8000b10:	b2c9      	uxtb	r1, r1
 8000b12:	2000      	movs	r0, #0
 8000b14:	4301      	orrs	r1, r0
 8000b16:	7399      	strb	r1, [r3, #14]
 8000b18:	0c12      	lsrs	r2, r2, #16
 8000b1a:	b2d2      	uxtb	r2, r2
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	430a      	orrs	r2, r1
 8000b20:	73da      	strb	r2, [r3, #15]
            }
            J1939_Response(OneMessage.Mxe.PGN);
 8000b22:	4b4b      	ldr	r3, [pc, #300]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 fc84 	bl	8001438 <J1939_Response>
            break;
 8000b30:	e089      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
                goto PutInReceiveQueue;
 8000b32:	bf00      	nop
 8000b34:	e000      	b.n	8000b38 <J1939_ReceiveMessages+0x3ac>
            goto PutInReceiveQueue;
 8000b36:	bf00      	nop
OneMessage.Mxe.PGN = (j1939_uint32_t)((OneMessage.Array[0]<<16)&0x030000)
+(j1939_uint32_t)((OneMessage.Array[1]<<8)&0xFF00)
+(j1939_uint32_t)((OneMessage.Array[2])&0xFF);
}
*/
            if (OneMessage.Mxe.PDUFormat < 240)
 8000b38:	4b45      	ldr	r3, [pc, #276]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b3a:	785b      	ldrb	r3, [r3, #1]
 8000b3c:	2bef      	cmp	r3, #239	; 0xef
 8000b3e:	d822      	bhi.n	8000b86 <J1939_ReceiveMessages+0x3fa>
            {
                OneMessage.Mxe.PGN = (OneMessage.Mxe.Res << 17) + (OneMessage.Mxe.DataPage << 16) + (OneMessage.Mxe.PDUFormat << 8);
 8000b40:	4b43      	ldr	r3, [pc, #268]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	045a      	lsls	r2, r3, #17
 8000b4c:	4b40      	ldr	r3, [pc, #256]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	041b      	lsls	r3, r3, #16
 8000b58:	441a      	add	r2, r3
 8000b5a:	4b3d      	ldr	r3, [pc, #244]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b5c:	785b      	ldrb	r3, [r3, #1]
 8000b5e:	021b      	lsls	r3, r3, #8
 8000b60:	4413      	add	r3, r2
 8000b62:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000b66:	4b3a      	ldr	r3, [pc, #232]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b68:	b2d1      	uxtb	r1, r2
 8000b6a:	2000      	movs	r0, #0
 8000b6c:	4301      	orrs	r1, r0
 8000b6e:	7359      	strb	r1, [r3, #13]
 8000b70:	0a11      	lsrs	r1, r2, #8
 8000b72:	b2c9      	uxtb	r1, r1
 8000b74:	2000      	movs	r0, #0
 8000b76:	4301      	orrs	r1, r0
 8000b78:	7399      	strb	r1, [r3, #14]
 8000b7a:	0c12      	lsrs	r2, r2, #16
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	2100      	movs	r1, #0
 8000b80:	430a      	orrs	r2, r1
 8000b82:	73da      	strb	r2, [r3, #15]
 8000b84:	e024      	b.n	8000bd0 <J1939_ReceiveMessages+0x444>
            }
            else
            {
                OneMessage.Mxe.PGN = (OneMessage.Mxe.Res << 17) + (OneMessage.Mxe.DataPage << 16) + (OneMessage.Mxe.PDUFormat << 8) + OneMessage.Mxe.PDUSpecific;
 8000b86:	4b32      	ldr	r3, [pc, #200]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b88:	781b      	ldrb	r3, [r3, #0]
 8000b8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	045a      	lsls	r2, r3, #17
 8000b92:	4b2f      	ldr	r3, [pc, #188]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b9a:	b2db      	uxtb	r3, r3
 8000b9c:	041b      	lsls	r3, r3, #16
 8000b9e:	441a      	add	r2, r3
 8000ba0:	4b2b      	ldr	r3, [pc, #172]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000ba2:	785b      	ldrb	r3, [r3, #1]
 8000ba4:	021b      	lsls	r3, r3, #8
 8000ba6:	4413      	add	r3, r2
 8000ba8:	4a29      	ldr	r2, [pc, #164]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000baa:	7892      	ldrb	r2, [r2, #2]
 8000bac:	4413      	add	r3, r2
 8000bae:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000bb4:	b2d1      	uxtb	r1, r2
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	4301      	orrs	r1, r0
 8000bba:	7359      	strb	r1, [r3, #13]
 8000bbc:	0a11      	lsrs	r1, r2, #8
 8000bbe:	b2c9      	uxtb	r1, r1
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	4301      	orrs	r1, r0
 8000bc4:	7399      	strb	r1, [r3, #14]
 8000bc6:	0c12      	lsrs	r2, r2, #16
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	2100      	movs	r1, #0
 8000bcc:	430a      	orrs	r2, r1
 8000bce:	73da      	strb	r2, [r3, #15]
            }


                if ((J1939_OVERWRITE_RX_QUEUE == J1939_TRUE) ||
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <J1939_ReceiveMessages+0x4c8>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	2b09      	cmp	r3, #9
 8000bd6:	d82d      	bhi.n	8000c34 <J1939_ReceiveMessages+0x4a8>
                    (RXQueueCount < J1939_RX_QUEUE_SIZE))
                {
                    if (RXQueueCount < J1939_RX_QUEUE_SIZE)
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <J1939_ReceiveMessages+0x4c8>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	2b09      	cmp	r3, #9
 8000bde:	d813      	bhi.n	8000c08 <J1939_ReceiveMessages+0x47c>
                    {
                        RXQueueCount++;
 8000be0:	4b1c      	ldr	r3, [pc, #112]	; (8000c54 <J1939_ReceiveMessages+0x4c8>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	3301      	adds	r3, #1
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b1a      	ldr	r3, [pc, #104]	; (8000c54 <J1939_ReceiveMessages+0x4c8>)
 8000bea:	701a      	strb	r2, [r3, #0]
                        RXTail++;
 8000bec:	4b1a      	ldr	r3, [pc, #104]	; (8000c58 <J1939_ReceiveMessages+0x4cc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	4b18      	ldr	r3, [pc, #96]	; (8000c58 <J1939_ReceiveMessages+0x4cc>)
 8000bf6:	701a      	strb	r2, [r3, #0]
                        if (RXTail >= J1939_RX_QUEUE_SIZE)
 8000bf8:	4b17      	ldr	r3, [pc, #92]	; (8000c58 <J1939_ReceiveMessages+0x4cc>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b09      	cmp	r3, #9
 8000bfe:	d908      	bls.n	8000c12 <J1939_ReceiveMessages+0x486>
                            RXTail = 0;
 8000c00:	4b15      	ldr	r3, [pc, #84]	; (8000c58 <J1939_ReceiveMessages+0x4cc>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	701a      	strb	r2, [r3, #0]
 8000c06:	e004      	b.n	8000c12 <J1939_ReceiveMessages+0x486>
                    }
                    else
                    {
                        J1939_Flags.ReceivedMessagesdCover = 1; //Generate data coverage
 8000c08:	4a14      	ldr	r2, [pc, #80]	; (8000c5c <J1939_ReceiveMessages+0x4d0>)
 8000c0a:	7813      	ldrb	r3, [r2, #0]
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	7013      	strb	r3, [r2, #0]
                    }
                    RXQueue[RXTail] = OneMessage;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <J1939_ReceiveMessages+0x4cc>)
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	4619      	mov	r1, r3
 8000c18:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <J1939_ReceiveMessages+0x4d4>)
 8000c1a:	460b      	mov	r3, r1
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	4413      	add	r3, r2
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <J1939_ReceiveMessages+0x4c4>)
 8000c26:	461c      	mov	r4, r3
 8000c28:	4615      	mov	r5, r2
 8000c2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000c2e:	682b      	ldr	r3, [r5, #0]
 8000c30:	6023      	str	r3, [r4, #0]
 8000c32:	e008      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
                }
                else
                    J1939_Flags.ReceivedMessagesDropped = 1; //Data overflow occurs
 8000c34:	4a09      	ldr	r2, [pc, #36]	; (8000c5c <J1939_ReceiveMessages+0x4d0>)
 8000c36:	7813      	ldrb	r3, [r2, #0]
 8000c38:	f043 0304 	orr.w	r3, r3, #4
 8000c3c:	7013      	strb	r3, [r2, #0]
 8000c3e:	e002      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
            return;
 8000c40:	bf00      	nop
 8000c42:	e000      	b.n	8000c46 <J1939_ReceiveMessages+0x4ba>
                break;
 8000c44:	bf00      	nop


        }
        }
    }
}
 8000c46:	3708      	adds	r7, #8
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bdb0      	pop	{r4, r5, r7, pc}
 8000c4c:	20000048 	.word	0x20000048
 8000c50:	20000150 	.word	0x20000150
 8000c54:	2000014d 	.word	0x2000014d
 8000c58:	20000042 	.word	0x20000042
 8000c5c:	2000014c 	.word	0x2000014c
 8000c60:	20000178 	.word	0x20000178

08000c64 <J1939_TransmitMessages>:
* @return RC_CANNOTTRANSMIT The system did not send a message, there is no message to send, or the wrong CAN device
* @note After calling this function, if there is a message in the sending message queue, the message will be sent. If the message cannot be sent, the related error code will be returned. \n
             During the running of the program, the interrupt is disabled.
*/
 j1939_uint8_t J1939_TransmitMessages()
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0

        if (TTXQueueCount == 0)
 8000c68:	4b1c      	ldr	r3, [pc, #112]	; (8000cdc <J1939_TransmitMessages+0x78>)
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d12e      	bne.n	8000cce <J1939_TransmitMessages+0x6a>
        {
//If there is no message to be sent from the sending message queue, resume interruption (clear the sending flag)
#if J1939_POLL_ECAN == J1939_FALSE
            Port_TXinterruptEnable();
#endif
            return RC_CANNOTTRANSMIT;
 8000c70:	2302      	movs	r3, #2
 8000c72:	e031      	b.n	8000cd8 <J1939_TransmitMessages+0x74>
            while (TTXQueueCount > 0)
            {
                /*Ensure that the last data was sent successfully*/
                /**************A judgment function can be added ****************************/

                TXQueue[TXHead].Mxe.SourceAddress = NodeAddress;
 8000c74:	4b1a      	ldr	r3, [pc, #104]	; (8000ce0 <J1939_TransmitMessages+0x7c>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <J1939_TransmitMessages+0x80>)
 8000c7c:	7818      	ldrb	r0, [r3, #0]
 8000c7e:	4a1a      	ldr	r2, [pc, #104]	; (8000ce8 <J1939_TransmitMessages+0x84>)
 8000c80:	460b      	mov	r3, r1
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	440b      	add	r3, r1
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	4413      	add	r3, r2
 8000c8a:	3303      	adds	r3, #3
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	701a      	strb	r2, [r3, #0]

                SendOneMessage((J1939_MESSAGE *)&(TXQueue[TXHead]));
 8000c90:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <J1939_TransmitMessages+0x7c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	461a      	mov	r2, r3
 8000c96:	4613      	mov	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	4413      	add	r3, r2
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <J1939_TransmitMessages+0x84>)
 8000ca0:	4413      	add	r3, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fc12 	bl	80004cc <SendOneMessage>
                TXHead++;
 8000ca8:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <J1939_TransmitMessages+0x7c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	3301      	adds	r3, #1
 8000cae:	b2da      	uxtb	r2, r3
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <J1939_TransmitMessages+0x7c>)
 8000cb2:	701a      	strb	r2, [r3, #0]
                if (TXHead >= J1939_TX_QUEUE_SIZE)
 8000cb4:	4b0a      	ldr	r3, [pc, #40]	; (8000ce0 <J1939_TransmitMessages+0x7c>)
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b04      	cmp	r3, #4
 8000cba:	d902      	bls.n	8000cc2 <J1939_TransmitMessages+0x5e>
                    TXHead = 0;
 8000cbc:	4b08      	ldr	r3, [pc, #32]	; (8000ce0 <J1939_TransmitMessages+0x7c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
                TTXQueueCount--;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <J1939_TransmitMessages+0x78>)
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	b2da      	uxtb	r2, r3
 8000cca:	4b04      	ldr	r3, [pc, #16]	; (8000cdc <J1939_TransmitMessages+0x78>)
 8000ccc:	701a      	strb	r2, [r3, #0]
            while (TTXQueueCount > 0)
 8000cce:	4b03      	ldr	r3, [pc, #12]	; (8000cdc <J1939_TransmitMessages+0x78>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1ce      	bne.n	8000c74 <J1939_TransmitMessages+0x10>
            Port_TXinterruptEnable();
#endif
        }


    return RC_SUCCESS;
 8000cd6:	2300      	movs	r3, #0
}
 8000cd8:	4618      	mov	r0, r3
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000174 	.word	0x20000174
 8000ce0:	200003cc 	.word	0x200003cc
 8000ce4:	2000003c 	.word	0x2000003c
 8000ce8:	20000354 	.word	0x20000354

08000cec <J1939_TP_DT_Packet_send>:
#if J1939_TP_RX_TX
/**
* @note sends TP.DT, refer to J1939-21
*/
void J1939_TP_DT_Packet_send(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint16_t _packet_offset_p;
    j1939_int32_t _i = 0;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61fb      	str	r3, [r7, #28]
    _msg.Mxe.Priority = J1939_TP_DT_PRIORITY;
 8000cf6:	793b      	ldrb	r3, [r7, #4]
 8000cf8:	f043 031c 	orr.w	r3, r3, #28
 8000cfc:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.DataPage = 0;
 8000cfe:	793b      	ldrb	r3, [r7, #4]
 8000d00:	f36f 0300 	bfc	r3, #0, #1
 8000d04:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.PDUFormat = J1939_PF_DT;
 8000d06:	23eb      	movs	r3, #235	; 0xeb
 8000d08:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000d0a:	4b4d      	ldr	r3, [pc, #308]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d0c:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000d10:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.DataLength = 8;
 8000d12:	7a3b      	ldrb	r3, [r7, #8]
 8000d14:	2208      	movs	r2, #8
 8000d16:	f362 0303 	bfi	r3, r2, #0, #4
 8000d1a:	723b      	strb	r3, [r7, #8]

    /*Get the number of data packets sent by request*/
    if (TP_TX_MSG.packets_request_num > 0)
 8000d1c:	4b48      	ldr	r3, [pc, #288]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d1e:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d076      	beq.n	8000e14 <J1939_TP_DT_Packet_send+0x128>
    {
        TP_TX_MSG.packets_request_num--;
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d28:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8000d2c:	3b01      	subs	r3, #1
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	4b43      	ldr	r3, [pc, #268]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d32:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        /*Get data offset pointer*/
        _packet_offset_p = (j1939_uint16_t)(TP_TX_MSG.packet_offset_p * 7u);
 8000d36:	4b42      	ldr	r3, [pc, #264]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d38:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000d3c:	b29b      	uxth	r3, r3
 8000d3e:	461a      	mov	r2, r3
 8000d40:	00d2      	lsls	r2, r2, #3
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	837b      	strh	r3, [r7, #26]
        /*Load data package number*/
        _msg.Mxe.Data[0] = (j1939_uint8_t)(1u + TP_TX_MSG.packet_offset_p);
 8000d46:	4b3e      	ldr	r3, [pc, #248]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d48:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	727b      	strb	r3, [r7, #9]

        for (_i = 0; _i < 7; _i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	e00f      	b.n	8000d78 <J1939_TP_DT_Packet_send+0x8c>
        {
            _msg.Mxe.Data[_i + 1] = TP_TX_MSG.tp_tx_msg.data[_packet_offset_p + _i];
 8000d58:	8b7a      	ldrh	r2, [r7, #26]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
 8000d5c:	441a      	add	r2, r3
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3301      	adds	r3, #1
 8000d62:	4937      	ldr	r1, [pc, #220]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d64:	440a      	add	r2, r1
 8000d66:	7912      	ldrb	r2, [r2, #4]
 8000d68:	f107 0120 	add.w	r1, r7, #32
 8000d6c:	440b      	add	r3, r1
 8000d6e:	f803 2c17 	strb.w	r2, [r3, #-23]
        for (_i = 0; _i < 7; _i++)
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3301      	adds	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	2b06      	cmp	r3, #6
 8000d7c:	ddec      	ble.n	8000d58 <J1939_TP_DT_Packet_send+0x6c>
        }
        /*Is it the last packet of data message*/
        if (TP_TX_MSG.packet_offset_p == (TP_TX_MSG.packets_total - 1u))
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d80:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000d84:	461a      	mov	r2, r3
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d88:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000d8c:	3b01      	subs	r3, #1
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d12f      	bne.n	8000df2 <J1939_TP_DT_Packet_send+0x106>
        {
            /* Whether the parameter group can be filled, whether it needs to be filled, */
            if (_packet_offset_p > TP_TX_MSG.tp_tx_msg.byte_count - 7)
 8000d92:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000d94:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000d98:	1f9a      	subs	r2, r3, #6
 8000d9a:	8b7b      	ldrh	r3, [r7, #26]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	dc16      	bgt.n	8000dce <J1939_TP_DT_Packet_send+0xe2>
            {
                /*Calculate the number of data to be filled*/
                _i = TP_TX_MSG.tp_tx_msg.byte_count - _packet_offset_p - 7;
 8000da0:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000da2:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000da6:	461a      	mov	r2, r3
 8000da8:	8b7b      	ldrh	r3, [r7, #26]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	3b07      	subs	r3, #7
 8000dae:	61fb      	str	r3, [r7, #28]

                for (; _i < 0; _i++)
 8000db0:	e00a      	b.n	8000dc8 <J1939_TP_DT_Packet_send+0xdc>
                {
                    /*By default, the parameter group size of J1939 is 8*/
                    _msg.Mxe.Data[_i + 8] = J1939_RESERVED_BYTE;
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3308      	adds	r3, #8
 8000db6:	f107 0220 	add.w	r2, r7, #32
 8000dba:	4413      	add	r3, r2
 8000dbc:	22ff      	movs	r2, #255	; 0xff
 8000dbe:	f803 2c17 	strb.w	r2, [r3, #-23]
                for (; _i < 0; _i++)
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	61fb      	str	r3, [r7, #28]
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	dbf1      	blt.n	8000db2 <J1939_TP_DT_Packet_send+0xc6>
                }
            }

            TP_TX_MSG.packets_request_num = 0;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_TX_MSG.packet_offset_p = 0;
 8000dd6:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.time = J1939_TP_T3;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000de0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000de4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            /* Jump step, wait for end confirmation or resend data request*/
            TP_TX_MSG.state = J1939_TP_WAIT_ACK;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000dea:	2204      	movs	r2, #4
 8000dec:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
 8000df0:	e00b      	b.n	8000e0a <J1939_TP_DT_Packet_send+0x11e>
        }
        else
        {
            /*Prepare for the next data transmission*/
            TP_TX_MSG.packet_offset_p++;
 8000df2:	4b13      	ldr	r3, [pc, #76]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000df4:	f893 30fa 	ldrb.w	r3, [r3, #250]	; 0xfa
 8000df8:	3301      	adds	r3, #1
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4b10      	ldr	r3, [pc, #64]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000dfe:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.state = J1939_TP_TX_DT;
 8000e02:	4b0f      	ldr	r3, [pc, #60]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000e04:	2203      	movs	r2, #3
 8000e06:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
        }

        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fbc7 	bl	80005a0 <J1939_EnqueueMessage>
        TP_TX_MSG.packets_request_num = 0;
        TP_TX_MSG.packet_offset_p = 0;
        TP_TX_MSG.time = J1939_TP_T3;
        TP_TX_MSG.state = J1939_TP_WAIT_ACK;
    }
}
 8000e12:	e010      	b.n	8000e36 <J1939_TP_DT_Packet_send+0x14a>
        TP_TX_MSG.packets_request_num = 0;
 8000e14:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
        TP_TX_MSG.packet_offset_p = 0;
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
        TP_TX_MSG.time = J1939_TP_T3;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000e26:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000e2a:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        TP_TX_MSG.state = J1939_TP_WAIT_ACK;
 8000e2e:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <J1939_TP_DT_Packet_send+0x154>)
 8000e30:	2204      	movs	r2, #4
 8000e32:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000e36:	bf00      	nop
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20000240 	.word	0x20000240

08000e44 <J1939_CM_Start>:
/**
* @note sends TP. CM-RTS, 16, 23, 4, 255, PGN message, refer to J1939-21,
*/
void J1939_CM_Start(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0
    j1939_uint32_t pgn_num;
    J1939_MESSAGE _msg;

    pgn_num = TP_TX_MSG.tp_tx_msg.PGN;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <J1939_CM_Start+0x94>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000e50:	783b      	ldrb	r3, [r7, #0]
 8000e52:	2201      	movs	r2, #1
 8000e54:	f362 0384 	bfi	r3, r2, #2, #3
 8000e58:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000e5a:	783b      	ldrb	r3, [r7, #0]
 8000e5c:	f36f 0300 	bfc	r3, #0, #1
 8000e60:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = 0xf1;
 8000e62:	23f1      	movs	r3, #241	; 0xf1
 8000e64:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <J1939_CM_Start+0x94>)
 8000e68:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000e6c:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000e6e:	793b      	ldrb	r3, [r7, #4]
 8000e70:	2208      	movs	r2, #8
 8000e72:	f362 0303 	bfi	r3, r2, #0, #4
 8000e76:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_RTS_CONTROL_BYTE;
 8000e78:	2310      	movs	r3, #16
 8000e7a:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = (j1939_uint8_t)TP_TX_MSG.tp_tx_msg.byte_count;
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <J1939_CM_Start+0x94>)
 8000e7e:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = (j1939_uint8_t)((TP_TX_MSG.tp_tx_msg.byte_count) >> 8);
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <J1939_CM_Start+0x94>)
 8000e88:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 8000e8c:	0a1b      	lsrs	r3, r3, #8
 8000e8e:	b29b      	uxth	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = TP_TX_MSG.packets_total;
 8000e94:	4b10      	ldr	r3, [pc, #64]	; (8000ed8 <J1939_CM_Start+0x94>)
 8000e96:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8000e9a:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000e9c:	23ff      	movs	r3, #255	; 0xff
 8000e9e:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	0c1b      	lsrs	r3, r3, #16
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	0a1b      	lsrs	r3, r3, #8
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f7ff fb71 	bl	80005a0 <J1939_EnqueueMessage>

    /*Refresh waiting time, trigger the next step ()*/
    TP_TX_MSG.time = J1939_TP_T3;
 8000ebe:	4b06      	ldr	r3, [pc, #24]	; (8000ed8 <J1939_CM_Start+0x94>)
 8000ec0:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8000ec4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    TP_TX_MSG.state = J1939_TP_TX_CM_WAIT;
 8000ec8:	4b03      	ldr	r3, [pc, #12]	; (8000ed8 <J1939_CM_Start+0x94>)
 8000eca:	2202      	movs	r2, #2
 8000ecc:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000240 	.word	0x20000240

08000edc <J1939_TP_TX_Abort>:
/**
* @note break TP link
*/
void J1939_TP_TX_Abort(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;

    pgn_num = TP_TX_MSG.tp_tx_msg.PGN;
 8000ee2:	4b1c      	ldr	r3, [pc, #112]	; (8000f54 <J1939_TP_TX_Abort+0x78>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000ee8:	783b      	ldrb	r3, [r7, #0]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f362 0384 	bfi	r3, r2, #2, #3
 8000ef0:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000ef2:	783b      	ldrb	r3, [r7, #0]
 8000ef4:	f36f 0300 	bfc	r3, #0, #1
 8000ef8:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8000efa:	23ec      	movs	r3, #236	; 0xec
 8000efc:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_TX_MSG.tp_tx_msg.SA;
 8000efe:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <J1939_TP_TX_Abort+0x78>)
 8000f00:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000f04:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000f06:	793b      	ldrb	r3, [r7, #4]
 8000f08:	2208      	movs	r2, #8
 8000f0a:	f362 0303 	bfi	r3, r2, #0, #4
 8000f0e:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_CONNABORT_CONTROL_BYTE;
 8000f10:	23ff      	movs	r3, #255	; 0xff
 8000f12:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = J1939_RESERVED_BYTE;
 8000f14:	23ff      	movs	r3, #255	; 0xff
 8000f16:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 8000f18:	23ff      	movs	r3, #255	; 0xff
 8000f1a:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000f1c:	23ff      	movs	r3, #255	; 0xff
 8000f1e:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000f20:	23ff      	movs	r3, #255	; 0xff
 8000f22:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	0c1b      	lsrs	r3, r3, #16
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	0a1b      	lsrs	r3, r3, #8
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fb2f 	bl	80005a0 <J1939_EnqueueMessage>
    /*End sending*/
    TP_TX_MSG.state = J1939_TX_DONE;
 8000f42:	4b04      	ldr	r3, [pc, #16]	; (8000f54 <J1939_TP_TX_Abort+0x78>)
 8000f44:	2206      	movs	r2, #6
 8000f46:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000240 	.word	0x20000240

08000f58 <J1939_TP_RX_Abort>:
/**
* @note break TP link
*/
void J1939_TP_RX_Abort(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;

    pgn_num = TP_RX_MSG.tp_rx_msg.PGN;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	; (8000fd0 <J1939_TP_RX_Abort+0x78>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8000f64:	783b      	ldrb	r3, [r7, #0]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f362 0384 	bfi	r3, r2, #2, #3
 8000f6c:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 8000f6e:	783b      	ldrb	r3, [r7, #0]
 8000f70:	f36f 0300 	bfc	r3, #0, #1
 8000f74:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 8000f76:	23ec      	movs	r3, #236	; 0xec
 8000f78:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_RX_MSG.tp_rx_msg.SA;
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <J1939_TP_RX_Abort+0x78>)
 8000f7c:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 8000f80:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 8000f82:	793b      	ldrb	r3, [r7, #4]
 8000f84:	2208      	movs	r2, #8
 8000f86:	f362 0303 	bfi	r3, r2, #0, #4
 8000f8a:	713b      	strb	r3, [r7, #4]
    _msg.Mxe.Data[0] = J1939_CONNABORT_CONTROL_BYTE;
 8000f8c:	23ff      	movs	r3, #255	; 0xff
 8000f8e:	717b      	strb	r3, [r7, #5]
    _msg.Mxe.Data[1] = J1939_RESERVED_BYTE;
 8000f90:	23ff      	movs	r3, #255	; 0xff
 8000f92:	71bb      	strb	r3, [r7, #6]
    _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 8000f94:	23ff      	movs	r3, #255	; 0xff
 8000f96:	71fb      	strb	r3, [r7, #7]
    _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8000f98:	23ff      	movs	r3, #255	; 0xff
 8000f9a:	723b      	strb	r3, [r7, #8]
    _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8000f9c:	23ff      	movs	r3, #255	; 0xff
 8000f9e:	727b      	strb	r3, [r7, #9]
    _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	0c1b      	lsrs	r3, r3, #16
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	733b      	strb	r3, [r7, #12]
    _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	0a1b      	lsrs	r3, r3, #8
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	72fb      	strb	r3, [r7, #11]
    _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	72bb      	strb	r3, [r7, #10]

    /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
    J1939_EnqueueMessage(&_msg);
 8000fb6:	463b      	mov	r3, r7
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f7ff faf1 	bl	80005a0 <J1939_EnqueueMessage>
    /*End sending*/
    TP_RX_MSG.state = J1939_RX_DONE;
 8000fbe:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <J1939_TP_RX_Abort+0x78>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
}
 8000fc6:	bf00      	nop
 8000fc8:	3718      	adds	r7, #24
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000048 	.word	0x20000048

08000fd4 <J1939_TP_TX_RefreshCMTimer>:
/**
* @note TP's timer
*/
j1939_uint8_t J1939_TP_TX_RefreshCMTimer(j1939_uint16_t dt_ms)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	80fb      	strh	r3, [r7, #6]
    if ((J1939_TP_TX_CM_WAIT == TP_TX_MSG.state) || (J1939_TP_WAIT_ACK == TP_TX_MSG.state))
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000fe0:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d004      	beq.n	8000ff2 <J1939_TP_TX_RefreshCMTimer+0x1e>
 8000fe8:	4b11      	ldr	r3, [pc, #68]	; (8001030 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000fea:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8000fee:	2b04      	cmp	r3, #4
 8000ff0:	d116      	bne.n	8001020 <J1939_TP_TX_RefreshCMTimer+0x4c>
    {
        if (TP_TX_MSG.time > dt_ms)
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8000ff4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8000ff8:	88fa      	ldrh	r2, [r7, #6]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d20a      	bcs.n	8001014 <J1939_TP_TX_RefreshCMTimer+0x40>
        {
            TP_TX_MSG.time = TP_TX_MSG.time - dt_ms;
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8001000:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8001004:	88fb      	ldrh	r3, [r7, #6]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	b29a      	uxth	r2, r3
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 800100c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            return J1939_TP_TIMEOUT_NORMAL;
 8001010:	2300      	movs	r3, #0
 8001012:	e006      	b.n	8001022 <J1939_TP_TX_RefreshCMTimer+0x4e>
        }
        else
        {
            /*time out */
            TP_TX_MSG.time = 0u;
 8001014:	4b06      	ldr	r3, [pc, #24]	; (8001030 <J1939_TP_TX_RefreshCMTimer+0x5c>)
 8001016:	2200      	movs	r2, #0
 8001018:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            return J1939_TP_TIMEOUT_ABNORMAL;
 800101c:	2301      	movs	r3, #1
 800101e:	e000      	b.n	8001022 <J1939_TP_TX_RefreshCMTimer+0x4e>
        }
    }
    else
    {
        return J1939_TP_TIMEOUT_NORMAL;
 8001020:	2300      	movs	r3, #0
    }
}
 8001022:	4618      	mov	r0, r3
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000240 	.word	0x20000240

08001034 <J1939_TP_RX_RefreshCMTimer>:
/**
* @note TP's timer
*/
j1939_uint8_t J1939_TP_RX_RefreshCMTimer(j1939_uint16_t dt_ms)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	80fb      	strh	r3, [r7, #6]
    if ((J1939_TP_RX_DATA_WAIT == TP_RX_MSG.state))
 800103e:	4b11      	ldr	r3, [pc, #68]	; (8001084 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8001040:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8001044:	2b02      	cmp	r3, #2
 8001046:	d116      	bne.n	8001076 <J1939_TP_RX_RefreshCMTimer+0x42>
    {
        if (TP_RX_MSG.time > dt_ms)
 8001048:	4b0e      	ldr	r3, [pc, #56]	; (8001084 <J1939_TP_RX_RefreshCMTimer+0x50>)
 800104a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	; 0xfa
 800104e:	88fa      	ldrh	r2, [r7, #6]
 8001050:	429a      	cmp	r2, r3
 8001052:	d20a      	bcs.n	800106a <J1939_TP_RX_RefreshCMTimer+0x36>
        {
            TP_RX_MSG.time = TP_RX_MSG.time - dt_ms;
 8001054:	4b0b      	ldr	r3, [pc, #44]	; (8001084 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8001056:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	; 0xfa
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	b29a      	uxth	r2, r3
 8001060:	4b08      	ldr	r3, [pc, #32]	; (8001084 <J1939_TP_RX_RefreshCMTimer+0x50>)
 8001062:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            return J1939_TP_TIMEOUT_NORMAL;
 8001066:	2300      	movs	r3, #0
 8001068:	e006      	b.n	8001078 <J1939_TP_RX_RefreshCMTimer+0x44>
        }
        else
        {
            /*time out */
            TP_RX_MSG.time = 0u;
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <J1939_TP_RX_RefreshCMTimer+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            return J1939_TP_TIMEOUT_ABNORMAL;
 8001072:	2301      	movs	r3, #1
 8001074:	e000      	b.n	8001078 <J1939_TP_RX_RefreshCMTimer+0x44>
        }
    }
    else
    {
        return J1939_TP_TIMEOUT_NORMAL;
 8001076:	2300      	movs	r3, #0
    }
}
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	20000048 	.word	0x20000048

08001088 <J1939_read_DT_Packet>:
/**
* @note sends read data TP.CM_CTS and EndofMsgAck messages.
*/
void J1939_read_DT_Packet()
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
    J1939_MESSAGE _msg;
    j1939_uint32_t pgn_num;
    pgn_num = TP_RX_MSG.tp_rx_msg.PGN;
 800108e:	4b5a      	ldr	r3, [pc, #360]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	617b      	str	r3, [r7, #20]

    _msg.Mxe.Priority = J1939_TP_CM_PRIORITY;
 8001094:	783b      	ldrb	r3, [r7, #0]
 8001096:	2201      	movs	r2, #1
 8001098:	f362 0384 	bfi	r3, r2, #2, #3
 800109c:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.DataPage = 0;
 800109e:	783b      	ldrb	r3, [r7, #0]
 80010a0:	f36f 0300 	bfc	r3, #0, #1
 80010a4:	703b      	strb	r3, [r7, #0]
    _msg.Mxe.PDUFormat = J1939_PF_TP_CM;
 80010a6:	23ec      	movs	r3, #236	; 0xec
 80010a8:	707b      	strb	r3, [r7, #1]
    _msg.Mxe.DestinationAddress = TP_RX_MSG.tp_rx_msg.SA;
 80010aa:	4b53      	ldr	r3, [pc, #332]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 80010ac:	f893 30f6 	ldrb.w	r3, [r3, #246]	; 0xf6
 80010b0:	70bb      	strb	r3, [r7, #2]
    _msg.Mxe.DataLength = 8;
 80010b2:	793b      	ldrb	r3, [r7, #4]
 80010b4:	2208      	movs	r2, #8
 80010b6:	f362 0303 	bfi	r3, r2, #0, #4
 80010ba:	713b      	strb	r3, [r7, #4]

    /*If the system is busy, keep the link but do not send messages*/
    if (TP_RX_MSG.osbusy)
 80010bc:	4b4e      	ldr	r3, [pc, #312]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 80010be:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d019      	beq.n	80010fa <J1939_read_DT_Packet+0x72>
    {
        _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 80010c6:	2311      	movs	r3, #17
 80010c8:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = J1939_RESERVED_BYTE;
 80010ce:	23ff      	movs	r3, #255	; 0xff
 80010d0:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 80010d2:	23ff      	movs	r3, #255	; 0xff
 80010d4:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 80010d6:	23ff      	movs	r3, #255	; 0xff
 80010d8:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	0c1b      	lsrs	r3, r3, #16
 80010de:	b2db      	uxtb	r3, r3
 80010e0:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	0a1b      	lsrs	r3, r3, #8
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	72bb      	strb	r3, [r7, #10]
        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 80010f0:	463b      	mov	r3, r7
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa54 	bl	80005a0 <J1939_EnqueueMessage>
        return;
 80010f8:	e07b      	b.n	80011f2 <J1939_read_DT_Packet+0x16a>
    }
    if (TP_RX_MSG.packets_total > TP_RX_MSG.packets_ok_num)
 80010fa:	4b3f      	ldr	r3, [pc, #252]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 80010fc:	f893 20fc 	ldrb.w	r2, [r3, #252]	; 0xfc
 8001100:	4b3d      	ldr	r3, [pc, #244]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 8001102:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8001106:	429a      	cmp	r2, r3
 8001108:	d94b      	bls.n	80011a2 <J1939_read_DT_Packet+0x11a>
    {
        /*The last response, if less than 2 packets of data*/
        if ((TP_RX_MSG.packets_total - TP_RX_MSG.packets_ok_num) == 1)
 800110a:	4b3b      	ldr	r3, [pc, #236]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 800110c:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 8001110:	461a      	mov	r2, r3
 8001112:	4b39      	ldr	r3, [pc, #228]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 8001114:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	2b01      	cmp	r3, #1
 800111c:	d11f      	bne.n	800115e <J1939_read_DT_Packet+0xd6>
        {
            _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 800111e:	2311      	movs	r3, #17
 8001120:	717b      	strb	r3, [r7, #5]
            _msg.Mxe.Data[1] = 1;
 8001122:	2301      	movs	r3, #1
 8001124:	71bb      	strb	r3, [r7, #6]
            _msg.Mxe.Data[2] = TP_RX_MSG.packets_total;
 8001126:	4b34      	ldr	r3, [pc, #208]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 8001128:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 800112c:	71fb      	strb	r3, [r7, #7]
            _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 800112e:	23ff      	movs	r3, #255	; 0xff
 8001130:	723b      	strb	r3, [r7, #8]
            _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8001132:	23ff      	movs	r3, #255	; 0xff
 8001134:	727b      	strb	r3, [r7, #9]
            _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	0c1b      	lsrs	r3, r3, #16
 800113a:	b2db      	uxtb	r3, r3
 800113c:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	0a1b      	lsrs	r3, r3, #8
 8001142:	b2db      	uxtb	r3, r3
 8001144:	72fb      	strb	r3, [r7, #11]
            _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	72bb      	strb	r3, [r7, #10]
            /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
            J1939_EnqueueMessage(&_msg);
 800114c:	463b      	mov	r3, r7
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fa26 	bl	80005a0 <J1939_EnqueueMessage>
            TP_RX_MSG.state = J1939_TP_RX_DATA_WAIT;
 8001154:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 8001156:	2202      	movs	r2, #2
 8001158:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            return;
 800115c:	e049      	b.n	80011f2 <J1939_read_DT_Packet+0x16a>
        }
        _msg.Mxe.Data[0] = J1939_CTS_CONTROL_BYTE;
 800115e:	2311      	movs	r3, #17
 8001160:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = 2;
 8001162:	2302      	movs	r3, #2
 8001164:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = (TP_RX_MSG.packets_ok_num + 1);
 8001166:	4b24      	ldr	r3, [pc, #144]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 8001168:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 800116c:	3301      	adds	r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = J1939_RESERVED_BYTE;
 8001172:	23ff      	movs	r3, #255	; 0xff
 8001174:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 8001176:	23ff      	movs	r3, #255	; 0xff
 8001178:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	0c1b      	lsrs	r3, r3, #16
 800117e:	b2db      	uxtb	r3, r3
 8001180:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	0a1b      	lsrs	r3, r3, #8
 8001186:	b2db      	uxtb	r3, r3
 8001188:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	72bb      	strb	r3, [r7, #10]

        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 8001190:	463b      	mov	r3, r7
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fa04 	bl	80005a0 <J1939_EnqueueMessage>
        TP_RX_MSG.state = J1939_TP_RX_DATA_WAIT;
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 800119a:	2202      	movs	r2, #2
 800119c:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
        return;
 80011a0:	e027      	b.n	80011f2 <J1939_read_DT_Packet+0x16a>
    }
    else
    {
        /*Send the transmission normal end message, EndofMsgAck*/
        _msg.Mxe.Data[0] = J1939_EOMACK_CONTROL_BYTE;
 80011a2:	2313      	movs	r3, #19
 80011a4:	717b      	strb	r3, [r7, #5]
        _msg.Mxe.Data[1] = (TP_RX_MSG.tp_rx_msg.byte_count & 0x00ff);
 80011a6:	4b14      	ldr	r3, [pc, #80]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 80011a8:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	71bb      	strb	r3, [r7, #6]
        _msg.Mxe.Data[2] = ((TP_RX_MSG.tp_rx_msg.byte_count >> 8) & 0x00ff);
 80011b0:	4b11      	ldr	r3, [pc, #68]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 80011b2:	f8b3 30f4 	ldrh.w	r3, [r3, #244]	; 0xf4
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	71fb      	strb	r3, [r7, #7]
        _msg.Mxe.Data[3] = TP_RX_MSG.packets_total;
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 80011c0:	f893 30fc 	ldrb.w	r3, [r3, #252]	; 0xfc
 80011c4:	723b      	strb	r3, [r7, #8]
        _msg.Mxe.Data[4] = J1939_RESERVED_BYTE;
 80011c6:	23ff      	movs	r3, #255	; 0xff
 80011c8:	727b      	strb	r3, [r7, #9]
        _msg.Mxe.Data[7] = (j1939_uint8_t)((pgn_num >> 16) & 0xff);
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	0c1b      	lsrs	r3, r3, #16
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.Data[6] = (j1939_uint8_t)(pgn_num >> 8 & 0xff);
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	72fb      	strb	r3, [r7, #11]
        _msg.Mxe.Data[5] = (j1939_uint8_t)(pgn_num & 0xff);
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	72bb      	strb	r3, [r7, #10]
        /*Maybe the queue is full and cannot be sent out, but here you cannot rely on the return value to wait infinitely*/
        J1939_EnqueueMessage(&_msg);
 80011e0:	463b      	mov	r3, r7
 80011e2:	4618      	mov	r0, r3
 80011e4:	f7ff f9dc 	bl	80005a0 <J1939_EnqueueMessage>
        TP_RX_MSG.state = J1939_RX_DONE;
 80011e8:	4b03      	ldr	r3, [pc, #12]	; (80011f8 <J1939_read_DT_Packet+0x170>)
 80011ea:	2204      	movs	r2, #4
 80011ec:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
        return;
 80011f0:	bf00      	nop
    }
}
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000048 	.word	0x20000048

080011fc <J1939_TP_Poll>:
/**
* @note The heartbeat of the TP protocol, in order to meet the timing accuracy on the bus, poll once every 10ms J1939_TP_TX_RefreshCMTimer(10)\n
If you want a higher resolution, poll once every 1ms, but you need to change the following timing function J1939_TP_TX_RefreshCMTimer(1)
*/
void J1939_TP_Poll()
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
    if (J1939_TP_State_t == J1939_TP_NULL || J1939_TP_State_t == J1939_TP_OSBUSY)
 8001200:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <J1939_TP_Poll+0x144>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	f000 8099 	beq.w	800133c <J1939_TP_Poll+0x140>
 800120a:	4b4d      	ldr	r3, [pc, #308]	; (8001340 <J1939_TP_Poll+0x144>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2b03      	cmp	r3, #3
 8001210:	f000 8094 	beq.w	800133c <J1939_TP_Poll+0x140>
    {
        return;
    }
    if (J1939_TP_State_t == J1939_TP_RX)
 8001214:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <J1939_TP_Poll+0x144>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b01      	cmp	r3, #1
 800121a:	d13b      	bne.n	8001294 <J1939_TP_Poll+0x98>
    {

        switch (TP_RX_MSG.state)
 800121c:	4b49      	ldr	r3, [pc, #292]	; (8001344 <J1939_TP_Poll+0x148>)
 800121e:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
 8001222:	2b04      	cmp	r3, #4
 8001224:	d832      	bhi.n	800128c <J1939_TP_Poll+0x90>
 8001226:	a201      	add	r2, pc, #4	; (adr r2, 800122c <J1939_TP_Poll+0x30>)
 8001228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800122c:	0800128d 	.word	0x0800128d
 8001230:	08001241 	.word	0x08001241
 8001234:	08001247 	.word	0x08001247
 8001238:	0800125d 	.word	0x0800125d
 800123c:	08001263 	.word	0x08001263
        {
        case J1939_TP_RX_WAIT:;
            break;
        case J1939_TP_RX_READ_DATA:
            /*Send read data TP.CM_CTS and EndofMsgAck message*/
            J1939_read_DT_Packet();
 8001240:	f7ff ff22 	bl	8001088 <J1939_read_DT_Packet>
            break;
 8001244:	e025      	b.n	8001292 <J1939_TP_Poll+0x96>
        case J1939_TP_RX_DATA_WAIT:
            /*Waiting for the message transmitted by the TP.DT frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_RX_RefreshCMTimer(10))
 8001246:	200a      	movs	r0, #10
 8001248:	f7ff fef4 	bl	8001034 <J1939_TP_RX_RefreshCMTimer>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d11e      	bne.n	8001290 <J1939_TP_Poll+0x94>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_RX_MSG.state = J1939_TP_RX_ERROR;
 8001252:	4b3c      	ldr	r3, [pc, #240]	; (8001344 <J1939_TP_Poll+0x148>)
 8001254:	2203      	movs	r2, #3
 8001256:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            }
            break;
 800125a:	e019      	b.n	8001290 <J1939_TP_Poll+0x94>
        case J1939_TP_RX_ERROR:
            J1939_TP_RX_Abort();
 800125c:	f7ff fe7c 	bl	8000f58 <J1939_TP_RX_Abort>

            break;
 8001260:	e017      	b.n	8001292 <J1939_TP_Poll+0x96>
        case J1939_RX_DONE:
            TP_RX_MSG.packets_ok_num = 0;
 8001262:	4b38      	ldr	r3, [pc, #224]	; (8001344 <J1939_TP_Poll+0x148>)
 8001264:	2200      	movs	r2, #0
 8001266:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            TP_RX_MSG.packets_total = 0;
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <J1939_TP_Poll+0x148>)
 800126c:	2200      	movs	r2, #0
 800126e:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_RX_MSG.time = J1939_TP_T3;
 8001272:	4b34      	ldr	r3, [pc, #208]	; (8001344 <J1939_TP_Poll+0x148>)
 8001274:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001278:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
            TP_RX_MSG.state = J1939_TP_RX_WAIT;
 800127c:	4b31      	ldr	r3, [pc, #196]	; (8001344 <J1939_TP_Poll+0x148>)
 800127e:	2200      	movs	r2, #0
 8001280:	f883 20fe 	strb.w	r2, [r3, #254]	; 0xfe
            J1939_TP_State_t = J1939_TP_NULL;
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <J1939_TP_Poll+0x144>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
            break;
 800128a:	e002      	b.n	8001292 <J1939_TP_Poll+0x96>
        default:
            break;
 800128c:	bf00      	nop
 800128e:	e056      	b.n	800133e <J1939_TP_Poll+0x142>
            break;
 8001290:	bf00      	nop
        }
        return;
 8001292:	e054      	b.n	800133e <J1939_TP_Poll+0x142>
    }
    if (J1939_TP_State_t == J1939_TP_TX)
 8001294:	4b2a      	ldr	r3, [pc, #168]	; (8001340 <J1939_TP_Poll+0x144>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b02      	cmp	r3, #2
 800129a:	d150      	bne.n	800133e <J1939_TP_Poll+0x142>
    {

        switch (TP_TX_MSG.state)
 800129c:	4b2a      	ldr	r3, [pc, #168]	; (8001348 <J1939_TP_Poll+0x14c>)
 800129e:	f893 30fd 	ldrb.w	r3, [r3, #253]	; 0xfd
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d844      	bhi.n	8001330 <J1939_TP_Poll+0x134>
 80012a6:	a201      	add	r2, pc, #4	; (adr r2, 80012ac <J1939_TP_Poll+0xb0>)
 80012a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012ac:	08001331 	.word	0x08001331
 80012b0:	080012c9 	.word	0x080012c9
 80012b4:	080012cf 	.word	0x080012cf
 80012b8:	080012e5 	.word	0x080012e5
 80012bc:	080012eb 	.word	0x080012eb
 80012c0:	08001301 	.word	0x08001301
 80012c4:	08001307 	.word	0x08001307
        case J1939_TP_TX_WAIT:
            /*There is no data to send*/
            break;
        case J1939_TP_TX_CM_START:
            /*Send the message transmitted by the TP.CM_RTS frame (refer to j1939-21)*/
            J1939_CM_Start();
 80012c8:	f7ff fdbc 	bl	8000e44 <J1939_CM_Start>
            break;
 80012cc:	e035      	b.n	800133a <J1939_TP_Poll+0x13e>
        case J1939_TP_TX_CM_WAIT:
            /*Waiting for the message transmitted by the TP.CM_CTS frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_TX_RefreshCMTimer(10))
 80012ce:	200a      	movs	r0, #10
 80012d0:	f7ff fe80 	bl	8000fd4 <J1939_TP_TX_RefreshCMTimer>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d12c      	bne.n	8001334 <J1939_TP_Poll+0x138>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_TX_MSG.state = J1939_TP_TX_ERROR;
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <J1939_TP_Poll+0x14c>)
 80012dc:	2205      	movs	r2, #5
 80012de:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            }
            break;
 80012e2:	e027      	b.n	8001334 <J1939_TP_Poll+0x138>
        case J1939_TP_TX_DT:
            J1939_TP_DT_Packet_send();
 80012e4:	f7ff fd02 	bl	8000cec <J1939_TP_DT_Packet_send>
            break;
 80012e8:	e027      	b.n	800133a <J1939_TP_Poll+0x13e>
        case J1939_TP_WAIT_ACK:
            /*Waiting for the message transmitted by the TP.EndofMsgACK frame*/
            if (J1939_TP_TIMEOUT_ABNORMAL == J1939_TP_TX_RefreshCMTimer(10))
 80012ea:	200a      	movs	r0, #10
 80012ec:	f7ff fe72 	bl	8000fd4 <J1939_TP_TX_RefreshCMTimer>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d120      	bne.n	8001338 <J1939_TP_Poll+0x13c>
            {
                /* Waiting for timeout, a connection exception occurs, jump to the abnormal step */
                TP_TX_MSG.state = J1939_TP_TX_ERROR;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <J1939_TP_Poll+0x14c>)
 80012f8:	2205      	movs	r2, #5
 80012fa:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            }
            break;
 80012fe:	e01b      	b.n	8001338 <J1939_TP_Poll+0x13c>
        case J1939_TP_TX_ERROR:
            J1939_TP_TX_Abort();
 8001300:	f7ff fdec 	bl	8000edc <J1939_TP_TX_Abort>

            break;
 8001304:	e019      	b.n	800133a <J1939_TP_Poll+0x13e>
        case J1939_TX_DONE:
            TP_TX_MSG.packets_request_num = 0;
 8001306:	4b10      	ldr	r3, [pc, #64]	; (8001348 <J1939_TP_Poll+0x14c>)
 8001308:	2200      	movs	r2, #0
 800130a:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
            TP_TX_MSG.packet_offset_p = 0;
 800130e:	4b0e      	ldr	r3, [pc, #56]	; (8001348 <J1939_TP_Poll+0x14c>)
 8001310:	2200      	movs	r2, #0
 8001312:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
            TP_TX_MSG.time = J1939_TP_T3;
 8001316:	4b0c      	ldr	r3, [pc, #48]	; (8001348 <J1939_TP_Poll+0x14c>)
 8001318:	f240 42e2 	movw	r2, #1250	; 0x4e2
 800131c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            TP_TX_MSG.state = J1939_TP_TX_WAIT;
 8001320:	4b09      	ldr	r3, [pc, #36]	; (8001348 <J1939_TP_Poll+0x14c>)
 8001322:	2200      	movs	r2, #0
 8001324:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd
            J1939_TP_State_t = J1939_TP_NULL;
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <J1939_TP_Poll+0x144>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
            break;
 800132e:	e004      	b.n	800133a <J1939_TP_Poll+0x13e>
        default:
            //The program will not run here, you can add a debug output
            break;
 8001330:	bf00      	nop
 8001332:	e004      	b.n	800133e <J1939_TP_Poll+0x142>
            break;
 8001334:	bf00      	nop
 8001336:	e002      	b.n	800133e <J1939_TP_Poll+0x142>
            break;
 8001338:	bf00      	nop
        }
        return;
 800133a:	e000      	b.n	800133e <J1939_TP_Poll+0x142>
        return;
 800133c:	bf00      	nop
    }
}
 800133e:	bd80      	pop	{r7, pc}
 8001340:	20000041 	.word	0x20000041
 8001344:	20000048 	.word	0x20000048
 8001348:	20000240 	.word	0x20000240

0800134c <J1939_TP_TX_Message>:
* @return RC_SUCCESS successfully opened the TP link and started to enter the sending process
* @return RC_CANNOTTRANSMIT cannot be sent because the TP protocol has established a virtual link and has not been disconnected
* @note TP protocol sending function
*/
j1939_int8_t J1939_TP_TX_Message(j1939_uint32_t PGN, j1939_uint8_t DA, j1939_uint8_t *data, j1939_uint16_t data_num)
{
 800134c:	b480      	push	{r7}
 800134e:	b087      	sub	sp, #28
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	461a      	mov	r2, r3
 8001358:	460b      	mov	r3, r1
 800135a:	72fb      	strb	r3, [r7, #11]
 800135c:	4613      	mov	r3, r2
 800135e:	813b      	strh	r3, [r7, #8]
    j1939_uint16_t _byte_count = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	82fb      	strh	r3, [r7, #22]
    /*Get sending permission*/
    if (J1939_TP_State_t == J1939_TP_NULL)
 8001364:	4b31      	ldr	r3, [pc, #196]	; (800142c <J1939_TP_TX_Message+0xe0>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d110      	bne.n	800138e <J1939_TP_TX_Message+0x42>
    {
        J1939_TP_State_t = J1939_TP_TX;
 800136c:	4b2f      	ldr	r3, [pc, #188]	; (800142c <J1939_TP_TX_Message+0xe0>)
 800136e:	2202      	movs	r2, #2
 8001370:	701a      	strb	r2, [r3, #0]
    else
    {
        return RC_CANNOTTRANSMIT; //Cannot send, because the TP protocol has established a virtual link and has not been disconnected
    }

    TP_TX_MSG.tp_tx_msg.PGN = PGN;
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	6013      	str	r3, [r2, #0]
    TP_TX_MSG.tp_tx_msg.SA = DA;
 8001378:	4a2d      	ldr	r2, [pc, #180]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 800137a:	7afb      	ldrb	r3, [r7, #11]
 800137c:	f882 30f6 	strb.w	r3, [r2, #246]	; 0xf6
    TP_TX_MSG.tp_tx_msg.byte_count = data_num;
 8001380:	4a2b      	ldr	r2, [pc, #172]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 8001382:	893b      	ldrh	r3, [r7, #8]
 8001384:	f8a2 30f4 	strh.w	r3, [r2, #244]	; 0xf4
    for (_byte_count = 0; _byte_count < data_num; _byte_count++)
 8001388:	2300      	movs	r3, #0
 800138a:	82fb      	strh	r3, [r7, #22]
 800138c:	e00d      	b.n	80013aa <J1939_TP_TX_Message+0x5e>
        return RC_CANNOTTRANSMIT; //Cannot send, because the TP protocol has established a virtual link and has not been disconnected
 800138e:	2302      	movs	r3, #2
 8001390:	e045      	b.n	800141e <J1939_TP_TX_Message+0xd2>
    {
        TP_TX_MSG.tp_tx_msg.data[_byte_count] = data[_byte_count];
 8001392:	8afb      	ldrh	r3, [r7, #22]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	441a      	add	r2, r3
 8001398:	8afb      	ldrh	r3, [r7, #22]
 800139a:	7811      	ldrb	r1, [r2, #0]
 800139c:	4a24      	ldr	r2, [pc, #144]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	711a      	strb	r2, [r3, #4]
    for (_byte_count = 0; _byte_count < data_num; _byte_count++)
 80013a4:	8afb      	ldrh	r3, [r7, #22]
 80013a6:	3301      	adds	r3, #1
 80013a8:	82fb      	strh	r3, [r7, #22]
 80013aa:	8afa      	ldrh	r2, [r7, #22]
 80013ac:	893b      	ldrh	r3, [r7, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3ef      	bcc.n	8001392 <J1939_TP_TX_Message+0x46>
    }
    TP_TX_MSG.packet_offset_p = 0;
 80013b2:	4b1f      	ldr	r3, [pc, #124]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 20fa 	strb.w	r2, [r3, #250]	; 0xfa
    TP_TX_MSG.packets_request_num = 0;
 80013ba:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f883 20fc 	strb.w	r2, [r3, #252]	; 0xfc
    TP_TX_MSG.packets_total = data_num / 7;
 80013c2:	893a      	ldrh	r2, [r7, #8]
 80013c4:	4b1b      	ldr	r3, [pc, #108]	; (8001434 <J1939_TP_TX_Message+0xe8>)
 80013c6:	fba3 1302 	umull	r1, r3, r3, r2
 80013ca:	1ad2      	subs	r2, r2, r3
 80013cc:	0852      	lsrs	r2, r2, #1
 80013ce:	4413      	add	r3, r2
 80013d0:	089b      	lsrs	r3, r3, #2
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	b2da      	uxtb	r2, r3
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 80013d8:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    if ((data_num % 7) != 0)
 80013dc:	893a      	ldrh	r2, [r7, #8]
 80013de:	4b15      	ldr	r3, [pc, #84]	; (8001434 <J1939_TP_TX_Message+0xe8>)
 80013e0:	fba3 1302 	umull	r1, r3, r3, r2
 80013e4:	1ad1      	subs	r1, r2, r3
 80013e6:	0849      	lsrs	r1, r1, #1
 80013e8:	440b      	add	r3, r1
 80013ea:	0899      	lsrs	r1, r3, #2
 80013ec:	460b      	mov	r3, r1
 80013ee:	00db      	lsls	r3, r3, #3
 80013f0:	1a5b      	subs	r3, r3, r1
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d007      	beq.n	800140a <J1939_TP_TX_Message+0xbe>
    {
        TP_TX_MSG.packets_total++;
 80013fa:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 80013fc:	f893 30fb 	ldrb.w	r3, [r3, #251]	; 0xfb
 8001400:	3301      	adds	r3, #1
 8001402:	b2da      	uxtb	r2, r3
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 8001406:	f883 20fb 	strb.w	r2, [r3, #251]	; 0xfb
    }
    TP_TX_MSG.time = J1939_TP_T3;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 800140c:	f240 42e2 	movw	r2, #1250	; 0x4e2
 8001410:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
    //Trigger start CM_START
    TP_TX_MSG.state = J1939_TP_TX_CM_START;
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <J1939_TP_TX_Message+0xe4>)
 8001416:	2201      	movs	r2, #1
 8001418:	f883 20fd 	strb.w	r2, [r3, #253]	; 0xfd

    return RC_SUCCESS;
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	371c      	adds	r7, #28
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000041 	.word	0x20000041
 8001430:	20000240 	.word	0x20000240
 8001434:	24924925 	.word	0x24924925

08001438 <J1939_Response>:
/**
* @note When receiving a PGN request, if there is a corresponding PGN in REQUEST_LIST, the PGN in REQUEST_LIST will be sent automatically. \n
  If not, a NACK will be sent; the response logic of this function, refer to J1939-21 page 17 Table 4
*/
void J1939_Response(const j1939_uint32_t PGN)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
    J1939_MESSAGE _msg;

    /*Find available linked list items*/
    struct Request_List *_requestList = &REQUEST_LIST;
 8001440:	4bbd      	ldr	r3, [pc, #756]	; (8001738 <J1939_Response+0x300>)
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
    while ((PGN != _requestList->PGN) )
 8001444:	e043      	b.n	80014ce <J1939_Response+0x96>
    {
        if (_requestList->next == J1939_NULL)
 8001446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d13c      	bne.n	80014c8 <J1939_Response+0x90>
        {
            /*The original document stipulates that NACK cannot be responded to when the global request is not supported*/
            if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 800144e:	4bbb      	ldr	r3, [pc, #748]	; (800173c <J1939_Response+0x304>)
 8001450:	789b      	ldrb	r3, [r3, #2]
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	f000 8168 	beq.w	8001728 <J1939_Response+0x2f0>
            {
                return;
            }
            if ((PGN & 0xFF00) >= 0xF000)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800145e:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 8001462:	f080 8163 	bcs.w	800172c <J1939_Response+0x2f4>
            {
                return;
            }

            /*No corresponding PGN response is created, send a NACK to the bus*/
            _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 8001466:	7b3b      	ldrb	r3, [r7, #12]
 8001468:	2206      	movs	r2, #6
 800146a:	f362 0384 	bfi	r3, r2, #2, #3
 800146e:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.DataPage = 0;
 8001470:	7b3b      	ldrb	r3, [r7, #12]
 8001472:	f36f 0300 	bfc	r3, #0, #1
 8001476:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 8001478:	23e8      	movs	r3, #232	; 0xe8
 800147a:	737b      	strb	r3, [r7, #13]
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 800147c:	4baf      	ldr	r3, [pc, #700]	; (800173c <J1939_Response+0x304>)
 800147e:	78db      	ldrb	r3, [r3, #3]
 8001480:	73bb      	strb	r3, [r7, #14]
            _msg.Mxe.DataLength = 8;
 8001482:	7c3b      	ldrb	r3, [r7, #16]
 8001484:	2208      	movs	r2, #8
 8001486:	f362 0303 	bfi	r3, r2, #0, #4
 800148a:	743b      	strb	r3, [r7, #16]
            _msg.Mxe.SourceAddress = J1939_Address;
 800148c:	4bac      	ldr	r3, [pc, #688]	; (8001740 <J1939_Response+0x308>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	73fb      	strb	r3, [r7, #15]
            _msg.Mxe.Data[0] = J1939_NACK_CONTROL_BYTE;
 8001492:	2301      	movs	r3, #1
 8001494:	747b      	strb	r3, [r7, #17]
            _msg.Mxe.Data[1] = 0xFF;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	74bb      	strb	r3, [r7, #18]
            _msg.Mxe.Data[2] = 0xFF;
 800149a:	23ff      	movs	r3, #255	; 0xff
 800149c:	74fb      	strb	r3, [r7, #19]
            _msg.Mxe.Data[3] = 0xFF;
 800149e:	23ff      	movs	r3, #255	; 0xff
 80014a0:	753b      	strb	r3, [r7, #20]
            _msg.Mxe.Data[4] = 0xFF;
 80014a2:	23ff      	movs	r3, #255	; 0xff
 80014a4:	757b      	strb	r3, [r7, #21]
            _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	75bb      	strb	r3, [r7, #22]
            _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	0a1b      	lsrs	r3, r3, #8
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	75fb      	strb	r3, [r7, #23]
            _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	0c1b      	lsrs	r3, r3, #16
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	763b      	strb	r3, [r7, #24]

            SendOneMessage((J1939_MESSAGE *)&_msg);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff f803 	bl	80004cc <SendOneMessage>
            return;
 80014c6:	e134      	b.n	8001732 <J1939_Response+0x2fa>
        }
        else
        {
            _requestList = _requestList->next;
 80014c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	627b      	str	r3, [r7, #36]	; 0x24
    while ((PGN != _requestList->PGN) )
 80014ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d1b6      	bne.n	8001446 <J1939_Response+0xe>
        }
    }

    /*Call dataUPFun() function, mainly used for parameter group data update*/
    if (J1939_NULL != _requestList->update)
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <J1939_Response+0xae>
    {
        _requestList->update();
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	4798      	blx	r3
    }

    /*Respond to request*/
    if (_requestList->lenght > 8)
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e8:	889b      	ldrh	r3, [r3, #4]
 80014ea:	2b08      	cmp	r3, #8
 80014ec:	d97a      	bls.n	80015e4 <J1939_Response+0x1ac>
    {
        /*An acknowledgment response multi-frame (non-broadcast multi-frame)*/
        if (RC_SUCCESS != J1939_TP_TX_Message(_requestList->PGN, OneMessage.Mxe.SourceAddress, _requestList->data, _requestList->lenght))
 80014ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f0:	6898      	ldr	r0, [r3, #8]
 80014f2:	4b92      	ldr	r3, [pc, #584]	; (800173c <J1939_Response+0x304>)
 80014f4:	78d9      	ldrb	r1, [r3, #3]
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	889b      	ldrh	r3, [r3, #4]
 80014fe:	f7ff ff25 	bl	800134c <J1939_TP_TX_Message>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d035      	beq.n	8001574 <J1939_Response+0x13c>
        {
            /*The original document stipulates that NACK cannot be responded to when the global request is not supported*/
            if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 8001508:	4b8c      	ldr	r3, [pc, #560]	; (800173c <J1939_Response+0x304>)
 800150a:	789b      	ldrb	r3, [r3, #2]
 800150c:	2bff      	cmp	r3, #255	; 0xff
 800150e:	f000 810f 	beq.w	8001730 <J1939_Response+0x2f8>
            {
                return;
            }

            /*If the long frame is not sent successfully*/
            _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 8001512:	7b3b      	ldrb	r3, [r7, #12]
 8001514:	2206      	movs	r2, #6
 8001516:	f362 0384 	bfi	r3, r2, #2, #3
 800151a:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.DataPage = 0;
 800151c:	7b3b      	ldrb	r3, [r7, #12]
 800151e:	f36f 0300 	bfc	r3, #0, #1
 8001522:	733b      	strb	r3, [r7, #12]
            _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 8001524:	23e8      	movs	r3, #232	; 0xe8
 8001526:	737b      	strb	r3, [r7, #13]
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001528:	4b84      	ldr	r3, [pc, #528]	; (800173c <J1939_Response+0x304>)
 800152a:	78db      	ldrb	r3, [r3, #3]
 800152c:	73bb      	strb	r3, [r7, #14]
            _msg.Mxe.DataLength = 8;
 800152e:	7c3b      	ldrb	r3, [r7, #16]
 8001530:	2208      	movs	r2, #8
 8001532:	f362 0303 	bfi	r3, r2, #0, #4
 8001536:	743b      	strb	r3, [r7, #16]
            _msg.Mxe.SourceAddress = J1939_Address;
 8001538:	4b81      	ldr	r3, [pc, #516]	; (8001740 <J1939_Response+0x308>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	73fb      	strb	r3, [r7, #15]
            _msg.Mxe.Data[0] = J1939_ACCESS_DENIED_CONTROL_BYTE;
 800153e:	2302      	movs	r3, #2
 8001540:	747b      	strb	r3, [r7, #17]
            _msg.Mxe.Data[1] = 0xFF;
 8001542:	23ff      	movs	r3, #255	; 0xff
 8001544:	74bb      	strb	r3, [r7, #18]
            _msg.Mxe.Data[2] = 0xFF;
 8001546:	23ff      	movs	r3, #255	; 0xff
 8001548:	74fb      	strb	r3, [r7, #19]
            _msg.Mxe.Data[3] = 0xFF;
 800154a:	23ff      	movs	r3, #255	; 0xff
 800154c:	753b      	strb	r3, [r7, #20]
            _msg.Mxe.Data[4] = 0xFF;
 800154e:	23ff      	movs	r3, #255	; 0xff
 8001550:	757b      	strb	r3, [r7, #21]
            _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	b2db      	uxtb	r3, r3
 8001556:	75bb      	strb	r3, [r7, #22]
            _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	0a1b      	lsrs	r3, r3, #8
 800155c:	b2db      	uxtb	r3, r3
 800155e:	75fb      	strb	r3, [r7, #23]
            _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	0c1b      	lsrs	r3, r3, #16
 8001564:	b2db      	uxtb	r3, r3
 8001566:	763b      	strb	r3, [r7, #24]

            SendOneMessage((J1939_MESSAGE *)&_msg);
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	4618      	mov	r0, r3
 800156e:	f7fe ffad 	bl	80004cc <SendOneMessage>
            return;
 8001572:	e0de      	b.n	8001732 <J1939_Response+0x2fa>
        }

        /*An acknowledgment response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 8001574:	7b3b      	ldrb	r3, [r7, #12]
 8001576:	2206      	movs	r2, #6
 8001578:	f362 0384 	bfi	r3, r2, #2, #3
 800157c:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = 0;
 800157e:	7b3b      	ldrb	r3, [r7, #12]
 8001580:	f36f 0300 	bfc	r3, #0, #1
 8001584:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 8001586:	23e8      	movs	r3, #232	; 0xe8
 8001588:	737b      	strb	r3, [r7, #13]
        /*The original document stipulates that the global request responds to the global*/
        if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 800158a:	4b6c      	ldr	r3, [pc, #432]	; (800173c <J1939_Response+0x304>)
 800158c:	789b      	ldrb	r3, [r3, #2]
 800158e:	2bff      	cmp	r3, #255	; 0xff
 8001590:	d102      	bne.n	8001598 <J1939_Response+0x160>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 8001592:	23ff      	movs	r3, #255	; 0xff
 8001594:	73bb      	strb	r3, [r7, #14]
 8001596:	e002      	b.n	800159e <J1939_Response+0x166>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 8001598:	4b68      	ldr	r3, [pc, #416]	; (800173c <J1939_Response+0x304>)
 800159a:	78db      	ldrb	r3, [r3, #3]
 800159c:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = 8;
 800159e:	7c3b      	ldrb	r3, [r7, #16]
 80015a0:	2208      	movs	r2, #8
 80015a2:	f362 0303 	bfi	r3, r2, #0, #4
 80015a6:	743b      	strb	r3, [r7, #16]
        _msg.Mxe.SourceAddress = J1939_Address;
 80015a8:	4b65      	ldr	r3, [pc, #404]	; (8001740 <J1939_Response+0x308>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	73fb      	strb	r3, [r7, #15]
        _msg.Mxe.Data[0] = J1939_ACK_CONTROL_BYTE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	747b      	strb	r3, [r7, #17]
        _msg.Mxe.Data[1] = 0xFF;
 80015b2:	23ff      	movs	r3, #255	; 0xff
 80015b4:	74bb      	strb	r3, [r7, #18]
        _msg.Mxe.Data[2] = 0xFF;
 80015b6:	23ff      	movs	r3, #255	; 0xff
 80015b8:	74fb      	strb	r3, [r7, #19]
        _msg.Mxe.Data[3] = 0xFF;
 80015ba:	23ff      	movs	r3, #255	; 0xff
 80015bc:	753b      	strb	r3, [r7, #20]
        _msg.Mxe.Data[4] = 0xFF;
 80015be:	23ff      	movs	r3, #255	; 0xff
 80015c0:	757b      	strb	r3, [r7, #21]
        _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	75bb      	strb	r3, [r7, #22]
        _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	0a1b      	lsrs	r3, r3, #8
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	75fb      	strb	r3, [r7, #23]
        _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	0c1b      	lsrs	r3, r3, #16
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	763b      	strb	r3, [r7, #24]
        SendOneMessage((J1939_MESSAGE *)&_msg);
 80015d8:	f107 030c 	add.w	r3, r7, #12
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ff75 	bl	80004cc <SendOneMessage>
 80015e2:	e0a6      	b.n	8001732 <J1939_Response+0x2fa>
    }
    else
    {

        /*An acknowledgment response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 80015e4:	7b3b      	ldrb	r3, [r7, #12]
 80015e6:	2206      	movs	r2, #6
 80015e8:	f362 0384 	bfi	r3, r2, #2, #3
 80015ec:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = 0;
 80015ee:	7b3b      	ldrb	r3, [r7, #12]
 80015f0:	f36f 0300 	bfc	r3, #0, #1
 80015f4:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = J1939_PF_ACKNOWLEDGMENT;
 80015f6:	23e8      	movs	r3, #232	; 0xe8
 80015f8:	737b      	strb	r3, [r7, #13]
        _msg.Mxe.SourceAddress = J1939_Address;
 80015fa:	4b51      	ldr	r3, [pc, #324]	; (8001740 <J1939_Response+0x308>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	73fb      	strb	r3, [r7, #15]
        /*The original document stipulates that the global request responds to the global*/
        if ((OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS) || ((PGN & 0xFF00) >= 0xF000))
 8001600:	4b4e      	ldr	r3, [pc, #312]	; (800173c <J1939_Response+0x304>)
 8001602:	789b      	ldrb	r3, [r3, #2]
 8001604:	2bff      	cmp	r3, #255	; 0xff
 8001606:	d005      	beq.n	8001614 <J1939_Response+0x1dc>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800160e:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 8001612:	d302      	bcc.n	800161a <J1939_Response+0x1e2>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 8001614:	23ff      	movs	r3, #255	; 0xff
 8001616:	73bb      	strb	r3, [r7, #14]
 8001618:	e002      	b.n	8001620 <J1939_Response+0x1e8>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 800161a:	4b48      	ldr	r3, [pc, #288]	; (800173c <J1939_Response+0x304>)
 800161c:	78db      	ldrb	r3, [r3, #3]
 800161e:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = 8;
 8001620:	7c3b      	ldrb	r3, [r7, #16]
 8001622:	2208      	movs	r2, #8
 8001624:	f362 0303 	bfi	r3, r2, #0, #4
 8001628:	743b      	strb	r3, [r7, #16]
        _msg.Mxe.SourceAddress = J1939_Address;
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <J1939_Response+0x308>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	73fb      	strb	r3, [r7, #15]
        _msg.Mxe.Data[0] = J1939_ACK_CONTROL_BYTE;
 8001630:	2300      	movs	r3, #0
 8001632:	747b      	strb	r3, [r7, #17]
        _msg.Mxe.Data[1] = 0xFF;
 8001634:	23ff      	movs	r3, #255	; 0xff
 8001636:	74bb      	strb	r3, [r7, #18]
        _msg.Mxe.Data[2] = 0xFF;
 8001638:	23ff      	movs	r3, #255	; 0xff
 800163a:	74fb      	strb	r3, [r7, #19]
        _msg.Mxe.Data[3] = 0xFF;
 800163c:	23ff      	movs	r3, #255	; 0xff
 800163e:	753b      	strb	r3, [r7, #20]
        _msg.Mxe.Data[4] = 0xFF;
 8001640:	23ff      	movs	r3, #255	; 0xff
 8001642:	757b      	strb	r3, [r7, #21]
        _msg.Mxe.Data[5] = (PGN & 0x0000FF);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	75bb      	strb	r3, [r7, #22]
        _msg.Mxe.Data[6] = ((PGN >> 8) & 0x0000FF);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	0a1b      	lsrs	r3, r3, #8
 800164e:	b2db      	uxtb	r3, r3
 8001650:	75fb      	strb	r3, [r7, #23]
        _msg.Mxe.Data[7] = ((PGN >> 16) & 0x0000FF);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	0c1b      	lsrs	r3, r3, #16
 8001656:	b2db      	uxtb	r3, r3
 8001658:	763b      	strb	r3, [r7, #24]
        SendOneMessage((J1939_MESSAGE *)&_msg);
 800165a:	f107 030c 	add.w	r3, r7, #12
 800165e:	4618      	mov	r0, r3
 8001660:	f7fe ff34 	bl	80004cc <SendOneMessage>

        /*Return a single frame of confirmation response*/
        _msg.Mxe.Priority = J1939_ACK_PRIORITY;
 8001664:	7b3b      	ldrb	r3, [r7, #12]
 8001666:	2206      	movs	r2, #6
 8001668:	f362 0384 	bfi	r3, r2, #2, #3
 800166c:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.DataPage = (((_requestList->PGN) >> 16) & 0x1);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	0c1b      	lsrs	r3, r3, #16
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	7b3b      	ldrb	r3, [r7, #12]
 800167c:	f362 0300 	bfi	r3, r2, #0, #1
 8001680:	733b      	strb	r3, [r7, #12]
        _msg.Mxe.PDUFormat = ((_requestList->PGN) >> 8) & 0xFF;
 8001682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	0a1b      	lsrs	r3, r3, #8
 8001688:	b2db      	uxtb	r3, r3
 800168a:	737b      	strb	r3, [r7, #13]
        _msg.Mxe.SourceAddress = J1939_Address;
 800168c:	4b2c      	ldr	r3, [pc, #176]	; (8001740 <J1939_Response+0x308>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	73fb      	strb	r3, [r7, #15]
        /*The original document stipulates that the global request responds to the global*/
        if (OneMessage.Mxe.PDUSpecific == J1939_GLOBAL_ADDRESS)
 8001692:	4b2a      	ldr	r3, [pc, #168]	; (800173c <J1939_Response+0x304>)
 8001694:	789b      	ldrb	r3, [r3, #2]
 8001696:	2bff      	cmp	r3, #255	; 0xff
 8001698:	d102      	bne.n	80016a0 <J1939_Response+0x268>
        {
            _msg.Mxe.DestinationAddress = 0XFF;
 800169a:	23ff      	movs	r3, #255	; 0xff
 800169c:	73bb      	strb	r3, [r7, #14]
 800169e:	e002      	b.n	80016a6 <J1939_Response+0x26e>
        }
        else
        {
            _msg.Mxe.DestinationAddress = OneMessage.Mxe.SourceAddress;
 80016a0:	4b26      	ldr	r3, [pc, #152]	; (800173c <J1939_Response+0x304>)
 80016a2:	78db      	ldrb	r3, [r3, #3]
 80016a4:	73bb      	strb	r3, [r7, #14]
        }
        _msg.Mxe.DataLength = _requestList->lenght;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	889b      	ldrh	r3, [r3, #4]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	b2da      	uxtb	r2, r3
 80016b0:	7c3b      	ldrb	r3, [r7, #16]
 80016b2:	f362 0303 	bfi	r3, r2, #0, #4
 80016b6:	743b      	strb	r3, [r7, #16]
        {
            j1939_uint8_t _i = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            for (_i = 0; _i < (_requestList->lenght); _i++)
 80016be:	2300      	movs	r3, #0
 80016c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016c4:	e011      	b.n	80016ea <J1939_Response+0x2b2>
            {
                _msg.Mxe.Data[_i] = _requestList->data[_i];
 80016c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ce:	441a      	add	r2, r3
 80016d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016d4:	7812      	ldrb	r2, [r2, #0]
 80016d6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80016da:	440b      	add	r3, r1
 80016dc:	f803 2c17 	strb.w	r2, [r3, #-23]
            for (_i = 0; _i < (_requestList->lenght); _i++)
 80016e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016e4:	3301      	adds	r3, #1
 80016e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80016ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	889b      	ldrh	r3, [r3, #4]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d3e6      	bcc.n	80016c6 <J1939_Response+0x28e>
            }
            for (; _i < 8; _i++)
 80016f8:	e00c      	b.n	8001714 <J1939_Response+0x2dc>
            {
                _msg.Mxe.Data[_i] = 0xFF;
 80016fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80016fe:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001702:	4413      	add	r3, r2
 8001704:	22ff      	movs	r2, #255	; 0xff
 8001706:	f803 2c17 	strb.w	r2, [r3, #-23]
            for (; _i < 8; _i++)
 800170a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800170e:	3301      	adds	r3, #1
 8001710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001714:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001718:	2b07      	cmp	r3, #7
 800171a:	d9ee      	bls.n	80016fa <J1939_Response+0x2c2>
            }
        }
        SendOneMessage((J1939_MESSAGE *)&_msg);
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4618      	mov	r0, r3
 8001722:	f7fe fed3 	bl	80004cc <SendOneMessage>
 8001726:	e004      	b.n	8001732 <J1939_Response+0x2fa>
                return;
 8001728:	bf00      	nop
 800172a:	e002      	b.n	8001732 <J1939_Response+0x2fa>
                return;
 800172c:	bf00      	nop
 800172e:	e000      	b.n	8001732 <J1939_Response+0x2fa>
                return;
 8001730:	bf00      	nop
    }
}
 8001732:	3728      	adds	r7, #40	; 0x28
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200003b8 	.word	0x200003b8
 800173c:	20000150 	.word	0x20000150
 8001740:	2000014e 	.word	0x2000014e

08001744 <J1939_SetAddressFilter>:
//extern CAN_RxHeaderTypeDef txhead;

//extern CAN_NODE Can_Node;    // CAN hardware selection

void J1939_SetAddressFilter()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

	can_fil_config();
 8001748:	f000 f8e0 	bl	800190c <can_fil_config>

}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <J1939_CAN_Transmit>:
		First write the data in the MsgPtr passed into the function to the CAN structure, and then call the CAN driver's sending function
		By default, it supports the sending and receiving of 4 CAN hardware. If there are less than 4 channels, you only need to configure the corresponding Can_Node switch code area,
		Others (Select_CAN_NODE) ​​remain unchanged. Just return directly (break).
*/
void  J1939_CAN_Transmit(J1939_MESSAGE *MsgPtr)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	uint32_t mailbox;
			/* Load the 29-bit ID of the first CAN hardware */
								can_id.dummy=0;
 8001758:	4a25      	ldr	r2, [pc, #148]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 800175a:	78d3      	ldrb	r3, [r2, #3]
 800175c:	f36f 1347 	bfc	r3, #5, #3
 8001760:	70d3      	strb	r3, [r2, #3]
								can_id.Prior=(MsgPtr->Mxe).Priority;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800176a:	b2d9      	uxtb	r1, r3
 800176c:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 800176e:	78d3      	ldrb	r3, [r2, #3]
 8001770:	f361 0384 	bfi	r3, r1, #2, #3
 8001774:	70d3      	strb	r3, [r2, #3]
//								can_id.Reserved=(MsgPtr->Mxe).Reserve;
								can_id.Reserved=0;
 8001776:	4a1e      	ldr	r2, [pc, #120]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 8001778:	78d3      	ldrb	r3, [r2, #3]
 800177a:	f36f 0341 	bfc	r3, #1, #1
 800177e:	70d3      	strb	r3, [r2, #3]
								can_id.Data_Page=(MsgPtr->Mxe).DataPage;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001788:	b2d9      	uxtb	r1, r3
 800178a:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 800178c:	78d3      	ldrb	r3, [r2, #3]
 800178e:	f361 0300 	bfi	r3, r1, #0, #1
 8001792:	70d3      	strb	r3, [r2, #3]
								can_id.PDU_Format=(MsgPtr->Mxe).PDUFormat;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	785a      	ldrb	r2, [r3, #1]
 8001798:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 800179a:	709a      	strb	r2, [r3, #2]
								can_id.PDU_Specific=(MsgPtr->Mxe).PDUSpecific;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	789a      	ldrb	r2, [r3, #2]
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 80017a2:	705a      	strb	r2, [r3, #1]
								can_id.SA=(MsgPtr->Mxe).SourceAddress;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	78da      	ldrb	r2, [r3, #3]
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 80017aa:	701a      	strb	r2, [r3, #0]


								uint32_t *extid = (uint32_t*)(&can_id);
 80017ac:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <J1939_CAN_Transmit+0xa0>)
 80017ae:	617b      	str	r3, [r7, #20]
								uint32_t value = *extid;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	613b      	str	r3, [r7, #16]
								//can_tx(value);

//			txhead.ExtId=0x06;
								//txhead.StdId=0x05;

								txhead.ExtId=value;
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <J1939_CAN_Transmit+0xa4>)
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	6053      	str	r3, [r2, #4]
								txhead.IDE=CAN_ID_EXT;
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <J1939_CAN_Transmit+0xa4>)
 80017be:	2204      	movs	r2, #4
 80017c0:	609a      	str	r2, [r3, #8]

			/* CAN hardware load data length */
			txhead.DLC=(MsgPtr->Mxe).DataLength;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	791b      	ldrb	r3, [r3, #4]
 80017c6:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	461a      	mov	r2, r3
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <J1939_CAN_Transmit+0xa4>)
 80017d0:	611a      	str	r2, [r3, #16]
			/* CAN hardware load data */
			//*MsgPtr->Array=message;
			/* CAN hardware load RTR */
			txhead.RTR=CAN_RTR_DATA;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <J1939_CAN_Transmit+0xa4>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	60da      	str	r2, [r3, #12]
			// CAN hardware starts to send data

			HAL_CAN_AddTxMessage(&hcan1,&txhead,(MsgPtr->Mxe).Data, &mailbox);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	1d5a      	adds	r2, r3, #5
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	4904      	ldr	r1, [pc, #16]	; (80017f4 <J1939_CAN_Transmit+0xa4>)
 80017e2:	4805      	ldr	r0, [pc, #20]	; (80017f8 <J1939_CAN_Transmit+0xa8>)
 80017e4:	f001 f988 	bl	8002af8 <HAL_CAN_AddTxMessage>

}
 80017e8:	bf00      	nop
 80017ea:	3718      	adds	r7, #24
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000350 	.word	0x20000350
 80017f4:	200005a0 	.word	0x200005a0
 80017f8:	20000504 	.word	0x20000504

080017fc <J1939_CAN_Receive>:
		By default, it supports the sending and receiving of 4 CAN hardware. If there are less than 4 channels, you only need to configure the corresponding Can_Node switch code area,
		Others (Select_CAN_NODE) ​​remain unchanged. Just return directly (return 0)
*/

int J1939_CAN_Receive(J1939_MESSAGE *MsgPtr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) == HAL_OK) // Judge whether there is data coming in CAN hardware 1
 8001804:	4b3e      	ldr	r3, [pc, #248]	; (8001900 <J1939_CAN_Receive+0x104>)
 8001806:	4a3f      	ldr	r2, [pc, #252]	; (8001904 <J1939_CAN_Receive+0x108>)
 8001808:	2100      	movs	r1, #0
 800180a:	483f      	ldr	r0, [pc, #252]	; (8001908 <J1939_CAN_Receive+0x10c>)
 800180c:	f001 fa4f 	bl	8002cae <HAL_CAN_GetRxMessage>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d16e      	bne.n	80018f4 <J1939_CAN_Receive+0xf8>
							{
								//HAL_UART_Transmit(&huart3,"msg_from node_1 in reception\n\r", 30, 1000);
							    	//Error_Handler();
								// Your code, after reading the data from CAN hardware 1, store it in MsgPtr
								uint8_t cc;
								(MsgPtr->Mxe).DataPage=0;
 8001816:	687a      	ldr	r2, [r7, #4]
 8001818:	7813      	ldrb	r3, [r2, #0]
 800181a:	f36f 0300 	bfc	r3, #0, #1
 800181e:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).Res=0;
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	7813      	ldrb	r3, [r2, #0]
 8001824:	f36f 0341 	bfc	r3, #1, #1
 8001828:	7013      	strb	r3, [r2, #0]
								cc=(uint8_t)((rxhead.ExtId)>>24);
 800182a:	4b36      	ldr	r3, [pc, #216]	; (8001904 <J1939_CAN_Receive+0x108>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	0e1b      	lsrs	r3, r3, #24
 8001830:	73fb      	strb	r3, [r7, #15]
								(MsgPtr->Mxe).Priority=(uint8_t)((rxhead.ExtId)>>26);
 8001832:	4b34      	ldr	r3, [pc, #208]	; (8001904 <J1939_CAN_Receive+0x108>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	0e9b      	lsrs	r3, r3, #26
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	b2d9      	uxtb	r1, r3
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	7813      	ldrb	r3, [r2, #0]
 8001842:	f361 0384 	bfi	r3, r1, #2, #3
 8001846:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).Reserve=0;
 8001848:	687a      	ldr	r2, [r7, #4]
 800184a:	7813      	ldrb	r3, [r2, #0]
 800184c:	f36f 1347 	bfc	r3, #5, #3
 8001850:	7013      	strb	r3, [r2, #0]
								(MsgPtr->Mxe).PDUFormat=(uint8_t)((rxhead.ExtId)>>16);
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <J1939_CAN_Receive+0x108>)
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	0c1b      	lsrs	r3, r3, #16
 8001858:	b2da      	uxtb	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	705a      	strb	r2, [r3, #1]
								(MsgPtr->Mxe).PDUSpecific=(uint8_t)((rxhead.ExtId)>>8);
 800185e:	4b29      	ldr	r3, [pc, #164]	; (8001904 <J1939_CAN_Receive+0x108>)
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b2da      	uxtb	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	709a      	strb	r2, [r3, #2]
								if((MsgPtr->Mxe).PDUFormat<=239)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	785b      	ldrb	r3, [r3, #1]
 800186e:	2bef      	cmp	r3, #239	; 0xef
 8001870:	d805      	bhi.n	800187e <J1939_CAN_Receive+0x82>
								{
									if ((MsgPtr->Mxe).PDUSpecific!=J1939_STARTING_ADDRESS_1)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	789b      	ldrb	r3, [r3, #2]
 8001876:	2b33      	cmp	r3, #51	; 0x33
 8001878:	d001      	beq.n	800187e <J1939_CAN_Receive+0x82>
									{
										return 0;
 800187a:	2300      	movs	r3, #0
 800187c:	e03b      	b.n	80018f6 <J1939_CAN_Receive+0xfa>
									}
								}
								(MsgPtr->Mxe).SourceAddress=(uint8_t)(rxhead.ExtId);
 800187e:	4b21      	ldr	r3, [pc, #132]	; (8001904 <J1939_CAN_Receive+0x108>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	70da      	strb	r2, [r3, #3]
								(MsgPtr->Mxe).RTR=rxhead.RTR;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <J1939_CAN_Receive+0x108>)
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 030f 	and.w	r3, r3, #15
 8001890:	b2d9      	uxtb	r1, r3
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	7913      	ldrb	r3, [r2, #4]
 8001896:	f361 1307 	bfi	r3, r1, #4, #4
 800189a:	7113      	strb	r3, [r2, #4]
								(MsgPtr->Mxe).DataLength=rxhead.DLC;
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <J1939_CAN_Receive+0x108>)
 800189e:	691b      	ldr	r3, [r3, #16]
 80018a0:	f003 030f 	and.w	r3, r3, #15
 80018a4:	b2d9      	uxtb	r1, r3
 80018a6:	687a      	ldr	r2, [r7, #4]
 80018a8:	7913      	ldrb	r3, [r2, #4]
 80018aa:	f361 0303 	bfi	r3, r1, #0, #4
 80018ae:	7113      	strb	r3, [r2, #4]

								 (MsgPtr->Mxe).Data[0]=arr[0];
 80018b0:	4b13      	ldr	r3, [pc, #76]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018b2:	781a      	ldrb	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	715a      	strb	r2, [r3, #5]
								 (MsgPtr->Mxe).Data[1]=arr[1];
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018ba:	785a      	ldrb	r2, [r3, #1]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	719a      	strb	r2, [r3, #6]
								 (MsgPtr->Mxe).Data[2]=arr[2];
 80018c0:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018c2:	789a      	ldrb	r2, [r3, #2]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	71da      	strb	r2, [r3, #7]
								 (MsgPtr->Mxe).Data[3]=arr[3];
 80018c8:	4b0d      	ldr	r3, [pc, #52]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018ca:	78da      	ldrb	r2, [r3, #3]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	721a      	strb	r2, [r3, #8]
								 (MsgPtr->Mxe).Data[4]=arr[4];
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018d2:	791a      	ldrb	r2, [r3, #4]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	725a      	strb	r2, [r3, #9]
								 (MsgPtr->Mxe).Data[5]=arr[5];
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018da:	795a      	ldrb	r2, [r3, #5]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	729a      	strb	r2, [r3, #10]
								 (MsgPtr->Mxe).Data[6]=arr[6];
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018e2:	799a      	ldrb	r2, [r3, #6]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	72da      	strb	r2, [r3, #11]
								 (MsgPtr->Mxe).Data[7]=arr[7];
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <J1939_CAN_Receive+0x104>)
 80018ea:	79da      	ldrb	r2, [r3, #7]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	731a      	strb	r2, [r3, #12]

								return  1 ;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e000      	b.n	80018f6 <J1939_CAN_Receive+0xfa>
							}


	return  0 ; // No message
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3710      	adds	r7, #16
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200003d4 	.word	0x200003d4
 8001904:	20000484 	.word	0x20000484
 8001908:	20000504 	.word	0x20000504

0800190c <can_fil_config>:

#include "J1939_Config.H"


void can_fil_config()
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
		fil.FilterIdHigh=0x0000;
 8001910:	4b17      	ldr	r3, [pc, #92]	; (8001970 <can_fil_config+0x64>)
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
	  	fil.FilterIdLow=0x0000;
 8001916:	4b16      	ldr	r3, [pc, #88]	; (8001970 <can_fil_config+0x64>)
 8001918:	2200      	movs	r2, #0
 800191a:	605a      	str	r2, [r3, #4]
	  	fil.FilterMaskIdHigh=0x0000;
 800191c:	4b14      	ldr	r3, [pc, #80]	; (8001970 <can_fil_config+0x64>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
	  	fil.FilterMaskIdLow=0x0000;
 8001922:	4b13      	ldr	r3, [pc, #76]	; (8001970 <can_fil_config+0x64>)
 8001924:	2200      	movs	r2, #0
 8001926:	60da      	str	r2, [r3, #12]
	  	fil.FilterFIFOAssignment=0;
 8001928:	4b11      	ldr	r3, [pc, #68]	; (8001970 <can_fil_config+0x64>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
	  	fil.FilterBank=0;
 800192e:	4b10      	ldr	r3, [pc, #64]	; (8001970 <can_fil_config+0x64>)
 8001930:	2200      	movs	r2, #0
 8001932:	615a      	str	r2, [r3, #20]
	  	fil.FilterMode=CAN_FILTERMODE_IDMASK;
 8001934:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <can_fil_config+0x64>)
 8001936:	2200      	movs	r2, #0
 8001938:	619a      	str	r2, [r3, #24]
	  	fil.FilterScale=CAN_FILTERSCALE_32BIT;
 800193a:	4b0d      	ldr	r3, [pc, #52]	; (8001970 <can_fil_config+0x64>)
 800193c:	2201      	movs	r2, #1
 800193e:	61da      	str	r2, [r3, #28]
	  	fil.FilterActivation=CAN_FILTER_ENABLE;
 8001940:	4b0b      	ldr	r3, [pc, #44]	; (8001970 <can_fil_config+0x64>)
 8001942:	2201      	movs	r2, #1
 8001944:	621a      	str	r2, [r3, #32]
	  	fil.SlaveStartFilterBank=0;
 8001946:	4b0a      	ldr	r3, [pc, #40]	; (8001970 <can_fil_config+0x64>)
 8001948:	2200      	movs	r2, #0
 800194a:	625a      	str	r2, [r3, #36]	; 0x24

	  	if (HAL_CAN_ConfigFilter(&hcan1, &fil) != HAL_OK)
 800194c:	4908      	ldr	r1, [pc, #32]	; (8001970 <can_fil_config+0x64>)
 800194e:	4809      	ldr	r0, [pc, #36]	; (8001974 <can_fil_config+0x68>)
 8001950:	f000 ffc4 	bl	80028dc <HAL_CAN_ConfigFilter>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d008      	beq.n	800196c <can_fil_config+0x60>
	  		    {
	  		        /* Filter configuration Error */
	  		        HAL_UART_Transmit(&huart3,"error in configfil\n\r", 20, 1000);
 800195a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800195e:	2214      	movs	r2, #20
 8001960:	4905      	ldr	r1, [pc, #20]	; (8001978 <can_fil_config+0x6c>)
 8001962:	4806      	ldr	r0, [pc, #24]	; (800197c <can_fil_config+0x70>)
 8001964:	f003 fcd2 	bl	800530c <HAL_UART_Transmit>
	  		        Error_Handler();
 8001968:	f000 fbea 	bl	8002140 <Error_Handler>
	  		    }
}
 800196c:	bf00      	nop
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000574 	.word	0x20000574
 8001974:	20000504 	.word	0x20000504
 8001978:	08006140 	.word	0x08006140
 800197c:	200003fc 	.word	0x200003fc

08001980 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08a      	sub	sp, #40	; 0x28
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

	HAL_UART_Transmit(&huart3, "txcalbckM0\n\r", 25, 1000);
 8001988:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800198c:	2219      	movs	r2, #25
 800198e:	4907      	ldr	r1, [pc, #28]	; (80019ac <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8001990:	4807      	ldr	r0, [pc, #28]	; (80019b0 <HAL_CAN_TxMailbox0CompleteCallback+0x30>)
 8001992:	f003 fcbb 	bl	800530c <HAL_UART_Transmit>
	memset(mssg,0,25);
 8001996:	f107 030c 	add.w	r3, r7, #12
 800199a:	2219      	movs	r2, #25
 800199c:	2100      	movs	r1, #0
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fbba 	bl	8006118 <memset>


}
 80019a4:	bf00      	nop
 80019a6:	3728      	adds	r7, #40	; 0x28
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	08006158 	.word	0x08006158
 80019b0:	200003fc 	.word	0x200003fc

080019b4 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)

{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		HAL_UART_Transmit(&huart3, "txcalbckM1\n\r", 25, 1000);
 80019bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c0:	2219      	movs	r2, #25
 80019c2:	4907      	ldr	r1, [pc, #28]	; (80019e0 <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <HAL_CAN_TxMailbox1CompleteCallback+0x30>)
 80019c6:	f003 fca1 	bl	800530c <HAL_UART_Transmit>
		memset(mssg,0,25);
 80019ca:	f107 030c 	add.w	r3, r7, #12
 80019ce:	2219      	movs	r2, #25
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f004 fba0 	bl	8006118 <memset>

}
 80019d8:	bf00      	nop
 80019da:	3728      	adds	r7, #40	; 0x28
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	08006168 	.word	0x08006168
 80019e4:	200003fc 	.word	0x200003fc

080019e8 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		HAL_UART_Transmit(&huart3, "txcalbckM2\n\r", 25, 1000);
 80019f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019f4:	2219      	movs	r2, #25
 80019f6:	4907      	ldr	r1, [pc, #28]	; (8001a14 <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <HAL_CAN_TxMailbox2CompleteCallback+0x30>)
 80019fa:	f003 fc87 	bl	800530c <HAL_UART_Transmit>
		memset(mssg,0,25);
 80019fe:	f107 030c 	add.w	r3, r7, #12
 8001a02:	2219      	movs	r2, #25
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f004 fb86 	bl	8006118 <memset>

}
 8001a0c:	bf00      	nop
 8001a0e:	3728      	adds	r7, #40	; 0x28
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	08006178 	.word	0x08006178
 8001a18:	200003fc 	.word	0x200003fc

08001a1c <HAL_CAN_RxFifo0MsgPendingCallback>:
//  		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
//}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) != HAL_OK)
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001a26:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>)
 8001a28:	2100      	movs	r1, #0
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <HAL_CAN_RxFifo0MsgPendingCallback+0x44>)
 8001a2c:	f001 f93f 	bl	8002cae <HAL_CAN_GetRxMessage>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d008      	beq.n	8001a48 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>
    {

    	HAL_UART_Transmit(&huart3,"error in reception\n\r", 20, 1000);
 8001a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3a:	2214      	movs	r2, #20
 8001a3c:	4909      	ldr	r1, [pc, #36]	; (8001a64 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>)
 8001a3e:	480a      	ldr	r0, [pc, #40]	; (8001a68 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>)
 8001a40:	f003 fc64 	bl	800530c <HAL_UART_Transmit>
    	Error_Handler();
 8001a44:	f000 fb7c 	bl	8002140 <Error_Handler>
    }
	J1939_ReceiveMessages();
 8001a48:	f7fe fea0 	bl	800078c <J1939_ReceiveMessages>
	 readMsg();
 8001a4c:	f000 f8f2 	bl	8001c34 <readMsg>

}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200003d4 	.word	0x200003d4
 8001a5c:	20000484 	.word	0x20000484
 8001a60:	20000504 	.word	0x20000504
 8001a64:	08006188 	.word	0x08006188
 8001a68:	200003fc 	.word	0x200003fc

08001a6c <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b08a      	sub	sp, #40	; 0x28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

			HAL_UART_Transmit(&huart3, "callbck_error\n\r", 25, 1000);
 8001a74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a78:	2219      	movs	r2, #25
 8001a7a:	4907      	ldr	r1, [pc, #28]	; (8001a98 <HAL_CAN_ErrorCallback+0x2c>)
 8001a7c:	4807      	ldr	r0, [pc, #28]	; (8001a9c <HAL_CAN_ErrorCallback+0x30>)
 8001a7e:	f003 fc45 	bl	800530c <HAL_UART_Transmit>
			memset(mssg,0,25);
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2219      	movs	r2, #25
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f004 fb44 	bl	8006118 <memset>

}
 8001a90:	bf00      	nop
 8001a92:	3728      	adds	r7, #40	; 0x28
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	080061a0 	.word	0x080061a0
 8001a9c:	200003fc 	.word	0x200003fc

08001aa0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	db0c      	blt.n	8001acc <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	f003 021f 	and.w	r2, r3, #31
 8001ab8:	4907      	ldr	r1, [pc, #28]	; (8001ad8 <__NVIC_ClearPendingIRQ+0x38>)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	095b      	lsrs	r3, r3, #5
 8001ac0:	2001      	movs	r0, #1
 8001ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ac6:	3360      	adds	r3, #96	; 0x60
 8001ac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001acc:	bf00      	nop
 8001ace:	370c      	adds	r7, #12
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr
 8001ad8:	e000e100 	.word	0xe000e100

08001adc <sendMsg_KEYINFO>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#ifdef BCU
void sendMsg_KEYINFO()
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

	J1939_MESSAGE _msgKEYINFO;
	//_msgKEYINFO=*Msg;

	//uint8_t buf[]="2";
	_msgKEYINFO.Mxe.DataPage = 0;
 8001ae2:	793b      	ldrb	r3, [r7, #4]
 8001ae4:	f36f 0300 	bfc	r3, #0, #1
 8001ae8:	713b      	strb	r3, [r7, #4]
	_msgKEYINFO.Mxe.Priority = 0x01;
 8001aea:	793b      	ldrb	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f362 0384 	bfi	r3, r2, #2, #3
 8001af2:	713b      	strb	r3, [r7, #4]
	_msgKEYINFO.Mxe.DestinationAddress = 0x33;//changed from 33 to 31
 8001af4:	2333      	movs	r3, #51	; 0x33
 8001af6:	71bb      	strb	r3, [r7, #6]
	_msgKEYINFO.Mxe.DataLength = 8;
 8001af8:	7a3b      	ldrb	r3, [r7, #8]
 8001afa:	2208      	movs	r2, #8
 8001afc:	f362 0303 	bfi	r3, r2, #0, #4
 8001b00:	723b      	strb	r3, [r7, #8]
	_msgKEYINFO.Mxe.PDUFormat = 0xf1;
 8001b02:	23f1      	movs	r3, #241	; 0xf1
 8001b04:	717b      	strb	r3, [r7, #5]
	_msgKEYINFO.Mxe.SourceAddress = 0x33;
 8001b06:	2333      	movs	r3, #51	; 0x33
 8001b08:	71fb      	strb	r3, [r7, #7]

		_msgKEYINFO.Mxe.Data[0] = 0;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	727b      	strb	r3, [r7, #9]
		_msgKEYINFO.Mxe.Data[1] = 0;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	72bb      	strb	r3, [r7, #10]
		_msgKEYINFO.Mxe.Data[2] = 0;
 8001b12:	2300      	movs	r3, #0
 8001b14:	72fb      	strb	r3, [r7, #11]
		_msgKEYINFO.Mxe.Data[3] = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	733b      	strb	r3, [r7, #12]
		_msgKEYINFO.Mxe.Data[4] = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	737b      	strb	r3, [r7, #13]
		_msgKEYINFO.Mxe.Data[5] = 0;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73bb      	strb	r3, [r7, #14]
		_msgKEYINFO.Mxe.Data[6] = 0;
 8001b22:	2300      	movs	r3, #0
 8001b24:	73fb      	strb	r3, [r7, #15]
		_msgKEYINFO.Mxe.Data[7] = 'k';
 8001b26:	236b      	movs	r3, #107	; 0x6b
 8001b28:	743b      	strb	r3, [r7, #16]

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message(&_msgKEYINFO)!= RC_SUCCESS);
 8001b2a:	bf00      	nop
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fd7e 	bl	8000630 <J1939_Send_Message>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f8      	bne.n	8001b2c <sendMsg_KEYINFO+0x50>

}
 8001b3a:	bf00      	nop
 8001b3c:	bf00      	nop
 8001b3e:	3718      	adds	r7, #24
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <sendMsg_MOTORCONTROLLERCOMMANDS>:


void sendMsg_MOTORCONTROLLERCOMMANDS(J1939_MESSAGE *Msg)
{
 8001b44:	b5b0      	push	{r4, r5, r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
	J1939_MESSAGE _msgMOTORCONTROLLER_COMMANDS;
	_msgMOTORCONTROLLER_COMMANDS=*Msg;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f107 040c 	add.w	r4, r7, #12
 8001b52:	461d      	mov	r5, r3
 8001b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b58:	682b      	ldr	r3, [r5, #0]
 8001b5a:	6023      	str	r3, [r4, #0]


	//uint8_t buf[]="2";
	_msgMOTORCONTROLLER_COMMANDS.Mxe.DataPage = 0;
 8001b5c:	7b3b      	ldrb	r3, [r7, #12]
 8001b5e:	f36f 0300 	bfc	r3, #0, #1
 8001b62:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.Priority = 0x03;
 8001b64:	7b3b      	ldrb	r3, [r7, #12]
 8001b66:	2203      	movs	r2, #3
 8001b68:	f362 0384 	bfi	r3, r2, #2, #3
 8001b6c:	733b      	strb	r3, [r7, #12]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.DestinationAddress = 0x11;
 8001b6e:	2311      	movs	r3, #17
 8001b70:	73bb      	strb	r3, [r7, #14]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.DataLength = 8;
 8001b72:	7c3b      	ldrb	r3, [r7, #16]
 8001b74:	2208      	movs	r2, #8
 8001b76:	f362 0303 	bfi	r3, r2, #0, #4
 8001b7a:	743b      	strb	r3, [r7, #16]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.PDUFormat = 0x17;
 8001b7c:	2317      	movs	r3, #23
 8001b7e:	737b      	strb	r3, [r7, #13]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.SourceAddress = 0x33;
 8001b80:	2333      	movs	r3, #51	; 0x33
 8001b82:	73fb      	strb	r3, [r7, #15]
	_msgMOTORCONTROLLER_COMMANDS.Mxe.PGN=0x1700;
 8001b84:	2300      	movs	r3, #0
 8001b86:	767b      	strb	r3, [r7, #25]
 8001b88:	2300      	movs	r3, #0
 8001b8a:	f043 0317 	orr.w	r3, r3, #23
 8001b8e:	76bb      	strb	r3, [r7, #26]
 8001b90:	2300      	movs	r3, #0
 8001b92:	76fb      	strb	r3, [r7, #27]
	//	_msgMOTORCONTROLLER_COMMANDS.Mxe.Data[7] = '3';



	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgMOTORCONTROLLER_COMMANDS) != RC_SUCCESS);
 8001b94:	bf00      	nop
 8001b96:	f107 030c 	add.w	r3, r7, #12
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fd48 	bl	8000630 <J1939_Send_Message>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f7      	bne.n	8001b96 <sendMsg_MOTORCONTROLLERCOMMANDS+0x52>
	HAL_UART_Transmit(&huart3,"send msg from switchmotor\r\n", 30, 1000);
 8001ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001baa:	221e      	movs	r2, #30
 8001bac:	4903      	ldr	r1, [pc, #12]	; (8001bbc <sendMsg_MOTORCONTROLLERCOMMANDS+0x78>)
 8001bae:	4804      	ldr	r0, [pc, #16]	; (8001bc0 <sendMsg_MOTORCONTROLLERCOMMANDS+0x7c>)
 8001bb0:	f003 fbac 	bl	800530c <HAL_UART_Transmit>

}
 8001bb4:	bf00      	nop
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	080061b8 	.word	0x080061b8
 8001bc0:	200003fc 	.word	0x200003fc

08001bc4 <sendMsg_SWITCHINFO>:

void sendMsg_SWITCHINFO(J1939_MESSAGE *Msg)
{
 8001bc4:	b5b0      	push	{r4, r5, r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

	J1939_MESSAGE _msgSWITCHINFO;
	_msgSWITCHINFO=*Msg;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f107 040c 	add.w	r4, r7, #12
 8001bd2:	461d      	mov	r5, r3
 8001bd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bd8:	682b      	ldr	r3, [r5, #0]
 8001bda:	6023      	str	r3, [r4, #0]

	//uint8_t buf[]="2";
	_msgSWITCHINFO.Mxe.DataPage = 0;
 8001bdc:	7b3b      	ldrb	r3, [r7, #12]
 8001bde:	f36f 0300 	bfc	r3, #0, #1
 8001be2:	733b      	strb	r3, [r7, #12]
	_msgSWITCHINFO.Mxe.Priority = 0x03;
 8001be4:	7b3b      	ldrb	r3, [r7, #12]
 8001be6:	2203      	movs	r2, #3
 8001be8:	f362 0384 	bfi	r3, r2, #2, #3
 8001bec:	733b      	strb	r3, [r7, #12]
	_msgSWITCHINFO.Mxe.DestinationAddress = 0x22;
 8001bee:	2322      	movs	r3, #34	; 0x22
 8001bf0:	73bb      	strb	r3, [r7, #14]
	_msgSWITCHINFO.Mxe.DataLength = 8;
 8001bf2:	7c3b      	ldrb	r3, [r7, #16]
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	f362 0303 	bfi	r3, r2, #0, #4
 8001bfa:	743b      	strb	r3, [r7, #16]
	_msgSWITCHINFO.Mxe.PDUFormat = 0x15;
 8001bfc:	2315      	movs	r3, #21
 8001bfe:	737b      	strb	r3, [r7, #13]
	_msgSWITCHINFO.Mxe.SourceAddress = 0x33;
 8001c00:	2333      	movs	r3, #51	; 0x33
 8001c02:	73fb      	strb	r3, [r7, #15]
	//	_msgSWITCHINFO.Mxe.Data[5] = 0;
	//	_msgSWITCHINFO.Mxe.Data[6] = 0;
	//	_msgSWITCHINFO.Mxe.Data[7] = 's';

	//J1939_TP_TX_Message(0xf133, 0xff, buf,1);
	while (J1939_Send_Message( &_msgSWITCHINFO) != RC_SUCCESS);
 8001c04:	bf00      	nop
 8001c06:	f107 030c 	add.w	r3, r7, #12
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fd10 	bl	8000630 <J1939_Send_Message>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1f7      	bne.n	8001c06 <sendMsg_SWITCHINFO+0x42>
	HAL_UART_Transmit(&huart3,"send msg from switchinfo\r\n", 30, 1000);
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	221e      	movs	r2, #30
 8001c1c:	4903      	ldr	r1, [pc, #12]	; (8001c2c <sendMsg_SWITCHINFO+0x68>)
 8001c1e:	4804      	ldr	r0, [pc, #16]	; (8001c30 <sendMsg_SWITCHINFO+0x6c>)
 8001c20:	f003 fb74 	bl	800530c <HAL_UART_Transmit>

}
 8001c24:	bf00      	nop
 8001c26:	3720      	adds	r7, #32
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8001c2c:	080061d4 	.word	0x080061d4
 8001c30:	200003fc 	.word	0x200003fc

08001c34 <readMsg>:

void readMsg( )
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
	//		    {
	//
	//		    	   s++;
	//		    }

	if(J1939_Read_Message(&_msg) == RC_SUCCESS)
 8001c3a:	463b      	mov	r3, r7
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7fe fca3 	bl	8000588 <J1939_Read_Message>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d11e      	bne.n	8001c86 <readMsg+0x52>
	{
		//BMS STATUS
		if(_msg.Mxe.PGN == 0xF422)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001c4e:	f24f 4222 	movw	r2, #62498	; 0xf422
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d103      	bne.n	8001c5e <readMsg+0x2a>
		{
			uint8_t a;
			a++;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	75fb      	strb	r3, [r7, #23]
		}
		else
			;
	}

}
 8001c5c:	e013      	b.n	8001c86 <readMsg+0x52>
		else if(_msg.Mxe.PGN == 0xF233)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001c64:	f24f 2233 	movw	r2, #62003	; 0xf233
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d103      	bne.n	8001c74 <readMsg+0x40>
			flag1=0;
 8001c6c:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <readMsg+0x5c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
}
 8001c72:	e008      	b.n	8001c86 <readMsg+0x52>
		else if(_msg.Mxe.PGN == 0X100)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8001c7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c7e:	d102      	bne.n	8001c86 <readMsg+0x52>
			flag2=0;
 8001c80:	4b04      	ldr	r3, [pc, #16]	; (8001c94 <readMsg+0x60>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
}
 8001c86:	bf00      	nop
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000000 	.word	0x20000000
 8001c94:	20000001 	.word	0x20000001

08001c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9c:	f000 fc3f 	bl	800251e <HAL_Init>

#endif
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001ca0:	f000 f848 	bl	8001d34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca4:	f000 f976 	bl	8001f94 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001ca8:	f000 f8b0 	bl	8001e0c <MX_CAN1_Init>
  MX_TIM6_Init();
 8001cac:	f000 f8e4 	bl	8001e78 <MX_TIM6_Init>
  MX_USART3_UART_Init();
 8001cb0:	f000 f940 	bl	8001f34 <MX_USART3_UART_Init>
  MX_TIM16_Init();
 8001cb4:	f000 f918 	bl	8001ee8 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001cbe:	4817      	ldr	r0, [pc, #92]	; (8001d1c <main+0x84>)
 8001cc0:	f001 fe26 	bl	8003910 <HAL_GPIO_WritePin>
	// HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_ERROR);
	J1939_SetAddressFilter();
 8001cc4:	f7ff fd3e 	bl	8001744 <J1939_SetAddressFilter>
	if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8001cc8:	4815      	ldr	r0, [pc, #84]	; (8001d20 <main+0x88>)
 8001cca:	f000 fed1 	bl	8002a70 <HAL_CAN_Start>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d008      	beq.n	8001ce6 <main+0x4e>
	{
		HAL_UART_Transmit(&huart3,"error in can_start\n\r", 20, 1000);
 8001cd4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cd8:	2214      	movs	r2, #20
 8001cda:	4912      	ldr	r1, [pc, #72]	; (8001d24 <main+0x8c>)
 8001cdc:	4812      	ldr	r0, [pc, #72]	; (8001d28 <main+0x90>)
 8001cde:	f003 fb15 	bl	800530c <HAL_UART_Transmit>
		Error_Handler();
 8001ce2:	f000 fa2d 	bl	8002140 <Error_Handler>


	}
	J1939_Initialization();
 8001ce6:	f7fe fcaf 	bl	8000648 <J1939_Initialization>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
#ifdef BCU
	Key_Infovar.Key_In=1;
 8001cea:	4a10      	ldr	r2, [pc, #64]	; (8001d2c <main+0x94>)
 8001cec:	7813      	ldrb	r3, [r2, #0]
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	7013      	strb	r3, [r2, #0]
	Key_Infovar.Key_Off=0;
 8001cf4:	4a0d      	ldr	r2, [pc, #52]	; (8001d2c <main+0x94>)
 8001cf6:	7813      	ldrb	r3, [r2, #0]
 8001cf8:	f36f 0341 	bfc	r3, #1, #1
 8001cfc:	7013      	strb	r3, [r2, #0]
	Microcontroller_Statusvar.motorcontroller_state=0;
 8001cfe:	4a0c      	ldr	r2, [pc, #48]	; (8001d30 <main+0x98>)
 8001d00:	7893      	ldrb	r3, [r2, #2]
 8001d02:	f36f 0300 	bfc	r3, #0, #1
 8001d06:	7093      	strb	r3, [r2, #2]
//			//	  //J1939_Poll( );
//			//	  cnt1++;
//			//	  }
//			//  HAL_TIM_Base_Start_IT(&htim6);
//			//
		sendMsg_KEYINFO();
 8001d08:	f7ff fee8 	bl	8001adc <sendMsg_KEYINFO>
			readMsg();
 8001d0c:	f7ff ff92 	bl	8001c34 <readMsg>
			HAL_Delay(15);
 8001d10:	200f      	movs	r0, #15
 8001d12:	f000 fc79 	bl	8002608 <HAL_Delay>
			J1939_Poll( );
 8001d16:	f7fe fd05 	bl	8000724 <J1939_Poll>
		sendMsg_KEYINFO();
 8001d1a:	e7f5      	b.n	8001d08 <main+0x70>
 8001d1c:	48000400 	.word	0x48000400
 8001d20:	20000504 	.word	0x20000504
 8001d24:	080061f0 	.word	0x080061f0
 8001d28:	200003fc 	.word	0x200003fc
 8001d2c:	20000030 	.word	0x20000030
 8001d30:	20000348 	.word	0x20000348

08001d34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b0b0      	sub	sp, #192	; 0xc0
 8001d38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d3a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d3e:	2244      	movs	r2, #68	; 0x44
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f004 f9e8 	bl	8006118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	601a      	str	r2, [r3, #0]
 8001d50:	605a      	str	r2, [r3, #4]
 8001d52:	609a      	str	r2, [r3, #8]
 8001d54:	60da      	str	r2, [r3, #12]
 8001d56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d58:	463b      	mov	r3, r7
 8001d5a:	2268      	movs	r2, #104	; 0x68
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f004 f9da 	bl	8006118 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d64:	2301      	movs	r3, #1
 8001d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d68:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d70:	2302      	movs	r3, #2
 8001d72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d76:	2303      	movs	r3, #3
 8001d78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 8001d82:	2314      	movs	r3, #20
 8001d84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001d88:	2307      	movs	r3, #7
 8001d8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001d8e:	2302      	movs	r3, #2
 8001d90:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001d94:	2302      	movs	r3, #2
 8001d96:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d9a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f001 fe4a 	bl	8003a38 <HAL_RCC_OscConfig>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001daa:	f000 f9c9 	bl	8002140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dae:	230f      	movs	r3, #15
 8001db0:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001db2:	2303      	movs	r3, #3
 8001db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001db6:	2300      	movs	r3, #0
 8001db8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dc2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001dc6:	2104      	movs	r1, #4
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f002 fa55 	bl	8004278 <HAL_RCC_ClockConfig>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001dd4:	f000 f9b4 	bl	8002140 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001dd8:	2304      	movs	r3, #4
 8001dda:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001de0:	463b      	mov	r3, r7
 8001de2:	4618      	mov	r0, r3
 8001de4:	f002 fc4e 	bl	8004684 <HAL_RCCEx_PeriphCLKConfig>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001dee:	f000 f9a7 	bl	8002140 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001df2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001df6:	f001 fdc9 	bl	800398c <HAL_PWREx_ControlVoltageScaling>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001e00:	f000 f99e 	bl	8002140 <Error_Handler>
  }
}
 8001e04:	bf00      	nop
 8001e06:	37c0      	adds	r7, #192	; 0xc0
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e12:	4a18      	ldr	r2, [pc, #96]	; (8001e74 <MX_CAN1_Init+0x68>)
 8001e14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8001e16:	4b16      	ldr	r3, [pc, #88]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e18:	2210      	movs	r2, #16
 8001e1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001e1c:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001e22:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e2a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8001e2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001e30:	4b0f      	ldr	r3, [pc, #60]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001e36:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001e44:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001e4a:	4b09      	ldr	r3, [pc, #36]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001e56:	4b06      	ldr	r3, [pc, #24]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001e5c:	4804      	ldr	r0, [pc, #16]	; (8001e70 <MX_CAN1_Init+0x64>)
 8001e5e:	f000 fbf7 	bl	8002650 <HAL_CAN_Init>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001e68:	f000 f96a 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000504 	.word	0x20000504
 8001e74:	40006400 	.word	0x40006400

08001e78 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <MX_TIM6_Init+0x68>)
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <MX_TIM6_Init+0x6c>)
 8001e8c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000-1;
 8001e8e:	4b14      	ldr	r3, [pc, #80]	; (8001ee0 <MX_TIM6_Init+0x68>)
 8001e90:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001e94:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e96:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <MX_TIM6_Init+0x68>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1000-1;
 8001e9c:	4b10      	ldr	r3, [pc, #64]	; (8001ee0 <MX_TIM6_Init+0x68>)
 8001e9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ea2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea4:	4b0e      	ldr	r3, [pc, #56]	; (8001ee0 <MX_TIM6_Init+0x68>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001eaa:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <MX_TIM6_Init+0x68>)
 8001eac:	f002 ff48 	bl	8004d40 <HAL_TIM_Base_Init>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001eb6:	f000 f943 	bl	8002140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	4806      	ldr	r0, [pc, #24]	; (8001ee0 <MX_TIM6_Init+0x68>)
 8001ec8:	f003 f946 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8001ed2:	f000 f935 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ed6:	bf00      	nop
 8001ed8:	3710      	adds	r7, #16
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	20000618 	.word	0x20000618
 8001ee4:	40001000 	.word	0x40001000

08001ee8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001eec:	4b0f      	ldr	r3, [pc, #60]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001eee:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <MX_TIM16_Init+0x48>)
 8001ef0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 12-1 ;
 8001ef2:	4b0e      	ldr	r3, [pc, #56]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001ef4:	220b      	movs	r2, #11
 8001ef6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001efe:	4b0b      	ldr	r3, [pc, #44]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f04:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f06:	4b09      	ldr	r3, [pc, #36]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001f0c:	4b07      	ldr	r3, [pc, #28]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f12:	4b06      	ldr	r3, [pc, #24]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f18:	4804      	ldr	r0, [pc, #16]	; (8001f2c <MX_TIM16_Init+0x44>)
 8001f1a:	f002 ff11 	bl	8004d40 <HAL_TIM_Base_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001f24:	f000 f90c 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f28:	bf00      	nop
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000668 	.word	0x20000668
 8001f30:	40014400 	.word	0x40014400

08001f34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f3a:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <MX_USART3_UART_Init+0x5c>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_USART3_UART_Init+0x58>)
 8001f78:	f003 f97a 	bl	8005270 <HAL_UART_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001f82:	f000 f8dd 	bl	8002140 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	200003fc 	.word	0x200003fc
 8001f90:	40004800 	.word	0x40004800

08001f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b08a      	sub	sp, #40	; 0x28
 8001f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9a:	f107 0314 	add.w	r3, r7, #20
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	605a      	str	r2, [r3, #4]
 8001fa4:	609a      	str	r2, [r3, #8]
 8001fa6:	60da      	str	r2, [r3, #12]
 8001fa8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001faa:	4b2f      	ldr	r3, [pc, #188]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fae:	4a2e      	ldr	r2, [pc, #184]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fb6:	4b2c      	ldr	r3, [pc, #176]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fbe:	613b      	str	r3, [r7, #16]
 8001fc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fc2:	4b29      	ldr	r3, [pc, #164]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc6:	4a28      	ldr	r2, [pc, #160]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fc8:	f043 0301 	orr.w	r3, r3, #1
 8001fcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fce:	4b26      	ldr	r3, [pc, #152]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd2:	f003 0301 	and.w	r3, r3, #1
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fda:	4b23      	ldr	r3, [pc, #140]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fde:	4a22      	ldr	r2, [pc, #136]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fe6:	4b20      	ldr	r3, [pc, #128]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	4b1d      	ldr	r3, [pc, #116]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff6:	4a1c      	ldr	r2, [pc, #112]	; (8002068 <MX_GPIO_Init+0xd4>)
 8001ff8:	f043 0302 	orr.w	r3, r3, #2
 8001ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <MX_GPIO_Init+0xd4>)
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	f003 0302 	and.w	r3, r3, #2
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|GPIO_PIN_14, GPIO_PIN_RESET);
 800200a:	2200      	movs	r2, #0
 800200c:	f244 0106 	movw	r1, #16390	; 0x4006
 8002010:	4816      	ldr	r0, [pc, #88]	; (800206c <MX_GPIO_Init+0xd8>)
 8002012:	f001 fc7d 	bl	8003910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002016:	2302      	movs	r3, #2
 8002018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <MX_GPIO_Init+0xdc>)
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800202c:	f001 faf6 	bl	800361c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin PB14 */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|GPIO_PIN_14;
 8002030:	f244 0306 	movw	r3, #16390	; 0x4006
 8002034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002036:	2301      	movs	r3, #1
 8002038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002042:	f107 0314 	add.w	r3, r7, #20
 8002046:	4619      	mov	r1, r3
 8002048:	4808      	ldr	r0, [pc, #32]	; (800206c <MX_GPIO_Init+0xd8>)
 800204a:	f001 fae7 	bl	800361c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	2007      	movs	r0, #7
 8002054:	f001 fa2d 	bl	80034b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8002058:	2007      	movs	r0, #7
 800205a:	f001 fa46 	bl	80034ea <HAL_NVIC_EnableIRQ>

}
 800205e:	bf00      	nop
 8002060:	3728      	adds	r7, #40	; 0x28
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	48000400 	.word	0x48000400
 8002070:	10110000 	.word	0x10110000

08002074 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
#ifdef BCU
	sendMsg_SWITCHINFO(&Message);
 800207c:	480a      	ldr	r0, [pc, #40]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800207e:	f7ff fda1 	bl	8001bc4 <sendMsg_SWITCHINFO>
	//	memset();
	//	if(cnt1>0)
	//	{
	//	cnt1--;
	//	}
	if(cnt1<=2)
 8002082:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002084:	781b      	ldrb	r3, [r3, #0]
 8002086:	2b02      	cmp	r3, #2
 8002088:	d802      	bhi.n	8002090 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		sendMsg_MOTORCONTROLLERCOMMANDS(&Message);
 800208a:	4807      	ldr	r0, [pc, #28]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800208c:	f7ff fd5a 	bl	8001b44 <sendMsg_MOTORCONTROLLERCOMMANDS>
		//J1939_Poll( );
		//cnt1++;
	}
	cnt1++;
 8002090:	4b06      	ldr	r3, [pc, #24]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	3301      	adds	r3, #1
 8002096:	b2da      	uxtb	r2, r3
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <HAL_TIM_PeriodElapsedCallback+0x38>)
 800209a:	701a      	strb	r2, [r3, #0]
	J1939_Poll( );
 800209c:	f7fe fb42 	bl	8000724 <J1939_Poll>
#endif


}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200005fc 	.word	0x200005fc
 80020ac:	2000002c 	.word	0x2000002c

080020b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	4603      	mov	r3, r0
 80020b8:	80fb      	strh	r3, [r7, #6]
	count++;//odd num on even off the key
 80020ba:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	3301      	adds	r3, #1
 80020c0:	b2da      	uxtb	r2, r3
 80020c2:	4b1c      	ldr	r3, [pc, #112]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 80020c4:	701a      	strb	r2, [r3, #0]
	if(count%2==1)
 80020c6:	4b1b      	ldr	r3, [pc, #108]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d010      	beq.n	80020f6 <HAL_GPIO_EXTI_Callback+0x46>
	{
		Key_Infovar.Key_Off=0;
 80020d4:	4a18      	ldr	r2, [pc, #96]	; (8002138 <HAL_GPIO_EXTI_Callback+0x88>)
 80020d6:	7813      	ldrb	r3, [r2, #0]
 80020d8:	f36f 0341 	bfc	r3, #1, #1
 80020dc:	7013      	strb	r3, [r2, #0]
		Key_Infovar.Key_In=1;
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <HAL_GPIO_EXTI_Callback+0x88>)
 80020e0:	7813      	ldrb	r3, [r2, #0]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	7013      	strb	r3, [r2, #0]
		Message.Mxe.Data[0]=0x02;
 80020e8:	4b14      	ldr	r3, [pc, #80]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 80020ea:	2202      	movs	r2, #2
 80020ec:	715a      	strb	r2, [r3, #5]
		sendMsg_KEYINFO(&Message);
 80020ee:	4813      	ldr	r0, [pc, #76]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 80020f0:	f7ff fcf4 	bl	8001adc <sendMsg_KEYINFO>
 80020f4:	e00f      	b.n	8002116 <HAL_GPIO_EXTI_Callback+0x66>

	}
	else
	{
		//send message to all units
		Key_Infovar.Key_Off=1;
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_GPIO_EXTI_Callback+0x88>)
 80020f8:	7813      	ldrb	r3, [r2, #0]
 80020fa:	f043 0302 	orr.w	r3, r3, #2
 80020fe:	7013      	strb	r3, [r2, #0]
		Key_Infovar.Key_In=0;
 8002100:	4a0d      	ldr	r2, [pc, #52]	; (8002138 <HAL_GPIO_EXTI_Callback+0x88>)
 8002102:	7813      	ldrb	r3, [r2, #0]
 8002104:	f36f 0300 	bfc	r3, #0, #1
 8002108:	7013      	strb	r3, [r2, #0]
		Message.Mxe.Data[0]=0x01;
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 800210c:	2201      	movs	r2, #1
 800210e:	715a      	strb	r2, [r3, #5]
		sendMsg_KEYINFO(&Message);
 8002110:	480a      	ldr	r0, [pc, #40]	; (800213c <HAL_GPIO_EXTI_Callback+0x8c>)
 8002112:	f7ff fce3 	bl	8001adc <sendMsg_KEYINFO>
	}
	if(count>=254)
 8002116:	4b07      	ldr	r3, [pc, #28]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2bfd      	cmp	r3, #253	; 0xfd
 800211c:	d902      	bls.n	8002124 <HAL_GPIO_EXTI_Callback+0x74>
		count=0;
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <HAL_GPIO_EXTI_Callback+0x84>)
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]

	__NVIC_ClearPendingIRQ(EXTI1_IRQn);// key bouncing will not happen with this line
 8002124:	2007      	movs	r0, #7
 8002126:	f7ff fcbb 	bl	8001aa0 <__NVIC_ClearPendingIRQ>



}
 800212a:	bf00      	nop
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	2000002d 	.word	0x2000002d
 8002138:	20000030 	.word	0x20000030
 800213c:	200005fc 	.word	0x200005fc

08002140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002144:	b672      	cpsid	i
}
 8002146:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002148:	e7fe      	b.n	8002148 <Error_Handler+0x8>
	...

0800214c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	4b0f      	ldr	r3, [pc, #60]	; (8002190 <HAL_MspInit+0x44>)
 8002154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002156:	4a0e      	ldr	r2, [pc, #56]	; (8002190 <HAL_MspInit+0x44>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6613      	str	r3, [r2, #96]	; 0x60
 800215e:	4b0c      	ldr	r3, [pc, #48]	; (8002190 <HAL_MspInit+0x44>)
 8002160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	4b09      	ldr	r3, [pc, #36]	; (8002190 <HAL_MspInit+0x44>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	4a08      	ldr	r2, [pc, #32]	; (8002190 <HAL_MspInit+0x44>)
 8002170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002174:	6593      	str	r3, [r2, #88]	; 0x58
 8002176:	4b06      	ldr	r3, [pc, #24]	; (8002190 <HAL_MspInit+0x44>)
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800217e:	603b      	str	r3, [r7, #0]
 8002180:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002182:	bf00      	nop
 8002184:	370c      	adds	r7, #12
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000

08002194 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	; 0x28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 0314 	add.w	r3, r7, #20
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_CAN_MspInit+0xbc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d148      	bne.n	8002248 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80021b6:	4b27      	ldr	r3, [pc, #156]	; (8002254 <HAL_CAN_MspInit+0xc0>)
 80021b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ba:	4a26      	ldr	r2, [pc, #152]	; (8002254 <HAL_CAN_MspInit+0xc0>)
 80021bc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80021c0:	6593      	str	r3, [r2, #88]	; 0x58
 80021c2:	4b24      	ldr	r3, [pc, #144]	; (8002254 <HAL_CAN_MspInit+0xc0>)
 80021c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021ca:	613b      	str	r3, [r7, #16]
 80021cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_CAN_MspInit+0xc0>)
 80021d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021d2:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_CAN_MspInit+0xc0>)
 80021d4:	f043 0302 	orr.w	r3, r3, #2
 80021d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80021da:	4b1e      	ldr	r3, [pc, #120]	; (8002254 <HAL_CAN_MspInit+0xc0>)
 80021dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	60fb      	str	r3, [r7, #12]
 80021e4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80021e6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 80021f8:	230a      	movs	r3, #10
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4815      	ldr	r0, [pc, #84]	; (8002258 <HAL_CAN_MspInit+0xc4>)
 8002204:	f001 fa0a 	bl	800361c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002208:	2200      	movs	r2, #0
 800220a:	2100      	movs	r1, #0
 800220c:	2013      	movs	r0, #19
 800220e:	f001 f950 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002212:	2013      	movs	r0, #19
 8002214:	f001 f969 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002218:	2200      	movs	r2, #0
 800221a:	2100      	movs	r1, #0
 800221c:	2014      	movs	r0, #20
 800221e:	f001 f948 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002222:	2014      	movs	r0, #20
 8002224:	f001 f961 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002228:	2200      	movs	r2, #0
 800222a:	2100      	movs	r1, #0
 800222c:	2015      	movs	r0, #21
 800222e:	f001 f940 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002232:	2015      	movs	r0, #21
 8002234:	f001 f959 	bl	80034ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002238:	2200      	movs	r2, #0
 800223a:	2100      	movs	r1, #0
 800223c:	2016      	movs	r0, #22
 800223e:	f001 f938 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002242:	2016      	movs	r0, #22
 8002244:	f001 f951 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002248:	bf00      	nop
 800224a:	3728      	adds	r7, #40	; 0x28
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40006400 	.word	0x40006400
 8002254:	40021000 	.word	0x40021000
 8002258:	48000400 	.word	0x48000400

0800225c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a1a      	ldr	r2, [pc, #104]	; (80022d4 <HAL_TIM_Base_MspInit+0x78>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d114      	bne.n	8002298 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002272:	4a19      	ldr	r2, [pc, #100]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 8002274:	f043 0310 	orr.w	r3, r3, #16
 8002278:	6593      	str	r3, [r2, #88]	; 0x58
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 800227c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800227e:	f003 0310 	and.w	r3, r3, #16
 8002282:	60fb      	str	r3, [r7, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002286:	2200      	movs	r2, #0
 8002288:	2100      	movs	r1, #0
 800228a:	2036      	movs	r0, #54	; 0x36
 800228c:	f001 f911 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002290:	2036      	movs	r0, #54	; 0x36
 8002292:	f001 f92a 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002296:	e018      	b.n	80022ca <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0f      	ldr	r2, [pc, #60]	; (80022dc <HAL_TIM_Base_MspInit+0x80>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d113      	bne.n	80022ca <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 80022a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a6:	4a0c      	ldr	r2, [pc, #48]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 80022a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ac:	6613      	str	r3, [r2, #96]	; 0x60
 80022ae:	4b0a      	ldr	r3, [pc, #40]	; (80022d8 <HAL_TIM_Base_MspInit+0x7c>)
 80022b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b6:	60bb      	str	r3, [r7, #8]
 80022b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80022ba:	2200      	movs	r2, #0
 80022bc:	2100      	movs	r1, #0
 80022be:	2019      	movs	r0, #25
 80022c0:	f001 f8f7 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80022c4:	2019      	movs	r0, #25
 80022c6:	f001 f910 	bl	80034ea <HAL_NVIC_EnableIRQ>
}
 80022ca:	bf00      	nop
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	40001000 	.word	0x40001000
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40014400 	.word	0x40014400

080022e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	; 0x28
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e8:	f107 0314 	add.w	r3, r7, #20
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	605a      	str	r2, [r3, #4]
 80022f2:	609a      	str	r2, [r3, #8]
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1b      	ldr	r2, [pc, #108]	; (800236c <HAL_UART_MspInit+0x8c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d12f      	bne.n	8002362 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002302:	4b1b      	ldr	r3, [pc, #108]	; (8002370 <HAL_UART_MspInit+0x90>)
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	4a1a      	ldr	r2, [pc, #104]	; (8002370 <HAL_UART_MspInit+0x90>)
 8002308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800230c:	6593      	str	r3, [r2, #88]	; 0x58
 800230e:	4b18      	ldr	r3, [pc, #96]	; (8002370 <HAL_UART_MspInit+0x90>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <HAL_UART_MspInit+0x90>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800231e:	4a14      	ldr	r2, [pc, #80]	; (8002370 <HAL_UART_MspInit+0x90>)
 8002320:	f043 0304 	orr.w	r3, r3, #4
 8002324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002326:	4b12      	ldr	r3, [pc, #72]	; (8002370 <HAL_UART_MspInit+0x90>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	f003 0304 	and.w	r3, r3, #4
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002332:	2330      	movs	r3, #48	; 0x30
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233e:	2303      	movs	r3, #3
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002342:	2307      	movs	r3, #7
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4809      	ldr	r0, [pc, #36]	; (8002374 <HAL_UART_MspInit+0x94>)
 800234e:	f001 f965 	bl	800361c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2027      	movs	r0, #39	; 0x27
 8002358:	f001 f8ab 	bl	80034b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800235c:	2027      	movs	r0, #39	; 0x27
 800235e:	f001 f8c4 	bl	80034ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3728      	adds	r7, #40	; 0x28
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40004800 	.word	0x40004800
 8002370:	40021000 	.word	0x40021000
 8002374:	48000800 	.word	0x48000800

08002378 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800237c:	e7fe      	b.n	800237c <NMI_Handler+0x4>

0800237e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800237e:	b480      	push	{r7}
 8002380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002382:	e7fe      	b.n	8002382 <HardFault_Handler+0x4>

08002384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002388:	e7fe      	b.n	8002388 <MemManage_Handler+0x4>

0800238a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800238a:	b480      	push	{r7}
 800238c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800238e:	e7fe      	b.n	800238e <BusFault_Handler+0x4>

08002390 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002390:	b480      	push	{r7}
 8002392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002394:	e7fe      	b.n	8002394 <UsageFault_Handler+0x4>

08002396 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002396:	b480      	push	{r7}
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr

080023b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023b2:	b480      	push	{r7}
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023b6:	bf00      	nop
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023c4:	f000 f900 	bl	80025c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023c8:	bf00      	nop
 80023ca:	bd80      	pop	{r7, pc}

080023cc <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 80023d0:	2002      	movs	r0, #2
 80023d2:	f001 fab5 	bl	8003940 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023e0:	4802      	ldr	r0, [pc, #8]	; (80023ec <CAN1_TX_IRQHandler+0x10>)
 80023e2:	f000 fd76 	bl	8002ed2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000504 	.word	0x20000504

080023f0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80023f4:	4802      	ldr	r0, [pc, #8]	; (8002400 <CAN1_RX0_IRQHandler+0x10>)
 80023f6:	f000 fd6c 	bl	8002ed2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80023fa:	bf00      	nop
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	20000504 	.word	0x20000504

08002404 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002408:	4802      	ldr	r0, [pc, #8]	; (8002414 <CAN1_RX1_IRQHandler+0x10>)
 800240a:	f000 fd62 	bl	8002ed2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000504 	.word	0x20000504

08002418 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800241c:	4802      	ldr	r0, [pc, #8]	; (8002428 <CAN1_SCE_IRQHandler+0x10>)
 800241e:	f000 fd58 	bl	8002ed2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000504 	.word	0x20000504

0800242c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002430:	4802      	ldr	r0, [pc, #8]	; (800243c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002432:	f002 fcdc 	bl	8004dee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002436:	bf00      	nop
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000668 	.word	0x20000668

08002440 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002444:	4802      	ldr	r0, [pc, #8]	; (8002450 <USART3_IRQHandler+0x10>)
 8002446:	f002 fff5 	bl	8005434 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	200003fc 	.word	0x200003fc

08002454 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 underrun error interrupt.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002458:	4802      	ldr	r0, [pc, #8]	; (8002464 <TIM6_DAC_IRQHandler+0x10>)
 800245a:	f002 fcc8 	bl	8004dee <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20000618 	.word	0x20000618

08002468 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800246c:	4b15      	ldr	r3, [pc, #84]	; (80024c4 <SystemInit+0x5c>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	4a14      	ldr	r2, [pc, #80]	; (80024c4 <SystemInit+0x5c>)
 8002474:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002478:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800247c:	4b12      	ldr	r3, [pc, #72]	; (80024c8 <SystemInit+0x60>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <SystemInit+0x60>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002488:	4b0f      	ldr	r3, [pc, #60]	; (80024c8 <SystemInit+0x60>)
 800248a:	2200      	movs	r2, #0
 800248c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800248e:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <SystemInit+0x60>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a0d      	ldr	r2, [pc, #52]	; (80024c8 <SystemInit+0x60>)
 8002494:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002498:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800249c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <SystemInit+0x60>)
 80024a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024a4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024a6:	4b08      	ldr	r3, [pc, #32]	; (80024c8 <SystemInit+0x60>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a07      	ldr	r2, [pc, #28]	; (80024c8 <SystemInit+0x60>)
 80024ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SystemInit+0x60>)
 80024b4:	2200      	movs	r2, #0
 80024b6:	619a      	str	r2, [r3, #24]
}
 80024b8:	bf00      	nop
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000ed00 	.word	0xe000ed00
 80024c8:	40021000 	.word	0x40021000

080024cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002504 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024d0:	f7ff ffca 	bl	8002468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024d4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024d6:	e003      	b.n	80024e0 <LoopCopyDataInit>

080024d8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024da:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024dc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024de:	3104      	adds	r1, #4

080024e0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024e0:	480a      	ldr	r0, [pc, #40]	; (800250c <LoopForever+0xa>)
	ldr	r3, =_edata
 80024e2:	4b0b      	ldr	r3, [pc, #44]	; (8002510 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024e4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024e6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024e8:	d3f6      	bcc.n	80024d8 <CopyDataInit>
	ldr	r2, =_sbss
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024ec:	e002      	b.n	80024f4 <LoopFillZerobss>

080024ee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024ee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024f0:	f842 3b04 	str.w	r3, [r2], #4

080024f4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <LoopForever+0x16>)
	cmp	r2, r3
 80024f6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024f8:	d3f9      	bcc.n	80024ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024fa:	f003 fde9 	bl	80060d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024fe:	f7ff fbcb 	bl	8001c98 <main>

08002502 <LoopForever>:

LoopForever:
    b LoopForever
 8002502:	e7fe      	b.n	8002502 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002504:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8002508:	08006260 	.word	0x08006260
	ldr	r0, =_sdata
 800250c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002510:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8002514:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8002518:	200006bc 	.word	0x200006bc

0800251c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800251c:	e7fe      	b.n	800251c <ADC1_IRQHandler>

0800251e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b082      	sub	sp, #8
 8002522:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002524:	2300      	movs	r3, #0
 8002526:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002528:	2003      	movs	r0, #3
 800252a:	f000 ffb7 	bl	800349c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800252e:	2000      	movs	r0, #0
 8002530:	f000 f80e 	bl	8002550 <HAL_InitTick>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	71fb      	strb	r3, [r7, #7]
 800253e:	e001      	b.n	8002544 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002540:	f7ff fe04 	bl	800214c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002544:	79fb      	ldrb	r3, [r7, #7]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002558:	2300      	movs	r3, #0
 800255a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800255c:	4b17      	ldr	r3, [pc, #92]	; (80025bc <HAL_InitTick+0x6c>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d023      	beq.n	80025ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002564:	4b16      	ldr	r3, [pc, #88]	; (80025c0 <HAL_InitTick+0x70>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b14      	ldr	r3, [pc, #80]	; (80025bc <HAL_InitTick+0x6c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002572:	fbb3 f3f1 	udiv	r3, r3, r1
 8002576:	fbb2 f3f3 	udiv	r3, r2, r3
 800257a:	4618      	mov	r0, r3
 800257c:	f000 ffc3 	bl	8003506 <HAL_SYSTICK_Config>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10f      	bne.n	80025a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b0f      	cmp	r3, #15
 800258a:	d809      	bhi.n	80025a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800258c:	2200      	movs	r2, #0
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	f04f 30ff 	mov.w	r0, #4294967295
 8002594:	f000 ff8d 	bl	80034b2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002598:	4a0a      	ldr	r2, [pc, #40]	; (80025c4 <HAL_InitTick+0x74>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6013      	str	r3, [r2, #0]
 800259e:	e007      	b.n	80025b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	73fb      	strb	r3, [r7, #15]
 80025a4:	e004      	b.n	80025b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	e001      	b.n	80025b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000000c 	.word	0x2000000c
 80025c0:	20000004 	.word	0x20000004
 80025c4:	20000008 	.word	0x20000008

080025c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <HAL_IncTick+0x20>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	461a      	mov	r2, r3
 80025d2:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_IncTick+0x24>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4413      	add	r3, r2
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_IncTick+0x24>)
 80025da:	6013      	str	r3, [r2, #0]
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	200006b8 	.word	0x200006b8

080025f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return uwTick;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_GetTick+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	200006b8 	.word	0x200006b8

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff ffee 	bl	80025f0 <HAL_GetTick>
 8002614:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_Delay+0x44>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	461a      	mov	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4413      	add	r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262e:	bf00      	nop
 8002630:	f7ff ffde 	bl	80025f0 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
  {
  }
}
 8002640:	bf00      	nop
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	2000000c 	.word	0x2000000c

08002650 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e11c      	b.n	800289c <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d131      	bne.n	80026d2 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4a8c      	ldr	r2, [pc, #560]	; (80028a4 <HAL_CAN_Init+0x254>)
 8002672:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	4a8c      	ldr	r2, [pc, #560]	; (80028a8 <HAL_CAN_Init+0x258>)
 8002678:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a8b      	ldr	r2, [pc, #556]	; (80028ac <HAL_CAN_Init+0x25c>)
 800267e:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	4a8b      	ldr	r2, [pc, #556]	; (80028b0 <HAL_CAN_Init+0x260>)
 8002684:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a8a      	ldr	r2, [pc, #552]	; (80028b4 <HAL_CAN_Init+0x264>)
 800268a:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	4a8a      	ldr	r2, [pc, #552]	; (80028b8 <HAL_CAN_Init+0x268>)
 8002690:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a89      	ldr	r2, [pc, #548]	; (80028bc <HAL_CAN_Init+0x26c>)
 8002696:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	4a89      	ldr	r2, [pc, #548]	; (80028c0 <HAL_CAN_Init+0x270>)
 800269c:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a88      	ldr	r2, [pc, #544]	; (80028c4 <HAL_CAN_Init+0x274>)
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	4a88      	ldr	r2, [pc, #544]	; (80028c8 <HAL_CAN_Init+0x278>)
 80026a8:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	4a87      	ldr	r2, [pc, #540]	; (80028cc <HAL_CAN_Init+0x27c>)
 80026ae:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	4a87      	ldr	r2, [pc, #540]	; (80028d0 <HAL_CAN_Init+0x280>)
 80026b4:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4a86      	ldr	r2, [pc, #536]	; (80028d4 <HAL_CAN_Init+0x284>)
 80026ba:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a84      	ldr	r2, [pc, #528]	; (80028d8 <HAL_CAN_Init+0x288>)
 80026c8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0202 	bic.w	r2, r2, #2
 80026e0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80026e2:	f7ff ff85 	bl	80025f0 <HAL_GetTick>
 80026e6:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026e8:	e012      	b.n	8002710 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80026ea:	f7ff ff81 	bl	80025f0 <HAL_GetTick>
 80026ee:	4602      	mov	r2, r0
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	2b0a      	cmp	r3, #10
 80026f6:	d90b      	bls.n	8002710 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2205      	movs	r2, #5
 8002708:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e0c5      	b.n	800289c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d1e5      	bne.n	80026ea <HAL_CAN_Init+0x9a>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f042 0201 	orr.w	r2, r2, #1
 800272c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800272e:	f7ff ff5f 	bl	80025f0 <HAL_GetTick>
 8002732:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002734:	e012      	b.n	800275c <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002736:	f7ff ff5b 	bl	80025f0 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b0a      	cmp	r3, #10
 8002742:	d90b      	bls.n	800275c <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002748:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2205      	movs	r2, #5
 8002754:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e09f      	b.n	800289c <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0e5      	beq.n	8002736 <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	7e1b      	ldrb	r3, [r3, #24]
 800276e:	2b01      	cmp	r3, #1
 8002770:	d108      	bne.n	8002784 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	e007      	b.n	8002794 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002792:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7e5b      	ldrb	r3, [r3, #25]
 8002798:	2b01      	cmp	r3, #1
 800279a:	d108      	bne.n	80027ae <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	e007      	b.n	80027be <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	7e9b      	ldrb	r3, [r3, #26]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d108      	bne.n	80027d8 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f042 0220 	orr.w	r2, r2, #32
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	e007      	b.n	80027e8 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0220 	bic.w	r2, r2, #32
 80027e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7edb      	ldrb	r3, [r3, #27]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0210 	bic.w	r2, r2, #16
 80027fe:	601a      	str	r2, [r3, #0]
 8002800:	e007      	b.n	8002812 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0210 	orr.w	r2, r2, #16
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	7f1b      	ldrb	r3, [r3, #28]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d108      	bne.n	800282c <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f042 0208 	orr.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
 800282a:	e007      	b.n	800283c <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 0208 	bic.w	r2, r2, #8
 800283a:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	7f5b      	ldrb	r3, [r3, #29]
 8002840:	2b01      	cmp	r3, #1
 8002842:	d108      	bne.n	8002856 <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0204 	orr.w	r2, r2, #4
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	e007      	b.n	8002866 <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0204 	bic.w	r2, r2, #4
 8002864:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	691b      	ldr	r3, [r3, #16]
 8002874:	431a      	orrs	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	ea42 0103 	orr.w	r1, r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	1e5a      	subs	r2, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800289a:	2300      	movs	r3, #0
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	08001a1d 	.word	0x08001a1d
 80028a8:	08003299 	.word	0x08003299
 80028ac:	080032ad 	.word	0x080032ad
 80028b0:	080032c1 	.word	0x080032c1
 80028b4:	08001981 	.word	0x08001981
 80028b8:	080019b5 	.word	0x080019b5
 80028bc:	080019e9 	.word	0x080019e9
 80028c0:	0800325d 	.word	0x0800325d
 80028c4:	08003271 	.word	0x08003271
 80028c8:	08003285 	.word	0x08003285
 80028cc:	080032d5 	.word	0x080032d5
 80028d0:	080032e9 	.word	0x080032e9
 80028d4:	08001a6d 	.word	0x08001a6d
 80028d8:	08002195 	.word	0x08002195

080028dc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80028dc:	b480      	push	{r7}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028f2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d003      	beq.n	8002902 <HAL_CAN_ConfigFilter+0x26>
 80028fa:	7cfb      	ldrb	r3, [r7, #19]
 80028fc:	2b02      	cmp	r3, #2
 80028fe:	f040 80aa 	bne.w	8002a56 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002908:	f043 0201 	orr.w	r2, r3, #1
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2201      	movs	r2, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	43db      	mvns	r3, r3
 800292c:	401a      	ands	r2, r3
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	69db      	ldr	r3, [r3, #28]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d123      	bne.n	8002984 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	43db      	mvns	r3, r3
 8002946:	401a      	ands	r2, r3
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800295e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	3248      	adds	r2, #72	; 0x48
 8002964:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002978:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800297a:	6979      	ldr	r1, [r7, #20]
 800297c:	3348      	adds	r3, #72	; 0x48
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	440b      	add	r3, r1
 8002982:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	2b01      	cmp	r3, #1
 800298a:	d122      	bne.n	80029d2 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	431a      	orrs	r2, r3
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80029ac:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3248      	adds	r2, #72	; 0x48
 80029b2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80029c6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80029c8:	6979      	ldr	r1, [r7, #20]
 80029ca:	3348      	adds	r3, #72	; 0x48
 80029cc:	00db      	lsls	r3, r3, #3
 80029ce:	440b      	add	r3, r1
 80029d0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d109      	bne.n	80029ee <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	401a      	ands	r2, r3
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80029ec:	e007      	b.n	80029fe <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	431a      	orrs	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	43db      	mvns	r3, r3
 8002a10:	401a      	ands	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002a18:	e007      	b.n	8002a2a <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	431a      	orrs	r2, r3
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d107      	bne.n	8002a42 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	431a      	orrs	r2, r3
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002a48:	f023 0201 	bic.w	r2, r3, #1
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002a52:	2300      	movs	r3, #0
 8002a54:	e006      	b.n	8002a64 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	371c      	adds	r7, #28
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d12e      	bne.n	8002ae2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2202      	movs	r2, #2
 8002a88:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0201 	bic.w	r2, r2, #1
 8002a9a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a9c:	f7ff fda8 	bl	80025f0 <HAL_GetTick>
 8002aa0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002aa2:	e012      	b.n	8002aca <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002aa4:	f7ff fda4 	bl	80025f0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b0a      	cmp	r3, #10
 8002ab0:	d90b      	bls.n	8002aca <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2205      	movs	r2, #5
 8002ac2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e012      	b.n	8002af0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0301 	and.w	r3, r3, #1
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1e5      	bne.n	8002aa4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e006      	b.n	8002af0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
  }
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}

08002af8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b089      	sub	sp, #36	; 0x24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b0c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002b16:	7ffb      	ldrb	r3, [r7, #31]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d003      	beq.n	8002b24 <HAL_CAN_AddTxMessage+0x2c>
 8002b1c:	7ffb      	ldrb	r3, [r7, #31]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	f040 80b8 	bne.w	8002c94 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10a      	bne.n	8002b44 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d105      	bne.n	8002b44 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 80a0 	beq.w	8002c84 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	0e1b      	lsrs	r3, r3, #24
 8002b48:	f003 0303 	and.w	r3, r3, #3
 8002b4c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d907      	bls.n	8002b64 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e09e      	b.n	8002ca2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002b64:	2201      	movs	r2, #1
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	409a      	lsls	r2, r3
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10d      	bne.n	8002b92 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002b80:	68f9      	ldr	r1, [r7, #12]
 8002b82:	6809      	ldr	r1, [r1, #0]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	3318      	adds	r3, #24
 8002b8a:	011b      	lsls	r3, r3, #4
 8002b8c:	440b      	add	r3, r1
 8002b8e:	601a      	str	r2, [r3, #0]
 8002b90:	e00f      	b.n	8002bb2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b9c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002ba6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	3318      	adds	r3, #24
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	440b      	add	r3, r1
 8002bb0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	3318      	adds	r3, #24
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	440b      	add	r3, r1
 8002bc2:	3304      	adds	r3, #4
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	7d1b      	ldrb	r3, [r3, #20]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d111      	bne.n	8002bf2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	6811      	ldr	r1, [r2, #0]
 8002be2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	3318      	adds	r3, #24
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	440b      	add	r3, r1
 8002bee:	3304      	adds	r3, #4
 8002bf0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	3307      	adds	r3, #7
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	061a      	lsls	r2, r3, #24
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	3306      	adds	r3, #6
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3305      	adds	r3, #5
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	021b      	lsls	r3, r3, #8
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	3204      	adds	r2, #4
 8002c12:	7812      	ldrb	r2, [r2, #0]
 8002c14:	4610      	mov	r0, r2
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	6811      	ldr	r1, [r2, #0]
 8002c1a:	ea43 0200 	orr.w	r2, r3, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	440b      	add	r3, r1
 8002c24:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002c28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	3303      	adds	r3, #3
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	061a      	lsls	r2, r3, #24
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	3302      	adds	r3, #2
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	041b      	lsls	r3, r3, #16
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3301      	adds	r3, #1
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	021b      	lsls	r3, r3, #8
 8002c44:	4313      	orrs	r3, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	7812      	ldrb	r2, [r2, #0]
 8002c4a:	4610      	mov	r0, r2
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	6811      	ldr	r1, [r2, #0]
 8002c50:	ea43 0200 	orr.w	r2, r3, r0
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	440b      	add	r3, r1
 8002c5a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002c5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	3318      	adds	r3, #24
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4413      	add	r3, r2
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68fa      	ldr	r2, [r7, #12]
 8002c70:	6811      	ldr	r1, [r2, #0]
 8002c72:	f043 0201 	orr.w	r2, r3, #1
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	3318      	adds	r3, #24
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	440b      	add	r3, r1
 8002c7e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e00e      	b.n	8002ca2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c88:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e006      	b.n	8002ca2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c98:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
  }
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3724      	adds	r7, #36	; 0x24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b087      	sub	sp, #28
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cc2:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002cc4:	7dfb      	ldrb	r3, [r7, #23]
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d003      	beq.n	8002cd2 <HAL_CAN_GetRxMessage+0x24>
 8002cca:	7dfb      	ldrb	r3, [r7, #23]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	f040 80f3 	bne.w	8002eb8 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d10e      	bne.n	8002cf6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	f003 0303 	and.w	r3, r3, #3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d116      	bne.n	8002d14 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e0e7      	b.n	8002ec6 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	f003 0303 	and.w	r3, r3, #3
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d107      	bne.n	8002d14 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e0d8      	b.n	8002ec6 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	331b      	adds	r3, #27
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	4413      	add	r3, r2
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 0204 	and.w	r2, r3, #4
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10c      	bne.n	8002d4c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	331b      	adds	r3, #27
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	4413      	add	r3, r2
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	0d5b      	lsrs	r3, r3, #21
 8002d42:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	601a      	str	r2, [r3, #0]
 8002d4a:	e00b      	b.n	8002d64 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	331b      	adds	r3, #27
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	4413      	add	r3, r2
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	08db      	lsrs	r3, r3, #3
 8002d5c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	331b      	adds	r3, #27
 8002d6c:	011b      	lsls	r3, r3, #4
 8002d6e:	4413      	add	r3, r2
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0202 	and.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	331b      	adds	r3, #27
 8002d82:	011b      	lsls	r3, r3, #4
 8002d84:	4413      	add	r3, r2
 8002d86:	3304      	adds	r3, #4
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 020f 	and.w	r2, r3, #15
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	331b      	adds	r3, #27
 8002d9a:	011b      	lsls	r3, r3, #4
 8002d9c:	4413      	add	r3, r2
 8002d9e:	3304      	adds	r3, #4
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	0a1b      	lsrs	r3, r3, #8
 8002da4:	b2da      	uxtb	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	331b      	adds	r3, #27
 8002db2:	011b      	lsls	r3, r3, #4
 8002db4:	4413      	add	r3, r2
 8002db6:	3304      	adds	r3, #4
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	0c1b      	lsrs	r3, r3, #16
 8002dbc:	b29a      	uxth	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	4413      	add	r3, r2
 8002dcc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	b2da      	uxtb	r2, r3
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	011b      	lsls	r3, r3, #4
 8002de0:	4413      	add	r3, r2
 8002de2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	0a1a      	lsrs	r2, r3, #8
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	3301      	adds	r3, #1
 8002dee:	b2d2      	uxtb	r2, r2
 8002df0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681a      	ldr	r2, [r3, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	4413      	add	r3, r2
 8002dfc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	0c1a      	lsrs	r2, r3, #16
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	3302      	adds	r3, #2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	011b      	lsls	r3, r3, #4
 8002e14:	4413      	add	r3, r2
 8002e16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	0e1a      	lsrs	r2, r3, #24
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	3303      	adds	r3, #3
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	011b      	lsls	r3, r3, #4
 8002e2e:	4413      	add	r3, r2
 8002e30:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	3304      	adds	r3, #4
 8002e3a:	b2d2      	uxtb	r2, r2
 8002e3c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	011b      	lsls	r3, r3, #4
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	0a1a      	lsrs	r2, r3, #8
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	3305      	adds	r3, #5
 8002e54:	b2d2      	uxtb	r2, r2
 8002e56:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	0c1a      	lsrs	r2, r3, #16
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	3306      	adds	r3, #6
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	011b      	lsls	r3, r3, #4
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	0e1a      	lsrs	r2, r3, #24
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	3307      	adds	r3, #7
 8002e88:	b2d2      	uxtb	r2, r2
 8002e8a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d108      	bne.n	8002ea4 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	60da      	str	r2, [r3, #12]
 8002ea2:	e007      	b.n	8002eb4 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	691a      	ldr	r2, [r3, #16]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f042 0220 	orr.w	r2, r2, #32
 8002eb2:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	e006      	b.n	8002ec6 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
  }
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	371c      	adds	r7, #28
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr

08002ed2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b08a      	sub	sp, #40	; 0x28
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002eda:	2300      	movs	r3, #0
 8002edc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	695b      	ldr	r3, [r3, #20]
 8002ee4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 8083 	beq.w	8003020 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d025      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2201      	movs	r2, #1
 8002f2a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
 8002f3e:	e017      	b.n	8002f70 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f40:	69bb      	ldr	r3, [r7, #24]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d004      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24
 8002f52:	e00d      	b.n	8002f70 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d004      	beq.n	8002f68 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f64:	627b      	str	r3, [r7, #36]	; 0x24
 8002f66:	e003      	b.n	8002f70 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d026      	beq.n	8002fc8 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f82:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d004      	beq.n	8002f98 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
 8002f96:	e017      	b.n	8002fc8 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d004      	beq.n	8002fac <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fa8:	627b      	str	r3, [r7, #36]	; 0x24
 8002faa:	e00d      	b.n	8002fc8 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d004      	beq.n	8002fc0 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fbc:	627b      	str	r3, [r7, #36]	; 0x24
 8002fbe:	e003      	b.n	8002fc8 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d026      	beq.n	8003020 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fda:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	4798      	blx	r3
 8002fee:	e017      	b.n	8003020 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d004      	beq.n	8003004 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
 8003002:	e00d      	b.n	8003020 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800300a:	2b00      	cmp	r3, #0
 800300c:	d004      	beq.n	8003018 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800300e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
 8003016:	e003      	b.n	8003020 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d00c      	beq.n	8003044 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f003 0310 	and.w	r3, r3, #16
 8003030:	2b00      	cmp	r3, #0
 8003032:	d007      	beq.n	8003044 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003044:	6a3b      	ldr	r3, [r7, #32]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00c      	beq.n	8003068 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f003 0308 	and.w	r3, r3, #8
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2208      	movs	r2, #8
 800305e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003068:	6a3b      	ldr	r3, [r7, #32]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00a      	beq.n	8003088 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	f003 0303 	and.w	r3, r3, #3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2210      	movs	r2, #16
 80030aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00c      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d007      	beq.n	80030d0 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2208      	movs	r2, #8
 80030c6:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030d0:	6a3b      	ldr	r3, [r7, #32]
 80030d2:	f003 0310 	and.w	r3, r3, #16
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00a      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	691b      	ldr	r3, [r3, #16]
 80030e0:	f003 0303 	and.w	r3, r3, #3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030f0:	6a3b      	ldr	r3, [r7, #32]
 80030f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00c      	beq.n	8003114 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	f003 0310 	and.w	r3, r3, #16
 8003100:	2b00      	cmp	r3, #0
 8003102:	d007      	beq.n	8003114 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2210      	movs	r2, #16
 800310a:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003114:	6a3b      	ldr	r3, [r7, #32]
 8003116:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311a:	2b00      	cmp	r3, #0
 800311c:	d00c      	beq.n	8003138 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f003 0308 	and.w	r3, r3, #8
 8003124:	2b00      	cmp	r3, #0
 8003126:	d007      	beq.n	8003138 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2208      	movs	r2, #8
 800312e:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003138:	6a3b      	ldr	r3, [r7, #32]
 800313a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d07b      	beq.n	800323a <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f003 0304 	and.w	r3, r3, #4
 8003148:	2b00      	cmp	r3, #0
 800314a:	d072      	beq.n	8003232 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800314c:	6a3b      	ldr	r3, [r7, #32]
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	2b00      	cmp	r3, #0
 8003154:	d008      	beq.n	8003168 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800315c:	2b00      	cmp	r3, #0
 800315e:	d003      	beq.n	8003168 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	f043 0301 	orr.w	r3, r3, #1
 8003166:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003168:	6a3b      	ldr	r3, [r7, #32]
 800316a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800317c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800317e:	f043 0302 	orr.w	r3, r3, #2
 8003182:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800318a:	2b00      	cmp	r3, #0
 800318c:	d008      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003194:	2b00      	cmp	r3, #0
 8003196:	d003      	beq.n	80031a0 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800319a:	f043 0304 	orr.w	r3, r3, #4
 800319e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031a0:	6a3b      	ldr	r3, [r7, #32]
 80031a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d043      	beq.n	8003232 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d03e      	beq.n	8003232 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031ba:	2b60      	cmp	r3, #96	; 0x60
 80031bc:	d02b      	beq.n	8003216 <HAL_CAN_IRQHandler+0x344>
 80031be:	2b60      	cmp	r3, #96	; 0x60
 80031c0:	d82e      	bhi.n	8003220 <HAL_CAN_IRQHandler+0x34e>
 80031c2:	2b50      	cmp	r3, #80	; 0x50
 80031c4:	d022      	beq.n	800320c <HAL_CAN_IRQHandler+0x33a>
 80031c6:	2b50      	cmp	r3, #80	; 0x50
 80031c8:	d82a      	bhi.n	8003220 <HAL_CAN_IRQHandler+0x34e>
 80031ca:	2b40      	cmp	r3, #64	; 0x40
 80031cc:	d019      	beq.n	8003202 <HAL_CAN_IRQHandler+0x330>
 80031ce:	2b40      	cmp	r3, #64	; 0x40
 80031d0:	d826      	bhi.n	8003220 <HAL_CAN_IRQHandler+0x34e>
 80031d2:	2b30      	cmp	r3, #48	; 0x30
 80031d4:	d010      	beq.n	80031f8 <HAL_CAN_IRQHandler+0x326>
 80031d6:	2b30      	cmp	r3, #48	; 0x30
 80031d8:	d822      	bhi.n	8003220 <HAL_CAN_IRQHandler+0x34e>
 80031da:	2b10      	cmp	r3, #16
 80031dc:	d002      	beq.n	80031e4 <HAL_CAN_IRQHandler+0x312>
 80031de:	2b20      	cmp	r3, #32
 80031e0:	d005      	beq.n	80031ee <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031e2:	e01d      	b.n	8003220 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80031e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e6:	f043 0308 	orr.w	r3, r3, #8
 80031ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ec:	e019      	b.n	8003222 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f0:	f043 0310 	orr.w	r3, r3, #16
 80031f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f6:	e014      	b.n	8003222 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	f043 0320 	orr.w	r3, r3, #32
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003200:	e00f      	b.n	8003222 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8003202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003204:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800320a:	e00a      	b.n	8003222 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 800320c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800320e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003212:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003214:	e005      	b.n	8003222 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003218:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800321e:	e000      	b.n	8003222 <HAL_CAN_IRQHandler+0x350>
            break;
 8003220:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	699a      	ldr	r2, [r3, #24]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003230:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2204      	movs	r2, #4
 8003238:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	2b00      	cmp	r3, #0
 800323e:	d009      	beq.n	8003254 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003254:	bf00      	nop
 8003256:	3728      	adds	r7, #40	; 0x28
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800328c:	bf00      	nop
 800328e:	370c      	adds	r7, #12
 8003290:	46bd      	mov	sp, r7
 8003292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003296:	4770      	bx	lr

08003298 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003298:	b480      	push	{r7}
 800329a:	b083      	sub	sp, #12
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032a0:	bf00      	nop
 80032a2:	370c      	adds	r7, #12
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032ac:	b480      	push	{r7}
 80032ae:	b083      	sub	sp, #12
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032b4:	bf00      	nop
 80032b6:	370c      	adds	r7, #12
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr

080032c0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032c8:	bf00      	nop
 80032ca:	370c      	adds	r7, #12
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr

080032d4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b083      	sub	sp, #12
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80032dc:	bf00      	nop
 80032de:	370c      	adds	r7, #12
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b083      	sub	sp, #12
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <__NVIC_SetPriorityGrouping>:
{
 80032fc:	b480      	push	{r7}
 80032fe:	b085      	sub	sp, #20
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 800330e:	68db      	ldr	r3, [r3, #12]
 8003310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003318:	4013      	ands	r3, r2
 800331a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800332c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800332e:	4a04      	ldr	r2, [pc, #16]	; (8003340 <__NVIC_SetPriorityGrouping+0x44>)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	60d3      	str	r3, [r2, #12]
}
 8003334:	bf00      	nop
 8003336:	3714      	adds	r7, #20
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	e000ed00 	.word	0xe000ed00

08003344 <__NVIC_GetPriorityGrouping>:
{
 8003344:	b480      	push	{r7}
 8003346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003348:	4b04      	ldr	r3, [pc, #16]	; (800335c <__NVIC_GetPriorityGrouping+0x18>)
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	0a1b      	lsrs	r3, r3, #8
 800334e:	f003 0307 	and.w	r3, r3, #7
}
 8003352:	4618      	mov	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	e000ed00 	.word	0xe000ed00

08003360 <__NVIC_EnableIRQ>:
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	4603      	mov	r3, r0
 8003368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800336a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800336e:	2b00      	cmp	r3, #0
 8003370:	db0b      	blt.n	800338a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	f003 021f 	and.w	r2, r3, #31
 8003378:	4907      	ldr	r1, [pc, #28]	; (8003398 <__NVIC_EnableIRQ+0x38>)
 800337a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800337e:	095b      	lsrs	r3, r3, #5
 8003380:	2001      	movs	r0, #1
 8003382:	fa00 f202 	lsl.w	r2, r0, r2
 8003386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800338a:	bf00      	nop
 800338c:	370c      	adds	r7, #12
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000e100 	.word	0xe000e100

0800339c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800339c:	b480      	push	{r7}
 800339e:	b083      	sub	sp, #12
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	4603      	mov	r3, r0
 80033a4:	6039      	str	r1, [r7, #0]
 80033a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	db0a      	blt.n	80033c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	490c      	ldr	r1, [pc, #48]	; (80033e8 <__NVIC_SetPriority+0x4c>)
 80033b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ba:	0112      	lsls	r2, r2, #4
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	440b      	add	r3, r1
 80033c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80033c4:	e00a      	b.n	80033dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	b2da      	uxtb	r2, r3
 80033ca:	4908      	ldr	r1, [pc, #32]	; (80033ec <__NVIC_SetPriority+0x50>)
 80033cc:	79fb      	ldrb	r3, [r7, #7]
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	3b04      	subs	r3, #4
 80033d4:	0112      	lsls	r2, r2, #4
 80033d6:	b2d2      	uxtb	r2, r2
 80033d8:	440b      	add	r3, r1
 80033da:	761a      	strb	r2, [r3, #24]
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000e100 	.word	0xe000e100
 80033ec:	e000ed00 	.word	0xe000ed00

080033f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b089      	sub	sp, #36	; 0x24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f1c3 0307 	rsb	r3, r3, #7
 800340a:	2b04      	cmp	r3, #4
 800340c:	bf28      	it	cs
 800340e:	2304      	movcs	r3, #4
 8003410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	3304      	adds	r3, #4
 8003416:	2b06      	cmp	r3, #6
 8003418:	d902      	bls.n	8003420 <NVIC_EncodePriority+0x30>
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	3b03      	subs	r3, #3
 800341e:	e000      	b.n	8003422 <NVIC_EncodePriority+0x32>
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	69bb      	ldr	r3, [r7, #24]
 800342a:	fa02 f303 	lsl.w	r3, r2, r3
 800342e:	43da      	mvns	r2, r3
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	401a      	ands	r2, r3
 8003434:	697b      	ldr	r3, [r7, #20]
 8003436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003438:	f04f 31ff 	mov.w	r1, #4294967295
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	fa01 f303 	lsl.w	r3, r1, r3
 8003442:	43d9      	mvns	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003448:	4313      	orrs	r3, r2
         );
}
 800344a:	4618      	mov	r0, r3
 800344c:	3724      	adds	r7, #36	; 0x24
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr
	...

08003458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b082      	sub	sp, #8
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3b01      	subs	r3, #1
 8003464:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003468:	d301      	bcc.n	800346e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800346a:	2301      	movs	r3, #1
 800346c:	e00f      	b.n	800348e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800346e:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <SysTick_Config+0x40>)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3b01      	subs	r3, #1
 8003474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003476:	210f      	movs	r1, #15
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f7ff ff8e 	bl	800339c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <SysTick_Config+0x40>)
 8003482:	2200      	movs	r2, #0
 8003484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <SysTick_Config+0x40>)
 8003488:	2207      	movs	r2, #7
 800348a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	e000e010 	.word	0xe000e010

0800349c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f7ff ff29 	bl	80032fc <__NVIC_SetPriorityGrouping>
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034b2:	b580      	push	{r7, lr}
 80034b4:	b086      	sub	sp, #24
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	4603      	mov	r3, r0
 80034ba:	60b9      	str	r1, [r7, #8]
 80034bc:	607a      	str	r2, [r7, #4]
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80034c0:	2300      	movs	r3, #0
 80034c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80034c4:	f7ff ff3e 	bl	8003344 <__NVIC_GetPriorityGrouping>
 80034c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	6978      	ldr	r0, [r7, #20]
 80034d0:	f7ff ff8e 	bl	80033f0 <NVIC_EncodePriority>
 80034d4:	4602      	mov	r2, r0
 80034d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034da:	4611      	mov	r1, r2
 80034dc:	4618      	mov	r0, r3
 80034de:	f7ff ff5d 	bl	800339c <__NVIC_SetPriority>
}
 80034e2:	bf00      	nop
 80034e4:	3718      	adds	r7, #24
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}

080034ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	4603      	mov	r3, r0
 80034f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80034f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7ff ff31 	bl	8003360 <__NVIC_EnableIRQ>
}
 80034fe:	bf00      	nop
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b082      	sub	sp, #8
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f7ff ffa2 	bl	8003458 <SysTick_Config>
 8003514:	4603      	mov	r3, r0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800351e:	b480      	push	{r7}
 8003520:	b085      	sub	sp, #20
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003526:	2300      	movs	r3, #0
 8003528:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d008      	beq.n	8003548 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e022      	b.n	800358e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 020e 	bic.w	r2, r2, #14
 8003556:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356c:	f003 021c 	and.w	r2, r3, #28
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	2101      	movs	r1, #1
 8003576:	fa01 f202 	lsl.w	r2, r1, r2
 800357a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800358c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800358e:	4618      	mov	r0, r3
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr

0800359a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b084      	sub	sp, #16
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d005      	beq.n	80035be <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2204      	movs	r2, #4
 80035b6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	73fb      	strb	r3, [r7, #15]
 80035bc:	e029      	b.n	8003612 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f022 020e 	bic.w	r2, r2, #14
 80035cc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 0201 	bic.w	r2, r2, #1
 80035dc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f003 021c 	and.w	r2, r3, #28
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	2101      	movs	r1, #1
 80035ec:	fa01 f202 	lsl.w	r2, r1, r2
 80035f0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	4798      	blx	r3
    }
  }
  return status;
 8003612:	7bfb      	ldrb	r3, [r7, #15]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800361c:	b480      	push	{r7}
 800361e:	b087      	sub	sp, #28
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003626:	2300      	movs	r3, #0
 8003628:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800362a:	e154      	b.n	80038d6 <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	2101      	movs	r1, #1
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	fa01 f303 	lsl.w	r3, r1, r3
 8003638:	4013      	ands	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 8146 	beq.w	80038d0 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d00b      	beq.n	8003664 <HAL_GPIO_Init+0x48>
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d007      	beq.n	8003664 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003658:	2b11      	cmp	r3, #17
 800365a:	d003      	beq.n	8003664 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	2b12      	cmp	r3, #18
 8003662:	d130      	bne.n	80036c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	2203      	movs	r2, #3
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	43db      	mvns	r3, r3
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	4013      	ands	r3, r2
 800367a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	68da      	ldr	r2, [r3, #12]
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	005b      	lsls	r3, r3, #1
 8003684:	fa02 f303 	lsl.w	r3, r2, r3
 8003688:	693a      	ldr	r2, [r7, #16]
 800368a:	4313      	orrs	r3, r2
 800368c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	693a      	ldr	r2, [r7, #16]
 8003692:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800369a:	2201      	movs	r2, #1
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	43db      	mvns	r3, r3
 80036a4:	693a      	ldr	r2, [r7, #16]
 80036a6:	4013      	ands	r3, r2
 80036a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	091b      	lsrs	r3, r3, #4
 80036b0:	f003 0201 	and.w	r2, r3, #1
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	2203      	movs	r2, #3
 80036d2:	fa02 f303 	lsl.w	r3, r2, r3
 80036d6:	43db      	mvns	r3, r3
 80036d8:	693a      	ldr	r2, [r7, #16]
 80036da:	4013      	ands	r3, r2
 80036dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	005b      	lsls	r3, r3, #1
 80036e6:	fa02 f303 	lsl.w	r3, r2, r3
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d003      	beq.n	8003706 <HAL_GPIO_Init+0xea>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	2b12      	cmp	r3, #18
 8003704:	d123      	bne.n	800374e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	08da      	lsrs	r2, r3, #3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3208      	adds	r2, #8
 800370e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003712:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f003 0307 	and.w	r3, r3, #7
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	220f      	movs	r2, #15
 800371e:	fa02 f303 	lsl.w	r3, r2, r3
 8003722:	43db      	mvns	r3, r3
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4013      	ands	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	693a      	ldr	r2, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	08da      	lsrs	r2, r3, #3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	3208      	adds	r2, #8
 8003748:	6939      	ldr	r1, [r7, #16]
 800374a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	005b      	lsls	r3, r3, #1
 8003758:	2203      	movs	r2, #3
 800375a:	fa02 f303 	lsl.w	r3, r2, r3
 800375e:	43db      	mvns	r3, r3
 8003760:	693a      	ldr	r2, [r7, #16]
 8003762:	4013      	ands	r3, r2
 8003764:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f003 0203 	and.w	r2, r3, #3
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 80a0 	beq.w	80038d0 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003790:	4b58      	ldr	r3, [pc, #352]	; (80038f4 <HAL_GPIO_Init+0x2d8>)
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	4a57      	ldr	r2, [pc, #348]	; (80038f4 <HAL_GPIO_Init+0x2d8>)
 8003796:	f043 0301 	orr.w	r3, r3, #1
 800379a:	6613      	str	r3, [r2, #96]	; 0x60
 800379c:	4b55      	ldr	r3, [pc, #340]	; (80038f4 <HAL_GPIO_Init+0x2d8>)
 800379e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80037a8:	4a53      	ldr	r2, [pc, #332]	; (80038f8 <HAL_GPIO_Init+0x2dc>)
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	089b      	lsrs	r3, r3, #2
 80037ae:	3302      	adds	r3, #2
 80037b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	220f      	movs	r2, #15
 80037c0:	fa02 f303 	lsl.w	r3, r2, r3
 80037c4:	43db      	mvns	r3, r3
 80037c6:	693a      	ldr	r2, [r7, #16]
 80037c8:	4013      	ands	r3, r2
 80037ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80037d2:	d019      	beq.n	8003808 <HAL_GPIO_Init+0x1ec>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	4a49      	ldr	r2, [pc, #292]	; (80038fc <HAL_GPIO_Init+0x2e0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d013      	beq.n	8003804 <HAL_GPIO_Init+0x1e8>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	4a48      	ldr	r2, [pc, #288]	; (8003900 <HAL_GPIO_Init+0x2e4>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00d      	beq.n	8003800 <HAL_GPIO_Init+0x1e4>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a47      	ldr	r2, [pc, #284]	; (8003904 <HAL_GPIO_Init+0x2e8>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d007      	beq.n	80037fc <HAL_GPIO_Init+0x1e0>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a46      	ldr	r2, [pc, #280]	; (8003908 <HAL_GPIO_Init+0x2ec>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d101      	bne.n	80037f8 <HAL_GPIO_Init+0x1dc>
 80037f4:	2304      	movs	r3, #4
 80037f6:	e008      	b.n	800380a <HAL_GPIO_Init+0x1ee>
 80037f8:	2307      	movs	r3, #7
 80037fa:	e006      	b.n	800380a <HAL_GPIO_Init+0x1ee>
 80037fc:	2303      	movs	r3, #3
 80037fe:	e004      	b.n	800380a <HAL_GPIO_Init+0x1ee>
 8003800:	2302      	movs	r3, #2
 8003802:	e002      	b.n	800380a <HAL_GPIO_Init+0x1ee>
 8003804:	2301      	movs	r3, #1
 8003806:	e000      	b.n	800380a <HAL_GPIO_Init+0x1ee>
 8003808:	2300      	movs	r3, #0
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	f002 0203 	and.w	r2, r2, #3
 8003810:	0092      	lsls	r2, r2, #2
 8003812:	4093      	lsls	r3, r2
 8003814:	693a      	ldr	r2, [r7, #16]
 8003816:	4313      	orrs	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800381a:	4937      	ldr	r1, [pc, #220]	; (80038f8 <HAL_GPIO_Init+0x2dc>)
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	089b      	lsrs	r3, r3, #2
 8003820:	3302      	adds	r3, #2
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003828:	4b38      	ldr	r3, [pc, #224]	; (800390c <HAL_GPIO_Init+0x2f0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	43db      	mvns	r3, r3
 8003832:	693a      	ldr	r2, [r7, #16]
 8003834:	4013      	ands	r3, r2
 8003836:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8003844:	693a      	ldr	r2, [r7, #16]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	4313      	orrs	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800384c:	4a2f      	ldr	r2, [pc, #188]	; (800390c <HAL_GPIO_Init+0x2f0>)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003852:	4b2e      	ldr	r3, [pc, #184]	; (800390c <HAL_GPIO_Init+0x2f0>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	43db      	mvns	r3, r3
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	4013      	ands	r3, r2
 8003860:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d003      	beq.n	8003876 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003876:	4a25      	ldr	r2, [pc, #148]	; (800390c <HAL_GPIO_Init+0x2f0>)
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800387c:	4b23      	ldr	r3, [pc, #140]	; (800390c <HAL_GPIO_Init+0x2f0>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	43db      	mvns	r3, r3
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4013      	ands	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80038a0:	4a1a      	ldr	r2, [pc, #104]	; (800390c <HAL_GPIO_Init+0x2f0>)
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80038a6:	4b19      	ldr	r3, [pc, #100]	; (800390c <HAL_GPIO_Init+0x2f0>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d003      	beq.n	80038ca <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4313      	orrs	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80038ca:	4a10      	ldr	r2, [pc, #64]	; (800390c <HAL_GPIO_Init+0x2f0>)
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	3301      	adds	r3, #1
 80038d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	fa22 f303 	lsr.w	r3, r2, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f47f aea3 	bne.w	800362c <HAL_GPIO_Init+0x10>
  }
}
 80038e6:	bf00      	nop
 80038e8:	bf00      	nop
 80038ea:	371c      	adds	r7, #28
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40021000 	.word	0x40021000
 80038f8:	40010000 	.word	0x40010000
 80038fc:	48000400 	.word	0x48000400
 8003900:	48000800 	.word	0x48000800
 8003904:	48000c00 	.word	0x48000c00
 8003908:	48001000 	.word	0x48001000
 800390c:	40010400 	.word	0x40010400

08003910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003910:	b480      	push	{r7}
 8003912:	b083      	sub	sp, #12
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	807b      	strh	r3, [r7, #2]
 800391c:	4613      	mov	r3, r2
 800391e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003920:	787b      	ldrb	r3, [r7, #1]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d003      	beq.n	800392e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003926:	887a      	ldrh	r2, [r7, #2]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800392c:	e002      	b.n	8003934 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800392e:	887a      	ldrh	r2, [r7, #2]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4603      	mov	r3, r0
 8003948:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800394a:	4b08      	ldr	r3, [pc, #32]	; (800396c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	4013      	ands	r3, r2
 8003952:	2b00      	cmp	r3, #0
 8003954:	d006      	beq.n	8003964 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003956:	4a05      	ldr	r2, [pc, #20]	; (800396c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003958:	88fb      	ldrh	r3, [r7, #6]
 800395a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	4618      	mov	r0, r3
 8003960:	f7fe fba6 	bl	80020b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003964:	bf00      	nop
 8003966:	3708      	adds	r7, #8
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40010400 	.word	0x40010400

08003970 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003970:	b480      	push	{r7}
 8003972:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003974:	4b04      	ldr	r3, [pc, #16]	; (8003988 <HAL_PWREx_GetVoltageRange+0x18>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800397c:	4618      	mov	r0, r3
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40007000 	.word	0x40007000

0800398c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800398c:	b480      	push	{r7}
 800398e:	b085      	sub	sp, #20
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800399a:	d130      	bne.n	80039fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800399c:	4b23      	ldr	r3, [pc, #140]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80039a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039a8:	d038      	beq.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80039b2:	4a1e      	ldr	r2, [pc, #120]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80039ba:	4b1d      	ldr	r3, [pc, #116]	; (8003a30 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2232      	movs	r2, #50	; 0x32
 80039c0:	fb02 f303 	mul.w	r3, r2, r3
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80039c6:	fba2 2303 	umull	r2, r3, r2, r3
 80039ca:	0c9b      	lsrs	r3, r3, #18
 80039cc:	3301      	adds	r3, #1
 80039ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039d0:	e002      	b.n	80039d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80039d8:	4b14      	ldr	r3, [pc, #80]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039da:	695b      	ldr	r3, [r3, #20]
 80039dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039e4:	d102      	bne.n	80039ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d1f2      	bne.n	80039d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f8:	d110      	bne.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e00f      	b.n	8003a1e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039fe:	4b0b      	ldr	r3, [pc, #44]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003a06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0a:	d007      	beq.n	8003a1c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003a0c:	4b07      	ldr	r3, [pc, #28]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003a14:	4a05      	ldr	r2, [pc, #20]	; (8003a2c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003a1a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40007000 	.word	0x40007000
 8003a30:	20000004 	.word	0x20000004
 8003a34:	431bde83 	.word	0x431bde83

08003a38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b088      	sub	sp, #32
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d102      	bne.n	8003a4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	f000 bc11 	b.w	800426e <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a4c:	4ba0      	ldr	r3, [pc, #640]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a56:	4b9e      	ldr	r3, [pc, #632]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f003 0310 	and.w	r3, r3, #16
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 80e4 	beq.w	8003c36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d007      	beq.n	8003a84 <HAL_RCC_OscConfig+0x4c>
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	2b0c      	cmp	r3, #12
 8003a78:	f040 808b 	bne.w	8003b92 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	f040 8087 	bne.w	8003b92 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a84:	4b92      	ldr	r3, [pc, #584]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d005      	beq.n	8003a9c <HAL_RCC_OscConfig+0x64>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	699b      	ldr	r3, [r3, #24]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e3e8      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1a      	ldr	r2, [r3, #32]
 8003aa0:	4b8b      	ldr	r3, [pc, #556]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0308 	and.w	r3, r3, #8
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d004      	beq.n	8003ab6 <HAL_RCC_OscConfig+0x7e>
 8003aac:	4b88      	ldr	r3, [pc, #544]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab4:	e005      	b.n	8003ac2 <HAL_RCC_OscConfig+0x8a>
 8003ab6:	4b86      	ldr	r3, [pc, #536]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003abc:	091b      	lsrs	r3, r3, #4
 8003abe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d223      	bcs.n	8003b0e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f000 fd7a 	bl	80045c4 <RCC_SetFlashLatencyFromMSIRange>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e3c9      	b.n	800426e <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ada:	4b7d      	ldr	r3, [pc, #500]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a7c      	ldr	r2, [pc, #496]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003ae0:	f043 0308 	orr.w	r3, r3, #8
 8003ae4:	6013      	str	r3, [r2, #0]
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4977      	ldr	r1, [pc, #476]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003af8:	4b75      	ldr	r3, [pc, #468]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	4972      	ldr	r1, [pc, #456]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
 8003b0c:	e025      	b.n	8003b5a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b0e:	4b70      	ldr	r3, [pc, #448]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6f      	ldr	r2, [pc, #444]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b14:	f043 0308 	orr.w	r3, r3, #8
 8003b18:	6013      	str	r3, [r2, #0]
 8003b1a:	4b6d      	ldr	r3, [pc, #436]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	496a      	ldr	r1, [pc, #424]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b2c:	4b68      	ldr	r3, [pc, #416]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	69db      	ldr	r3, [r3, #28]
 8003b38:	021b      	lsls	r3, r3, #8
 8003b3a:	4965      	ldr	r1, [pc, #404]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d109      	bne.n	8003b5a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 fd3a 	bl	80045c4 <RCC_SetFlashLatencyFromMSIRange>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e389      	b.n	800426e <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b5a:	f000 fc6f 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b5b      	ldr	r3, [pc, #364]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	495a      	ldr	r1, [pc, #360]	; (8003cd4 <HAL_RCC_OscConfig+0x29c>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	f003 031f 	and.w	r3, r3, #31
 8003b72:	fa22 f303 	lsr.w	r3, r2, r3
 8003b76:	4a58      	ldr	r2, [pc, #352]	; (8003cd8 <HAL_RCC_OscConfig+0x2a0>)
 8003b78:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b7a:	4b58      	ldr	r3, [pc, #352]	; (8003cdc <HAL_RCC_OscConfig+0x2a4>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fe fce6 	bl	8002550 <HAL_InitTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b88:	7bfb      	ldrb	r3, [r7, #15]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d052      	beq.n	8003c34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	e36d      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	699b      	ldr	r3, [r3, #24]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d032      	beq.n	8003c00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b9a:	4b4d      	ldr	r3, [pc, #308]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a4c      	ldr	r2, [pc, #304]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003ba0:	f043 0301 	orr.w	r3, r3, #1
 8003ba4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ba6:	f7fe fd23 	bl	80025f0 <HAL_GetTick>
 8003baa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bac:	e008      	b.n	8003bc0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bae:	f7fe fd1f 	bl	80025f0 <HAL_GetTick>
 8003bb2:	4602      	mov	r2, r0
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	1ad3      	subs	r3, r2, r3
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d901      	bls.n	8003bc0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e356      	b.n	800426e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003bc0:	4b43      	ldr	r3, [pc, #268]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0f0      	beq.n	8003bae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003bcc:	4b40      	ldr	r3, [pc, #256]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a3f      	ldr	r2, [pc, #252]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003bd2:	f043 0308 	orr.w	r3, r3, #8
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	4b3d      	ldr	r3, [pc, #244]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	493a      	ldr	r1, [pc, #232]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bea:	4b39      	ldr	r3, [pc, #228]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69db      	ldr	r3, [r3, #28]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	4935      	ldr	r1, [pc, #212]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	604b      	str	r3, [r1, #4]
 8003bfe:	e01a      	b.n	8003c36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003c00:	4b33      	ldr	r3, [pc, #204]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a32      	ldr	r2, [pc, #200]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003c0c:	f7fe fcf0 	bl	80025f0 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003c14:	f7fe fcec 	bl	80025f0 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e323      	b.n	800426e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003c26:	4b2a      	ldr	r3, [pc, #168]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1dc>
 8003c32:	e000      	b.n	8003c36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d073      	beq.n	8003d2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	2b08      	cmp	r3, #8
 8003c46:	d005      	beq.n	8003c54 <HAL_RCC_OscConfig+0x21c>
 8003c48:	69bb      	ldr	r3, [r7, #24]
 8003c4a:	2b0c      	cmp	r3, #12
 8003c4c:	d10e      	bne.n	8003c6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b03      	cmp	r3, #3
 8003c52:	d10b      	bne.n	8003c6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c54:	4b1e      	ldr	r3, [pc, #120]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d063      	beq.n	8003d28 <HAL_RCC_OscConfig+0x2f0>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d15f      	bne.n	8003d28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	e300      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c74:	d106      	bne.n	8003c84 <HAL_RCC_OscConfig+0x24c>
 8003c76:	4b16      	ldr	r3, [pc, #88]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6013      	str	r3, [r2, #0]
 8003c82:	e01d      	b.n	8003cc0 <HAL_RCC_OscConfig+0x288>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c8c:	d10c      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x270>
 8003c8e:	4b10      	ldr	r3, [pc, #64]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a0f      	ldr	r2, [pc, #60]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	4b0d      	ldr	r3, [pc, #52]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4a0c      	ldr	r2, [pc, #48]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003ca0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca4:	6013      	str	r3, [r2, #0]
 8003ca6:	e00b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x288>
 8003ca8:	4b09      	ldr	r3, [pc, #36]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a08      	ldr	r2, [pc, #32]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003cae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cb2:	6013      	str	r3, [r2, #0]
 8003cb4:	4b06      	ldr	r3, [pc, #24]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a05      	ldr	r2, [pc, #20]	; (8003cd0 <HAL_RCC_OscConfig+0x298>)
 8003cba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	685b      	ldr	r3, [r3, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d01b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fc92 	bl	80025f0 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cce:	e010      	b.n	8003cf2 <HAL_RCC_OscConfig+0x2ba>
 8003cd0:	40021000 	.word	0x40021000
 8003cd4:	08006208 	.word	0x08006208
 8003cd8:	20000004 	.word	0x20000004
 8003cdc:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce0:	f7fe fc86 	bl	80025f0 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b64      	cmp	r3, #100	; 0x64
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e2bd      	b.n	800426e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cf2:	4baf      	ldr	r3, [pc, #700]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d0f0      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x2a8>
 8003cfe:	e014      	b.n	8003d2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d00:	f7fe fc76 	bl	80025f0 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d08:	f7fe fc72 	bl	80025f0 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b64      	cmp	r3, #100	; 0x64
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e2a9      	b.n	800426e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d1a:	4ba5      	ldr	r3, [pc, #660]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x2d0>
 8003d26:	e000      	b.n	8003d2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d060      	beq.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b04      	cmp	r3, #4
 8003d3a:	d005      	beq.n	8003d48 <HAL_RCC_OscConfig+0x310>
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d119      	bne.n	8003d76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d116      	bne.n	8003d76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d48:	4b99      	ldr	r3, [pc, #612]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d005      	beq.n	8003d60 <HAL_RCC_OscConfig+0x328>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e286      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b93      	ldr	r3, [pc, #588]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	4990      	ldr	r1, [pc, #576]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d74:	e040      	b.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d023      	beq.n	8003dc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d7e:	4b8c      	ldr	r3, [pc, #560]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a8b      	ldr	r2, [pc, #556]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8a:	f7fe fc31 	bl	80025f0 <HAL_GetTick>
 8003d8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d92:	f7fe fc2d 	bl	80025f0 <HAL_GetTick>
 8003d96:	4602      	mov	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e264      	b.n	800426e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da4:	4b82      	ldr	r3, [pc, #520]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db0:	4b7f      	ldr	r3, [pc, #508]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	061b      	lsls	r3, r3, #24
 8003dbe:	497c      	ldr	r1, [pc, #496]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	604b      	str	r3, [r1, #4]
 8003dc4:	e018      	b.n	8003df8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc6:	4b7a      	ldr	r3, [pc, #488]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a79      	ldr	r2, [pc, #484]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003dcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd2:	f7fe fc0d 	bl	80025f0 <HAL_GetTick>
 8003dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003dda:	f7fe fc09 	bl	80025f0 <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e240      	b.n	800426e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dec:	4b70      	ldr	r3, [pc, #448]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d1f0      	bne.n	8003dda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d03c      	beq.n	8003e7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d01c      	beq.n	8003e46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e0c:	4b68      	ldr	r3, [pc, #416]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e12:	4a67      	ldr	r2, [pc, #412]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e14:	f043 0301 	orr.w	r3, r3, #1
 8003e18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1c:	f7fe fbe8 	bl	80025f0 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e24:	f7fe fbe4 	bl	80025f0 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e21b      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e36:	4b5e      	ldr	r3, [pc, #376]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d0ef      	beq.n	8003e24 <HAL_RCC_OscConfig+0x3ec>
 8003e44:	e01b      	b.n	8003e7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e46:	4b5a      	ldr	r3, [pc, #360]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e4c:	4a58      	ldr	r2, [pc, #352]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e56:	f7fe fbcb 	bl	80025f0 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e5c:	e008      	b.n	8003e70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e5e:	f7fe fbc7 	bl	80025f0 <HAL_GetTick>
 8003e62:	4602      	mov	r2, r0
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	1ad3      	subs	r3, r2, r3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d901      	bls.n	8003e70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	e1fe      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e70:	4b4f      	ldr	r3, [pc, #316]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d1ef      	bne.n	8003e5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80a6 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e90:	4b47      	ldr	r3, [pc, #284]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d10d      	bne.n	8003eb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e9c:	4b44      	ldr	r3, [pc, #272]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	4a43      	ldr	r2, [pc, #268]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003ea2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ea8:	4b41      	ldr	r3, [pc, #260]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eb0:	60bb      	str	r3, [r7, #8]
 8003eb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb8:	4b3e      	ldr	r3, [pc, #248]	; (8003fb4 <HAL_RCC_OscConfig+0x57c>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d118      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ec4:	4b3b      	ldr	r3, [pc, #236]	; (8003fb4 <HAL_RCC_OscConfig+0x57c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a3a      	ldr	r2, [pc, #232]	; (8003fb4 <HAL_RCC_OscConfig+0x57c>)
 8003eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ece:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed0:	f7fe fb8e 	bl	80025f0 <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ed8:	f7fe fb8a 	bl	80025f0 <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b02      	cmp	r3, #2
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e1c1      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eea:	4b32      	ldr	r3, [pc, #200]	; (8003fb4 <HAL_RCC_OscConfig+0x57c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d108      	bne.n	8003f10 <HAL_RCC_OscConfig+0x4d8>
 8003efe:	4b2c      	ldr	r3, [pc, #176]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f04:	4a2a      	ldr	r2, [pc, #168]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f0e:	e024      	b.n	8003f5a <HAL_RCC_OscConfig+0x522>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b05      	cmp	r3, #5
 8003f16:	d110      	bne.n	8003f3a <HAL_RCC_OscConfig+0x502>
 8003f18:	4b25      	ldr	r3, [pc, #148]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	4a24      	ldr	r2, [pc, #144]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f20:	f043 0304 	orr.w	r3, r3, #4
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f28:	4b21      	ldr	r3, [pc, #132]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f2e:	4a20      	ldr	r2, [pc, #128]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f38:	e00f      	b.n	8003f5a <HAL_RCC_OscConfig+0x522>
 8003f3a:	4b1d      	ldr	r3, [pc, #116]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f42:	f023 0301 	bic.w	r3, r3, #1
 8003f46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f4a:	4b19      	ldr	r3, [pc, #100]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	4a17      	ldr	r2, [pc, #92]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f52:	f023 0304 	bic.w	r3, r3, #4
 8003f56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d016      	beq.n	8003f90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f62:	f7fe fb45 	bl	80025f0 <HAL_GetTick>
 8003f66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f68:	e00a      	b.n	8003f80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6a:	f7fe fb41 	bl	80025f0 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e176      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f80:	4b0b      	ldr	r3, [pc, #44]	; (8003fb0 <HAL_RCC_OscConfig+0x578>)
 8003f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d0ed      	beq.n	8003f6a <HAL_RCC_OscConfig+0x532>
 8003f8e:	e01a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f90:	f7fe fb2e 	bl	80025f0 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f96:	e00f      	b.n	8003fb8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f98:	f7fe fb2a 	bl	80025f0 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d906      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e15f      	b.n	800426e <HAL_RCC_OscConfig+0x836>
 8003fae:	bf00      	nop
 8003fb0:	40021000 	.word	0x40021000
 8003fb4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb8:	4baa      	ldr	r3, [pc, #680]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8003fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fbe:	f003 0302 	and.w	r3, r3, #2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d1e8      	bne.n	8003f98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fc6:	7ffb      	ldrb	r3, [r7, #31]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d105      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fcc:	4ba5      	ldr	r3, [pc, #660]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8003fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd0:	4aa4      	ldr	r2, [pc, #656]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8003fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d03c      	beq.n	800405e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d01c      	beq.n	8004026 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003fec:	4b9d      	ldr	r3, [pc, #628]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8003fee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ff2:	4a9c      	ldr	r2, [pc, #624]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8003ff4:	f043 0301 	orr.w	r3, r3, #1
 8003ff8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffc:	f7fe faf8 	bl	80025f0 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004004:	f7fe faf4 	bl	80025f0 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b02      	cmp	r3, #2
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e12b      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004016:	4b93      	ldr	r3, [pc, #588]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004018:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0ef      	beq.n	8004004 <HAL_RCC_OscConfig+0x5cc>
 8004024:	e01b      	b.n	800405e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004026:	4b8f      	ldr	r3, [pc, #572]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402c:	4a8d      	ldr	r2, [pc, #564]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004036:	f7fe fadb 	bl	80025f0 <HAL_GetTick>
 800403a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800403c:	e008      	b.n	8004050 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800403e:	f7fe fad7 	bl	80025f0 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b02      	cmp	r3, #2
 800404a:	d901      	bls.n	8004050 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e10e      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004050:	4b84      	ldr	r3, [pc, #528]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004052:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1ef      	bne.n	800403e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	2b00      	cmp	r3, #0
 8004064:	f000 8102 	beq.w	800426c <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800406c:	2b02      	cmp	r3, #2
 800406e:	f040 80c5 	bne.w	80041fc <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004072:	4b7c      	ldr	r3, [pc, #496]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004074:	68db      	ldr	r3, [r3, #12]
 8004076:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f003 0203 	and.w	r2, r3, #3
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	429a      	cmp	r2, r3
 8004084:	d12c      	bne.n	80040e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004090:	3b01      	subs	r3, #1
 8004092:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004094:	429a      	cmp	r2, r3
 8004096:	d123      	bne.n	80040e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d11b      	bne.n	80040e0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d113      	bne.n	80040e0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	3b01      	subs	r3, #1
 80040c6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d109      	bne.n	80040e0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	3b01      	subs	r3, #1
 80040da:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040dc:	429a      	cmp	r2, r3
 80040de:	d067      	beq.n	80041b0 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	2b0c      	cmp	r3, #12
 80040e4:	d062      	beq.n	80041ac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80040e6:	4b5f      	ldr	r3, [pc, #380]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e0bb      	b.n	800426e <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80040f6:	4b5b      	ldr	r3, [pc, #364]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a5a      	ldr	r2, [pc, #360]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80040fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004100:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004102:	f7fe fa75 	bl	80025f0 <HAL_GetTick>
 8004106:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004108:	e008      	b.n	800411c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800410a:	f7fe fa71 	bl	80025f0 <HAL_GetTick>
 800410e:	4602      	mov	r2, r0
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b02      	cmp	r3, #2
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e0a8      	b.n	800426e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800411c:	4b51      	ldr	r3, [pc, #324]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d1f0      	bne.n	800410a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004128:	4b4e      	ldr	r3, [pc, #312]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4b4e      	ldr	r3, [pc, #312]	; (8004268 <HAL_RCC_OscConfig+0x830>)
 800412e:	4013      	ands	r3, r2
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004138:	3a01      	subs	r2, #1
 800413a:	0112      	lsls	r2, r2, #4
 800413c:	4311      	orrs	r1, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004142:	0212      	lsls	r2, r2, #8
 8004144:	4311      	orrs	r1, r2
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800414a:	0852      	lsrs	r2, r2, #1
 800414c:	3a01      	subs	r2, #1
 800414e:	0552      	lsls	r2, r2, #21
 8004150:	4311      	orrs	r1, r2
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004156:	0852      	lsrs	r2, r2, #1
 8004158:	3a01      	subs	r2, #1
 800415a:	0652      	lsls	r2, r2, #25
 800415c:	4311      	orrs	r1, r2
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004162:	06d2      	lsls	r2, r2, #27
 8004164:	430a      	orrs	r2, r1
 8004166:	493f      	ldr	r1, [pc, #252]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004168:	4313      	orrs	r3, r2
 800416a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800416c:	4b3d      	ldr	r3, [pc, #244]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a3c      	ldr	r2, [pc, #240]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004172:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004176:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004178:	4b3a      	ldr	r3, [pc, #232]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4a39      	ldr	r2, [pc, #228]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800417e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004182:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004184:	f7fe fa34 	bl	80025f0 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800418c:	f7fe fa30 	bl	80025f0 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b02      	cmp	r3, #2
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e067      	b.n	800426e <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800419e:	4b31      	ldr	r3, [pc, #196]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041aa:	e05f      	b.n	800426c <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e05e      	b.n	800426e <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041b0:	4b2c      	ldr	r3, [pc, #176]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d157      	bne.n	800426c <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80041bc:	4b29      	ldr	r3, [pc, #164]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a28      	ldr	r2, [pc, #160]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80041c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c8:	4b26      	ldr	r3, [pc, #152]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a25      	ldr	r2, [pc, #148]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80041d4:	f7fe fa0c 	bl	80025f0 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fe fa08 	bl	80025f0 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e03f      	b.n	800426e <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b1d      	ldr	r3, [pc, #116]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x7a4>
 80041fa:	e037      	b.n	800426c <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	2b0c      	cmp	r3, #12
 8004200:	d02d      	beq.n	800425e <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004202:	4b18      	ldr	r3, [pc, #96]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a17      	ldr	r2, [pc, #92]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004208:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800420c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800420e:	4b15      	ldr	r3, [pc, #84]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d105      	bne.n	8004226 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800421a:	4b12      	ldr	r3, [pc, #72]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	4a11      	ldr	r2, [pc, #68]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004220:	f023 0303 	bic.w	r3, r3, #3
 8004224:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004226:	4b0f      	ldr	r3, [pc, #60]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	4a0e      	ldr	r2, [pc, #56]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 800422c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004234:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fe f9db 	bl	80025f0 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800423e:	f7fe f9d7 	bl	80025f0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e00e      	b.n	800426e <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004250:	4b04      	ldr	r3, [pc, #16]	; (8004264 <HAL_RCC_OscConfig+0x82c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1f0      	bne.n	800423e <HAL_RCC_OscConfig+0x806>
 800425c:	e006      	b.n	800426c <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e005      	b.n	800426e <HAL_RCC_OscConfig+0x836>
 8004262:	bf00      	nop
 8004264:	40021000 	.word	0x40021000
 8004268:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 800426c:	2300      	movs	r3, #0
}
 800426e:	4618      	mov	r0, r3
 8004270:	3720      	adds	r7, #32
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}
 8004276:	bf00      	nop

08004278 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0c8      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800428c:	4b66      	ldr	r3, [pc, #408]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0307 	and.w	r3, r3, #7
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	429a      	cmp	r2, r3
 8004298:	d910      	bls.n	80042bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800429a:	4b63      	ldr	r3, [pc, #396]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f023 0207 	bic.w	r2, r3, #7
 80042a2:	4961      	ldr	r1, [pc, #388]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042aa:	4b5f      	ldr	r3, [pc, #380]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0307 	and.w	r3, r3, #7
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d001      	beq.n	80042bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	e0b0      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0301 	and.w	r3, r3, #1
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d04c      	beq.n	8004362 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042d0:	4b56      	ldr	r3, [pc, #344]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d121      	bne.n	8004320 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e09e      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d107      	bne.n	80042f8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e8:	4b50      	ldr	r3, [pc, #320]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d115      	bne.n	8004320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e092      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d107      	bne.n	8004310 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004300:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0302 	and.w	r3, r3, #2
 8004308:	2b00      	cmp	r3, #0
 800430a:	d109      	bne.n	8004320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e086      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004310:	4b46      	ldr	r3, [pc, #280]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e07e      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004320:	4b42      	ldr	r3, [pc, #264]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	f023 0203 	bic.w	r2, r3, #3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	493f      	ldr	r1, [pc, #252]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 800432e:	4313      	orrs	r3, r2
 8004330:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004332:	f7fe f95d 	bl	80025f0 <HAL_GetTick>
 8004336:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004338:	e00a      	b.n	8004350 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800433a:	f7fe f959 	bl	80025f0 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	f241 3288 	movw	r2, #5000	; 0x1388
 8004348:	4293      	cmp	r3, r2
 800434a:	d901      	bls.n	8004350 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e066      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004350:	4b36      	ldr	r3, [pc, #216]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	f003 020c 	and.w	r2, r3, #12
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	685b      	ldr	r3, [r3, #4]
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	429a      	cmp	r2, r3
 8004360:	d1eb      	bne.n	800433a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800436e:	4b2f      	ldr	r3, [pc, #188]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	492c      	ldr	r1, [pc, #176]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 800437c:	4313      	orrs	r3, r2
 800437e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004380:	4b29      	ldr	r3, [pc, #164]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	429a      	cmp	r2, r3
 800438c:	d210      	bcs.n	80043b0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438e:	4b26      	ldr	r3, [pc, #152]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f023 0207 	bic.w	r2, r3, #7
 8004396:	4924      	ldr	r1, [pc, #144]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	4313      	orrs	r3, r2
 800439c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800439e:	4b22      	ldr	r3, [pc, #136]	; (8004428 <HAL_RCC_ClockConfig+0x1b0>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d001      	beq.n	80043b0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e036      	b.n	800441e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 0304 	and.w	r3, r3, #4
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d008      	beq.n	80043ce <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80043bc:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4918      	ldr	r1, [pc, #96]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0308 	and.w	r3, r3, #8
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d009      	beq.n	80043ee <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80043da:	4b14      	ldr	r3, [pc, #80]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	4910      	ldr	r1, [pc, #64]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043ee:	f000 f825 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80043f2:	4602      	mov	r2, r0
 80043f4:	4b0d      	ldr	r3, [pc, #52]	; (800442c <HAL_RCC_ClockConfig+0x1b4>)
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	091b      	lsrs	r3, r3, #4
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	490c      	ldr	r1, [pc, #48]	; (8004430 <HAL_RCC_ClockConfig+0x1b8>)
 8004400:	5ccb      	ldrb	r3, [r1, r3]
 8004402:	f003 031f 	and.w	r3, r3, #31
 8004406:	fa22 f303 	lsr.w	r3, r2, r3
 800440a:	4a0a      	ldr	r2, [pc, #40]	; (8004434 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800440e:	4b0a      	ldr	r3, [pc, #40]	; (8004438 <HAL_RCC_ClockConfig+0x1c0>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7fe f89c 	bl	8002550 <HAL_InitTick>
 8004418:	4603      	mov	r3, r0
 800441a:	72fb      	strb	r3, [r7, #11]

  return status;
 800441c:	7afb      	ldrb	r3, [r7, #11]
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40022000 	.word	0x40022000
 800442c:	40021000 	.word	0x40021000
 8004430:	08006208 	.word	0x08006208
 8004434:	20000004 	.word	0x20000004
 8004438:	20000008 	.word	0x20000008

0800443c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800443c:	b480      	push	{r7}
 800443e:	b089      	sub	sp, #36	; 0x24
 8004440:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
 8004446:	2300      	movs	r3, #0
 8004448:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800444a:	4b3e      	ldr	r3, [pc, #248]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f003 030c 	and.w	r3, r3, #12
 8004452:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004454:	4b3b      	ldr	r3, [pc, #236]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d005      	beq.n	8004470 <HAL_RCC_GetSysClockFreq+0x34>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	2b0c      	cmp	r3, #12
 8004468:	d121      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b01      	cmp	r3, #1
 800446e:	d11e      	bne.n	80044ae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004470:	4b34      	ldr	r3, [pc, #208]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d107      	bne.n	800448c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800447c:	4b31      	ldr	r3, [pc, #196]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800447e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004482:	0a1b      	lsrs	r3, r3, #8
 8004484:	f003 030f 	and.w	r3, r3, #15
 8004488:	61fb      	str	r3, [r7, #28]
 800448a:	e005      	b.n	8004498 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <HAL_RCC_GetSysClockFreq+0x10c>)
 800449a:	69fb      	ldr	r3, [r7, #28]
 800449c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044a0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10d      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80044ac:	e00a      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d102      	bne.n	80044ba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044b4:	4b25      	ldr	r3, [pc, #148]	; (800454c <HAL_RCC_GetSysClockFreq+0x110>)
 80044b6:	61bb      	str	r3, [r7, #24]
 80044b8:	e004      	b.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b08      	cmp	r3, #8
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044c0:	4b23      	ldr	r3, [pc, #140]	; (8004550 <HAL_RCC_GetSysClockFreq+0x114>)
 80044c2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	2b0c      	cmp	r3, #12
 80044c8:	d134      	bne.n	8004534 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044ca:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	f003 0303 	and.w	r3, r3, #3
 80044d2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d003      	beq.n	80044e2 <HAL_RCC_GetSysClockFreq+0xa6>
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2b03      	cmp	r3, #3
 80044de:	d003      	beq.n	80044e8 <HAL_RCC_GetSysClockFreq+0xac>
 80044e0:	e005      	b.n	80044ee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <HAL_RCC_GetSysClockFreq+0x110>)
 80044e4:	617b      	str	r3, [r7, #20]
      break;
 80044e6:	e005      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <HAL_RCC_GetSysClockFreq+0x114>)
 80044ea:	617b      	str	r3, [r7, #20]
      break;
 80044ec:	e002      	b.n	80044f4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	617b      	str	r3, [r7, #20]
      break;
 80044f2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044f4:	4b13      	ldr	r3, [pc, #76]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	091b      	lsrs	r3, r3, #4
 80044fa:	f003 0307 	and.w	r3, r3, #7
 80044fe:	3301      	adds	r3, #1
 8004500:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004502:	4b10      	ldr	r3, [pc, #64]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	fb02 f203 	mul.w	r2, r2, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_RCC_GetSysClockFreq+0x108>)
 800451c:	68db      	ldr	r3, [r3, #12]
 800451e:	0e5b      	lsrs	r3, r3, #25
 8004520:	f003 0303 	and.w	r3, r3, #3
 8004524:	3301      	adds	r3, #1
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004532:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004534:	69bb      	ldr	r3, [r7, #24]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3724      	adds	r7, #36	; 0x24
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	08006220 	.word	0x08006220
 800454c:	00f42400 	.word	0x00f42400
 8004550:	007a1200 	.word	0x007a1200

08004554 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004554:	b480      	push	{r7}
 8004556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004558:	4b03      	ldr	r3, [pc, #12]	; (8004568 <HAL_RCC_GetHCLKFreq+0x14>)
 800455a:	681b      	ldr	r3, [r3, #0]
}
 800455c:	4618      	mov	r0, r3
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000004 	.word	0x20000004

0800456c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004570:	f7ff fff0 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 8004574:	4602      	mov	r2, r0
 8004576:	4b06      	ldr	r3, [pc, #24]	; (8004590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	4904      	ldr	r1, [pc, #16]	; (8004594 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004582:	5ccb      	ldrb	r3, [r1, r3]
 8004584:	f003 031f 	and.w	r3, r3, #31
 8004588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800458c:	4618      	mov	r0, r3
 800458e:	bd80      	pop	{r7, pc}
 8004590:	40021000 	.word	0x40021000
 8004594:	08006218 	.word	0x08006218

08004598 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800459c:	f7ff ffda 	bl	8004554 <HAL_RCC_GetHCLKFreq>
 80045a0:	4602      	mov	r2, r0
 80045a2:	4b06      	ldr	r3, [pc, #24]	; (80045bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	0adb      	lsrs	r3, r3, #11
 80045a8:	f003 0307 	and.w	r3, r3, #7
 80045ac:	4904      	ldr	r1, [pc, #16]	; (80045c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80045ae:	5ccb      	ldrb	r3, [r1, r3]
 80045b0:	f003 031f 	and.w	r3, r3, #31
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	08006218 	.word	0x08006218

080045c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b086      	sub	sp, #24
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80045d0:	4b2a      	ldr	r3, [pc, #168]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d003      	beq.n	80045e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80045dc:	f7ff f9c8 	bl	8003970 <HAL_PWREx_GetVoltageRange>
 80045e0:	6178      	str	r0, [r7, #20]
 80045e2:	e014      	b.n	800460e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80045e4:	4b25      	ldr	r3, [pc, #148]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045e8:	4a24      	ldr	r2, [pc, #144]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ee:	6593      	str	r3, [r2, #88]	; 0x58
 80045f0:	4b22      	ldr	r3, [pc, #136]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80045f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045f8:	60fb      	str	r3, [r7, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80045fc:	f7ff f9b8 	bl	8003970 <HAL_PWREx_GetVoltageRange>
 8004600:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004602:	4b1e      	ldr	r3, [pc, #120]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004606:	4a1d      	ldr	r2, [pc, #116]	; (800467c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004608:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800460c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004614:	d10b      	bne.n	800462e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2b80      	cmp	r3, #128	; 0x80
 800461a:	d919      	bls.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2ba0      	cmp	r3, #160	; 0xa0
 8004620:	d902      	bls.n	8004628 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004622:	2302      	movs	r3, #2
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e013      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004628:	2301      	movs	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
 800462c:	e010      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b80      	cmp	r3, #128	; 0x80
 8004632:	d902      	bls.n	800463a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004634:	2303      	movs	r3, #3
 8004636:	613b      	str	r3, [r7, #16]
 8004638:	e00a      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b80      	cmp	r3, #128	; 0x80
 800463e:	d102      	bne.n	8004646 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004640:	2302      	movs	r3, #2
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	e004      	b.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2b70      	cmp	r3, #112	; 0x70
 800464a:	d101      	bne.n	8004650 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800464c:	2301      	movs	r3, #1
 800464e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 0207 	bic.w	r2, r3, #7
 8004658:	4909      	ldr	r1, [pc, #36]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4313      	orrs	r3, r2
 800465e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004660:	4b07      	ldr	r3, [pc, #28]	; (8004680 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	693a      	ldr	r2, [r7, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d001      	beq.n	8004672 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	40021000 	.word	0x40021000
 8004680:	40022000 	.word	0x40022000

08004684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b086      	sub	sp, #24
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800468c:	2300      	movs	r3, #0
 800468e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004690:	2300      	movs	r3, #0
 8004692:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800469c:	2b00      	cmp	r3, #0
 800469e:	d031      	beq.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046a8:	d01a      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80046aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80046ae:	d814      	bhi.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x56>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d009      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80046b4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80046b8:	d10f      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80046ba:	4b5d      	ldr	r3, [pc, #372]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	4a5c      	ldr	r2, [pc, #368]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046c6:	e00c      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	3304      	adds	r3, #4
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fa44 	bl	8004b5c <RCCEx_PLLSAI1_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80046d8:	e003      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046da:	2301      	movs	r3, #1
 80046dc:	74fb      	strb	r3, [r7, #19]
      break;
 80046de:	e000      	b.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80046e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046e2:	7cfb      	ldrb	r3, [r7, #19]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10b      	bne.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80046e8:	4b51      	ldr	r3, [pc, #324]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046f6:	494e      	ldr	r1, [pc, #312]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80046fe:	e001      	b.n	8004704 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	7cfb      	ldrb	r3, [r7, #19]
 8004702:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 809e 	beq.w	800484e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004712:	2300      	movs	r3, #0
 8004714:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004716:	4b46      	ldr	r3, [pc, #280]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800471a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004722:	2301      	movs	r3, #1
 8004724:	e000      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004726:	2300      	movs	r3, #0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00d      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472c:	4b40      	ldr	r3, [pc, #256]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800472e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004730:	4a3f      	ldr	r2, [pc, #252]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004736:	6593      	str	r3, [r2, #88]	; 0x58
 8004738:	4b3d      	ldr	r3, [pc, #244]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800473a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004740:	60bb      	str	r3, [r7, #8]
 8004742:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004744:	2301      	movs	r3, #1
 8004746:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004748:	4b3a      	ldr	r3, [pc, #232]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a39      	ldr	r2, [pc, #228]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800474e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004752:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004754:	f7fd ff4c 	bl	80025f0 <HAL_GetTick>
 8004758:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800475a:	e009      	b.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800475c:	f7fd ff48 	bl	80025f0 <HAL_GetTick>
 8004760:	4602      	mov	r2, r0
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1ad3      	subs	r3, r2, r3
 8004766:	2b02      	cmp	r3, #2
 8004768:	d902      	bls.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	74fb      	strb	r3, [r7, #19]
        break;
 800476e:	e005      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004770:	4b30      	ldr	r3, [pc, #192]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004778:	2b00      	cmp	r3, #0
 800477a:	d0ef      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800477c:	7cfb      	ldrb	r3, [r7, #19]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d15a      	bne.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800478c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01e      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004798:	697a      	ldr	r2, [r7, #20]
 800479a:	429a      	cmp	r2, r3
 800479c:	d019      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800479e:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047a8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047ba:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047ca:	4a19      	ldr	r2, [pc, #100]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d016      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047dc:	f7fd ff08 	bl	80025f0 <HAL_GetTick>
 80047e0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047e2:	e00b      	b.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047e4:	f7fd ff04 	bl	80025f0 <HAL_GetTick>
 80047e8:	4602      	mov	r2, r0
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d902      	bls.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	74fb      	strb	r3, [r7, #19]
            break;
 80047fa:	e006      	b.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047fc:	4b0c      	ldr	r3, [pc, #48]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ec      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800480a:	7cfb      	ldrb	r3, [r7, #19]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10b      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800481e:	4904      	ldr	r1, [pc, #16]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004826:	e009      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
 800482c:	e006      	b.n	800483c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800482e:	bf00      	nop
 8004830:	40021000 	.word	0x40021000
 8004834:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004838:	7cfb      	ldrb	r3, [r7, #19]
 800483a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800483c:	7c7b      	ldrb	r3, [r7, #17]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d105      	bne.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004842:	4b9e      	ldr	r3, [pc, #632]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004846:	4a9d      	ldr	r2, [pc, #628]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800484c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800485a:	4b98      	ldr	r3, [pc, #608]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800485c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004860:	f023 0203 	bic.w	r2, r3, #3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a1b      	ldr	r3, [r3, #32]
 8004868:	4994      	ldr	r1, [pc, #592]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800487c:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800487e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004882:	f023 020c 	bic.w	r2, r3, #12
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	498c      	ldr	r1, [pc, #560]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f003 0304 	and.w	r3, r3, #4
 800489a:	2b00      	cmp	r3, #0
 800489c:	d00a      	beq.n	80048b4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800489e:	4b87      	ldr	r3, [pc, #540]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ac:	4983      	ldr	r1, [pc, #524]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d00a      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048c0:	4b7e      	ldr	r3, [pc, #504]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ce:	497b      	ldr	r1, [pc, #492]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 0320 	and.w	r3, r3, #32
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00a      	beq.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048e2:	4b76      	ldr	r3, [pc, #472]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	4972      	ldr	r1, [pc, #456]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004900:	2b00      	cmp	r3, #0
 8004902:	d00a      	beq.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004904:	4b6d      	ldr	r3, [pc, #436]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004912:	496a      	ldr	r1, [pc, #424]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004914:	4313      	orrs	r3, r2
 8004916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004926:	4b65      	ldr	r3, [pc, #404]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004934:	4961      	ldr	r1, [pc, #388]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004936:	4313      	orrs	r3, r2
 8004938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004944:	2b00      	cmp	r3, #0
 8004946:	d00a      	beq.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004948:	4b5c      	ldr	r3, [pc, #368]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800494a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800494e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004956:	4959      	ldr	r1, [pc, #356]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004958:	4313      	orrs	r3, r2
 800495a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00a      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800496a:	4b54      	ldr	r3, [pc, #336]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800496c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004970:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004978:	4950      	ldr	r1, [pc, #320]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800497a:	4313      	orrs	r3, r2
 800497c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00a      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800498c:	4b4b      	ldr	r3, [pc, #300]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004992:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499a:	4948      	ldr	r1, [pc, #288]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800499c:	4313      	orrs	r3, r2
 800499e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80049ae:	4b43      	ldr	r3, [pc, #268]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80049b4:	f023 0203 	bic.w	r2, r3, #3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049bc:	493f      	ldr	r1, [pc, #252]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d028      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049d0:	4b3a      	ldr	r3, [pc, #232]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049de:	4937      	ldr	r1, [pc, #220]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049ee:	d106      	bne.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f0:	4b32      	ldr	r3, [pc, #200]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a31      	ldr	r2, [pc, #196]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80049f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fa:	60d3      	str	r3, [r2, #12]
 80049fc:	e011      	b.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a06:	d10c      	bne.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 f8a4 	bl	8004b5c <RCCEx_PLLSAI1_Config>
 8004a14:	4603      	mov	r3, r0
 8004a16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a18:	7cfb      	ldrb	r3, [r7, #19]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d001      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8004a1e:	7cfb      	ldrb	r3, [r7, #19]
 8004a20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d028      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a2e:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a34:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a3c:	491f      	ldr	r1, [pc, #124]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a4c:	d106      	bne.n	8004a5c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a4e:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	4a1a      	ldr	r2, [pc, #104]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a58:	60d3      	str	r3, [r2, #12]
 8004a5a:	e011      	b.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a64:	d10c      	bne.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	2101      	movs	r1, #1
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 f875 	bl	8004b5c <RCCEx_PLLSAI1_Config>
 8004a72:	4603      	mov	r3, r0
 8004a74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a76:	7cfb      	ldrb	r3, [r7, #19]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8004a7c:	7cfb      	ldrb	r3, [r7, #19]
 8004a7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d02b      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a8c:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	4908      	ldr	r1, [pc, #32]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004aaa:	d109      	bne.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aac:	4b03      	ldr	r3, [pc, #12]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	4a02      	ldr	r2, [pc, #8]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004ab2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab6:	60d3      	str	r3, [r2, #12]
 8004ab8:	e014      	b.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8004aba:	bf00      	nop
 8004abc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ac8:	d10c      	bne.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	3304      	adds	r3, #4
 8004ace:	2101      	movs	r1, #1
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f000 f843 	bl	8004b5c <RCCEx_PLLSAI1_Config>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ada:	7cfb      	ldrb	r3, [r7, #19]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d001      	beq.n	8004ae4 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01c      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af0:	4b19      	ldr	r3, [pc, #100]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004afe:	4916      	ldr	r1, [pc, #88]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b0e:	d10c      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3304      	adds	r3, #4
 8004b14:	2102      	movs	r1, #2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 f820 	bl	8004b5c <RCCEx_PLLSAI1_Config>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b20:	7cfb      	ldrb	r3, [r7, #19]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d001      	beq.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8004b26:	7cfb      	ldrb	r3, [r7, #19]
 8004b28:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b36:	4b08      	ldr	r3, [pc, #32]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b44:	4904      	ldr	r1, [pc, #16]	; (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8004b46:	4313      	orrs	r3, r2
 8004b48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004b4c:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40021000 	.word	0x40021000

08004b5c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b084      	sub	sp, #16
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	6078      	str	r0, [r7, #4]
 8004b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b6a:	4b74      	ldr	r3, [pc, #464]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	f003 0303 	and.w	r3, r3, #3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d018      	beq.n	8004ba8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004b76:	4b71      	ldr	r3, [pc, #452]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b78:	68db      	ldr	r3, [r3, #12]
 8004b7a:	f003 0203 	and.w	r2, r3, #3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	429a      	cmp	r2, r3
 8004b84:	d10d      	bne.n	8004ba2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
       ||
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d009      	beq.n	8004ba2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004b8e:	4b6b      	ldr	r3, [pc, #428]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	091b      	lsrs	r3, r3, #4
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
       ||
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d047      	beq.n	8004c32 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	73fb      	strb	r3, [r7, #15]
 8004ba6:	e044      	b.n	8004c32 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2b03      	cmp	r3, #3
 8004bae:	d018      	beq.n	8004be2 <RCCEx_PLLSAI1_Config+0x86>
 8004bb0:	2b03      	cmp	r3, #3
 8004bb2:	d825      	bhi.n	8004c00 <RCCEx_PLLSAI1_Config+0xa4>
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	d002      	beq.n	8004bbe <RCCEx_PLLSAI1_Config+0x62>
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d009      	beq.n	8004bd0 <RCCEx_PLLSAI1_Config+0x74>
 8004bbc:	e020      	b.n	8004c00 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004bbe:	4b5f      	ldr	r3, [pc, #380]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d11d      	bne.n	8004c06 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004bce:	e01a      	b.n	8004c06 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004bd0:	4b5a      	ldr	r3, [pc, #360]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d116      	bne.n	8004c0a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004be0:	e013      	b.n	8004c0a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004be2:	4b56      	ldr	r3, [pc, #344]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10f      	bne.n	8004c0e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004bee:	4b53      	ldr	r3, [pc, #332]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004bfe:	e006      	b.n	8004c0e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      break;
 8004c04:	e004      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c06:	bf00      	nop
 8004c08:	e002      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c0a:	bf00      	nop
 8004c0c:	e000      	b.n	8004c10 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c0e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c10:	7bfb      	ldrb	r3, [r7, #15]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10d      	bne.n	8004c32 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c16:	4b49      	ldr	r3, [pc, #292]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6819      	ldr	r1, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	430b      	orrs	r3, r1
 8004c2c:	4943      	ldr	r1, [pc, #268]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d17c      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c38:	4b40      	ldr	r3, [pc, #256]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a3f      	ldr	r2, [pc, #252]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c3e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004c42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c44:	f7fd fcd4 	bl	80025f0 <HAL_GetTick>
 8004c48:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c4a:	e009      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c4c:	f7fd fcd0 	bl	80025f0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d902      	bls.n	8004c60 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	73fb      	strb	r3, [r7, #15]
        break;
 8004c5e:	e005      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004c60:	4b36      	ldr	r3, [pc, #216]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ef      	bne.n	8004c4c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d15f      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d110      	bne.n	8004c9a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c78:	4b30      	ldr	r3, [pc, #192]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004c80:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	6892      	ldr	r2, [r2, #8]
 8004c88:	0211      	lsls	r1, r2, #8
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68d2      	ldr	r2, [r2, #12]
 8004c8e:	06d2      	lsls	r2, r2, #27
 8004c90:	430a      	orrs	r2, r1
 8004c92:	492a      	ldr	r1, [pc, #168]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	610b      	str	r3, [r1, #16]
 8004c98:	e027      	b.n	8004cea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d112      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004ca0:	4b26      	ldr	r3, [pc, #152]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004ca8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6892      	ldr	r2, [r2, #8]
 8004cb0:	0211      	lsls	r1, r2, #8
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6912      	ldr	r2, [r2, #16]
 8004cb6:	0852      	lsrs	r2, r2, #1
 8004cb8:	3a01      	subs	r2, #1
 8004cba:	0552      	lsls	r2, r2, #21
 8004cbc:	430a      	orrs	r2, r1
 8004cbe:	491f      	ldr	r1, [pc, #124]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	610b      	str	r3, [r1, #16]
 8004cc4:	e011      	b.n	8004cea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cc6:	4b1d      	ldr	r3, [pc, #116]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004cce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	6892      	ldr	r2, [r2, #8]
 8004cd6:	0211      	lsls	r1, r2, #8
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6952      	ldr	r2, [r2, #20]
 8004cdc:	0852      	lsrs	r2, r2, #1
 8004cde:	3a01      	subs	r2, #1
 8004ce0:	0652      	lsls	r2, r2, #25
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	4915      	ldr	r1, [pc, #84]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004cea:	4b14      	ldr	r3, [pc, #80]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a13      	ldr	r2, [pc, #76]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004cf0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cf6:	f7fd fc7b 	bl	80025f0 <HAL_GetTick>
 8004cfa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004cfc:	e009      	b.n	8004d12 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cfe:	f7fd fc77 	bl	80025f0 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d902      	bls.n	8004d12 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	73fb      	strb	r3, [r7, #15]
          break;
 8004d10:	e005      	b.n	8004d1e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d12:	4b0a      	ldr	r3, [pc, #40]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0ef      	beq.n	8004cfe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d106      	bne.n	8004d32 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d24:	4b05      	ldr	r3, [pc, #20]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d26:	691a      	ldr	r2, [r3, #16]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	699b      	ldr	r3, [r3, #24]
 8004d2c:	4903      	ldr	r1, [pc, #12]	; (8004d3c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	40021000 	.word	0x40021000

08004d40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d101      	bne.n	8004d52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e049      	b.n	8004de6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d106      	bne.n	8004d6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f7fd fa78 	bl	800225c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2202      	movs	r2, #2
 8004d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681a      	ldr	r2, [r3, #0]
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	3304      	adds	r3, #4
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	4610      	mov	r0, r2
 8004d80:	f000 f97c 	bl	800507c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2201      	movs	r2, #1
 8004d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2201      	movs	r2, #1
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004de4:	2300      	movs	r3, #0
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d122      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d11b      	bne.n	8004e4a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f06f 0202 	mvn.w	r2, #2
 8004e1a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	f003 0303 	and.w	r3, r3, #3
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d003      	beq.n	8004e38 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f000 f905 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004e36:	e005      	b.n	8004e44 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f8f7 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f908 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691b      	ldr	r3, [r3, #16]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d122      	bne.n	8004e9e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d11b      	bne.n	8004e9e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f06f 0204 	mvn.w	r2, #4
 8004e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d003      	beq.n	8004e8c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f000 f8db 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004e8a:	e005      	b.n	8004e98 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f8cd 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 f8de 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	691b      	ldr	r3, [r3, #16]
 8004ea4:	f003 0308 	and.w	r3, r3, #8
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d122      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	f003 0308 	and.w	r3, r3, #8
 8004eb6:	2b08      	cmp	r3, #8
 8004eb8:	d11b      	bne.n	8004ef2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f06f 0208 	mvn.w	r2, #8
 8004ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2204      	movs	r2, #4
 8004ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	69db      	ldr	r3, [r3, #28]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d003      	beq.n	8004ee0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f000 f8b1 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004ede:	e005      	b.n	8004eec <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f8a3 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 f8b4 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	2b10      	cmp	r3, #16
 8004efe:	d122      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	f003 0310 	and.w	r3, r3, #16
 8004f0a:	2b10      	cmp	r3, #16
 8004f0c:	d11b      	bne.n	8004f46 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f06f 0210 	mvn.w	r2, #16
 8004f16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d003      	beq.n	8004f34 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f887 	bl	8005040 <HAL_TIM_IC_CaptureCallback>
 8004f32:	e005      	b.n	8004f40 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f879 	bl	800502c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f88a 	bl	8005054 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	d10e      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d107      	bne.n	8004f72 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f06f 0201 	mvn.w	r2, #1
 8004f6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7fd f881 	bl	8002074 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691b      	ldr	r3, [r3, #16]
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b80      	cmp	r3, #128	; 0x80
 8004f7e:	d10e      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f8a:	2b80      	cmp	r3, #128	; 0x80
 8004f8c:	d107      	bne.n	8004f9e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f000 f955 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	691b      	ldr	r3, [r3, #16]
 8004fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fac:	d10e      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb8:	2b80      	cmp	r3, #128	; 0x80
 8004fba:	d107      	bne.n	8004fcc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 f948 	bl	800525c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd6:	2b40      	cmp	r3, #64	; 0x40
 8004fd8:	d10e      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fe4:	2b40      	cmp	r3, #64	; 0x40
 8004fe6:	d107      	bne.n	8004ff8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 f838 	bl	8005068 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f003 0320 	and.w	r3, r3, #32
 8005002:	2b20      	cmp	r3, #32
 8005004:	d10e      	bne.n	8005024 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b20      	cmp	r3, #32
 8005012:	d107      	bne.n	8005024 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f06f 0220 	mvn.w	r2, #32
 800501c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f908 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005024:	bf00      	nop
 8005026:	3708      	adds	r7, #8
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a2e      	ldr	r2, [pc, #184]	; (8005148 <TIM_Base_SetConfig+0xcc>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d007      	beq.n	80050a4 <TIM_Base_SetConfig+0x28>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800509a:	d003      	beq.n	80050a4 <TIM_Base_SetConfig+0x28>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a2b      	ldr	r2, [pc, #172]	; (800514c <TIM_Base_SetConfig+0xd0>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d108      	bne.n	80050b6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4313      	orrs	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a23      	ldr	r2, [pc, #140]	; (8005148 <TIM_Base_SetConfig+0xcc>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00f      	beq.n	80050de <TIM_Base_SetConfig+0x62>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c4:	d00b      	beq.n	80050de <TIM_Base_SetConfig+0x62>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a20      	ldr	r2, [pc, #128]	; (800514c <TIM_Base_SetConfig+0xd0>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d007      	beq.n	80050de <TIM_Base_SetConfig+0x62>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a1f      	ldr	r2, [pc, #124]	; (8005150 <TIM_Base_SetConfig+0xd4>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d003      	beq.n	80050de <TIM_Base_SetConfig+0x62>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a1e      	ldr	r2, [pc, #120]	; (8005154 <TIM_Base_SetConfig+0xd8>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d108      	bne.n	80050f0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	68fa      	ldr	r2, [r7, #12]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050f6:	683b      	ldr	r3, [r7, #0]
 80050f8:	695b      	ldr	r3, [r3, #20]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	4a0c      	ldr	r2, [pc, #48]	; (8005148 <TIM_Base_SetConfig+0xcc>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d007      	beq.n	800512c <TIM_Base_SetConfig+0xb0>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	4a0c      	ldr	r2, [pc, #48]	; (8005150 <TIM_Base_SetConfig+0xd4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d003      	beq.n	800512c <TIM_Base_SetConfig+0xb0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	4a0b      	ldr	r2, [pc, #44]	; (8005154 <TIM_Base_SetConfig+0xd8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d103      	bne.n	8005134 <TIM_Base_SetConfig+0xb8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	691a      	ldr	r2, [r3, #16]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	615a      	str	r2, [r3, #20]
}
 800513a:	bf00      	nop
 800513c:	3714      	adds	r7, #20
 800513e:	46bd      	mov	sp, r7
 8005140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	40012c00 	.word	0x40012c00
 800514c:	40000400 	.word	0x40000400
 8005150:	40014000 	.word	0x40014000
 8005154:	40014400 	.word	0x40014400

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e054      	b.n	800521a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a24      	ldr	r2, [pc, #144]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d108      	bne.n	80051ac <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80051a0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	4313      	orrs	r3, r2
 80051bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68fa      	ldr	r2, [r7, #12]
 80051c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a17      	ldr	r2, [pc, #92]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	d00e      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d8:	d009      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	4a13      	ldr	r2, [pc, #76]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d004      	beq.n	80051ee <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4a11      	ldr	r2, [pc, #68]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d10c      	bne.n	8005208 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	68ba      	ldr	r2, [r7, #8]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005218:	2300      	movs	r3, #0
}
 800521a:	4618      	mov	r0, r3
 800521c:	3714      	adds	r7, #20
 800521e:	46bd      	mov	sp, r7
 8005220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40000400 	.word	0x40000400
 8005230:	40014000 	.word	0x40014000

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d101      	bne.n	8005282 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527e:	2301      	movs	r3, #1
 8005280:	e040      	b.n	8005304 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fd f824 	bl	80022e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	; 0x24
 800529c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fae2 	bl	8005878 <UART_SetConfig>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e022      	b.n	8005304 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 fd32 	bl	8005d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 fdb9 	bl	8005e74 <UART_CheckIdleState>
 8005302:	4603      	mov	r3, r0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005320:	2b20      	cmp	r3, #32
 8005322:	f040 8082 	bne.w	800542a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d002      	beq.n	8005332 <HAL_UART_Transmit+0x26>
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e07a      	b.n	800542c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_UART_Transmit+0x38>
 8005340:	2302      	movs	r3, #2
 8005342:	e073      	b.n	800542c <HAL_UART_Transmit+0x120>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2200      	movs	r2, #0
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2221      	movs	r2, #33	; 0x21
 8005358:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535a:	f7fd f949 	bl	80025f0 <HAL_GetTick>
 800535e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	88fa      	ldrh	r2, [r7, #6]
 8005364:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	88fa      	ldrh	r2, [r7, #6]
 800536c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005378:	d108      	bne.n	800538c <HAL_UART_Transmit+0x80>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d104      	bne.n	800538c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	e003      	b.n	8005394 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005390:	2300      	movs	r3, #0
 8005392:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800539c:	e02d      	b.n	80053fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2200      	movs	r2, #0
 80053a6:	2180      	movs	r1, #128	; 0x80
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 fdac 	bl	8005f06 <UART_WaitOnFlagUntilTimeout>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d001      	beq.n	80053b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e039      	b.n	800542c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d10b      	bne.n	80053d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053be:	69bb      	ldr	r3, [r7, #24]
 80053c0:	881a      	ldrh	r2, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ca:	b292      	uxth	r2, r2
 80053cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	3302      	adds	r3, #2
 80053d2:	61bb      	str	r3, [r7, #24]
 80053d4:	e008      	b.n	80053e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	781a      	ldrb	r2, [r3, #0]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	b292      	uxth	r2, r2
 80053e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	3301      	adds	r3, #1
 80053e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	3b01      	subs	r3, #1
 80053f2:	b29a      	uxth	r2, r3
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005400:	b29b      	uxth	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1cb      	bne.n	800539e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	2200      	movs	r2, #0
 800540e:	2140      	movs	r1, #64	; 0x40
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fd78 	bl	8005f06 <UART_WaitOnFlagUntilTimeout>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d001      	beq.n	8005420 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e005      	b.n	800542c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005426:	2300      	movs	r3, #0
 8005428:	e000      	b.n	800542c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800542a:	2302      	movs	r3, #2
  }
}
 800542c:	4618      	mov	r0, r3
 800542e:	3720      	adds	r7, #32
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005454:	69fa      	ldr	r2, [r7, #28]
 8005456:	f640 030f 	movw	r3, #2063	; 0x80f
 800545a:	4013      	ands	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d113      	bne.n	800548c <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00e      	beq.n	800548c <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	f003 0320 	and.w	r3, r3, #32
 8005474:	2b00      	cmp	r3, #0
 8005476:	d009      	beq.n	800548c <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800547c:	2b00      	cmp	r3, #0
 800547e:	f000 81ce 	beq.w	800581e <HAL_UART_IRQHandler+0x3ea>
      {
        huart->RxISR(huart);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	4798      	blx	r3
      }
      return;
 800548a:	e1c8      	b.n	800581e <HAL_UART_IRQHandler+0x3ea>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 80e3 	beq.w	800565a <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	2b00      	cmp	r3, #0
 800549c:	d105      	bne.n	80054aa <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	4ba6      	ldr	r3, [pc, #664]	; (800573c <HAL_UART_IRQHandler+0x308>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f000 80d8 	beq.w	800565a <HAL_UART_IRQHandler+0x226>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d010      	beq.n	80054d6 <HAL_UART_IRQHandler+0xa2>
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2201      	movs	r2, #1
 80054c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054cc:	f043 0201 	orr.w	r2, r3, #1
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	f003 0302 	and.w	r3, r3, #2
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d010      	beq.n	8005502 <HAL_UART_IRQHandler+0xce>
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f003 0301 	and.w	r3, r3, #1
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2202      	movs	r2, #2
 80054f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054f8:	f043 0204 	orr.w	r2, r3, #4
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005502:	69fb      	ldr	r3, [r7, #28]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b00      	cmp	r3, #0
 800550a:	d010      	beq.n	800552e <HAL_UART_IRQHandler+0xfa>
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d00b      	beq.n	800552e <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2204      	movs	r2, #4
 800551c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005524:	f043 0202 	orr.w	r2, r3, #2
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800552e:	69fb      	ldr	r3, [r7, #28]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b00      	cmp	r3, #0
 8005536:	d015      	beq.n	8005564 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005538:	69bb      	ldr	r3, [r7, #24]
 800553a:	f003 0320 	and.w	r3, r3, #32
 800553e:	2b00      	cmp	r3, #0
 8005540:	d104      	bne.n	800554c <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005548:	2b00      	cmp	r3, #0
 800554a:	d00b      	beq.n	8005564 <HAL_UART_IRQHandler+0x130>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2208      	movs	r2, #8
 8005552:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555a:	f043 0208 	orr.w	r2, r3, #8
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800556a:	2b00      	cmp	r3, #0
 800556c:	d011      	beq.n	8005592 <HAL_UART_IRQHandler+0x15e>
 800556e:	69bb      	ldr	r3, [r7, #24]
 8005570:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00c      	beq.n	8005592 <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005580:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005588:	f043 0220 	orr.w	r2, r3, #32
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 8142 	beq.w	8005822 <HAL_UART_IRQHandler+0x3ee>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800559e:	69fb      	ldr	r3, [r7, #28]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80055a8:	69bb      	ldr	r3, [r7, #24]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d007      	beq.n	80055c2 <HAL_UART_IRQHandler+0x18e>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d003      	beq.n	80055c2 <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055c8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055d4:	2b40      	cmp	r3, #64	; 0x40
 80055d6:	d004      	beq.n	80055e2 <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d031      	beq.n	8005646 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055e2:	6878      	ldr	r0, [r7, #4]
 80055e4:	f000 fd0b 	bl	8005ffe <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055f2:	2b40      	cmp	r3, #64	; 0x40
 80055f4:	d123      	bne.n	800563e <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005604:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800560a:	2b00      	cmp	r3, #0
 800560c:	d013      	beq.n	8005636 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005612:	4a4b      	ldr	r2, [pc, #300]	; (8005740 <HAL_UART_IRQHandler+0x30c>)
 8005614:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800561a:	4618      	mov	r0, r3
 800561c:	f7fd ffbd 	bl	800359a <HAL_DMA_Abort_IT>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d017      	beq.n	8005656 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005630:	4610      	mov	r0, r2
 8005632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	e00f      	b.n	8005656 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f908 	bl	800584c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563c:	e00b      	b.n	8005656 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f904 	bl	800584c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	e007      	b.n	8005656 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f900 	bl	800584c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005654:	e0e5      	b.n	8005822 <HAL_UART_IRQHandler+0x3ee>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005656:	bf00      	nop
    return;
 8005658:	e0e3      	b.n	8005822 <HAL_UART_IRQHandler+0x3ee>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800565e:	2b01      	cmp	r3, #1
 8005660:	f040 80a9 	bne.w	80057b6 <HAL_UART_IRQHandler+0x382>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 80a3 	beq.w	80057b6 <HAL_UART_IRQHandler+0x382>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	f003 0310 	and.w	r3, r3, #16
 8005676:	2b00      	cmp	r3, #0
 8005678:	f000 809d 	beq.w	80057b6 <HAL_UART_IRQHandler+0x382>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2210      	movs	r2, #16
 8005682:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d158      	bne.n	8005744 <HAL_UART_IRQHandler+0x310>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	813b      	strh	r3, [r7, #8]
      if (  (nb_remaining_rx_data > 0U)
 800569c:	893b      	ldrh	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80c1 	beq.w	8005826 <HAL_UART_IRQHandler+0x3f2>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056aa:	893a      	ldrh	r2, [r7, #8]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	f080 80ba 	bcs.w	8005826 <HAL_UART_IRQHandler+0x3f2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	893a      	ldrh	r2, [r7, #8]
 80056b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0320 	and.w	r3, r3, #32
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d12a      	bne.n	8005720 <HAL_UART_IRQHandler+0x2ec>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056d8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0201 	bic.w	r2, r2, #1
 80056e8:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f8:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2220      	movs	r2, #32
 80056fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0210 	bic.w	r2, r2, #16
 8005714:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800571a:	4618      	mov	r0, r3
 800571c:	f7fd feff 	bl	800351e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800572c:	b29b      	uxth	r3, r3
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	b29b      	uxth	r3, r3
 8005732:	4619      	mov	r1, r3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 f893 	bl	8005860 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800573a:	e074      	b.n	8005826 <HAL_UART_IRQHandler+0x3f2>
 800573c:	04000120 	.word	0x04000120
 8005740:	0800605d 	.word	0x0800605d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005750:	b29b      	uxth	r3, r3
 8005752:	1ad3      	subs	r3, r2, r3
 8005754:	817b      	strh	r3, [r7, #10]
      if (  (huart->RxXferCount > 0U)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	d063      	beq.n	800582a <HAL_UART_IRQHandler+0x3f6>
          &&(nb_rx_data > 0U) )
 8005762:	897b      	ldrh	r3, [r7, #10]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d060      	beq.n	800582a <HAL_UART_IRQHandler+0x3f6>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005776:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f022 0201 	bic.w	r2, r2, #1
 8005786:	609a      	str	r2, [r3, #8]
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2200      	movs	r2, #0
 8005792:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2200      	movs	r2, #0
 8005798:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0210 	bic.w	r2, r2, #16
 80057a8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057aa:	897b      	ldrh	r3, [r7, #10]
 80057ac:	4619      	mov	r1, r3
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f856 	bl	8005860 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80057b4:	e039      	b.n	800582a <HAL_UART_IRQHandler+0x3f6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <HAL_UART_IRQHandler+0x3a8>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d008      	beq.n	80057dc <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80057d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 fc70 	bl	80060ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80057da:	e029      	b.n	8005830 <HAL_UART_IRQHandler+0x3fc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <HAL_UART_IRQHandler+0x3ce>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <HAL_UART_IRQHandler+0x3ce>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01a      	beq.n	800582e <HAL_UART_IRQHandler+0x3fa>
    {
      huart->TxISR(huart);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	4798      	blx	r3
    }
    return;
 8005800:	e015      	b.n	800582e <HAL_UART_IRQHandler+0x3fa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b00      	cmp	r3, #0
 800580a:	d011      	beq.n	8005830 <HAL_UART_IRQHandler+0x3fc>
 800580c:	69bb      	ldr	r3, [r7, #24]
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00c      	beq.n	8005830 <HAL_UART_IRQHandler+0x3fc>
  {
    UART_EndTransmit_IT(huart);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fc36 	bl	8006088 <UART_EndTransmit_IT>
    return;
 800581c:	e008      	b.n	8005830 <HAL_UART_IRQHandler+0x3fc>
      return;
 800581e:	bf00      	nop
 8005820:	e006      	b.n	8005830 <HAL_UART_IRQHandler+0x3fc>
    return;
 8005822:	bf00      	nop
 8005824:	e004      	b.n	8005830 <HAL_UART_IRQHandler+0x3fc>
      return;
 8005826:	bf00      	nop
 8005828:	e002      	b.n	8005830 <HAL_UART_IRQHandler+0x3fc>
      return;
 800582a:	bf00      	nop
 800582c:	e000      	b.n	8005830 <HAL_UART_IRQHandler+0x3fc>
    return;
 800582e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8005830:	3720      	adds	r7, #32
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
 8005836:	bf00      	nop

08005838 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005840:	bf00      	nop
 8005842:	370c      	adds	r7, #12
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800584c:	b480      	push	{r7}
 800584e:	b083      	sub	sp, #12
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005854:	bf00      	nop
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	460b      	mov	r3, r1
 800586a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005878:	b5b0      	push	{r4, r5, r7, lr}
 800587a:	b088      	sub	sp, #32
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689a      	ldr	r2, [r3, #8]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4313      	orrs	r3, r2
 800589a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	4ba4      	ldr	r3, [pc, #656]	; (8005b34 <UART_SetConfig+0x2bc>)
 80058a4:	4013      	ands	r3, r2
 80058a6:	687a      	ldr	r2, [r7, #4]
 80058a8:	6812      	ldr	r2, [r2, #0]
 80058aa:	69f9      	ldr	r1, [r7, #28]
 80058ac:	430b      	orrs	r3, r1
 80058ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68da      	ldr	r2, [r3, #12]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	699b      	ldr	r3, [r3, #24]
 80058ca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a99      	ldr	r2, [pc, #612]	; (8005b38 <UART_SetConfig+0x2c0>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d004      	beq.n	80058e0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	69fa      	ldr	r2, [r7, #28]
 80058dc:	4313      	orrs	r3, r2
 80058de:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	430a      	orrs	r2, r1
 80058f2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a90      	ldr	r2, [pc, #576]	; (8005b3c <UART_SetConfig+0x2c4>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d121      	bne.n	8005942 <UART_SetConfig+0xca>
 80058fe:	4b90      	ldr	r3, [pc, #576]	; (8005b40 <UART_SetConfig+0x2c8>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	2b03      	cmp	r3, #3
 800590a:	d817      	bhi.n	800593c <UART_SetConfig+0xc4>
 800590c:	a201      	add	r2, pc, #4	; (adr r2, 8005914 <UART_SetConfig+0x9c>)
 800590e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005912:	bf00      	nop
 8005914:	08005925 	.word	0x08005925
 8005918:	08005931 	.word	0x08005931
 800591c:	0800592b 	.word	0x0800592b
 8005920:	08005937 	.word	0x08005937
 8005924:	2301      	movs	r3, #1
 8005926:	76fb      	strb	r3, [r7, #27]
 8005928:	e0bc      	b.n	8005aa4 <UART_SetConfig+0x22c>
 800592a:	2302      	movs	r3, #2
 800592c:	76fb      	strb	r3, [r7, #27]
 800592e:	e0b9      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005930:	2304      	movs	r3, #4
 8005932:	76fb      	strb	r3, [r7, #27]
 8005934:	e0b6      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005936:	2308      	movs	r3, #8
 8005938:	76fb      	strb	r3, [r7, #27]
 800593a:	e0b3      	b.n	8005aa4 <UART_SetConfig+0x22c>
 800593c:	2310      	movs	r3, #16
 800593e:	76fb      	strb	r3, [r7, #27]
 8005940:	e0b0      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a7f      	ldr	r2, [pc, #508]	; (8005b44 <UART_SetConfig+0x2cc>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d132      	bne.n	80059b2 <UART_SetConfig+0x13a>
 800594c:	4b7c      	ldr	r3, [pc, #496]	; (8005b40 <UART_SetConfig+0x2c8>)
 800594e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b0c      	cmp	r3, #12
 8005958:	d828      	bhi.n	80059ac <UART_SetConfig+0x134>
 800595a:	a201      	add	r2, pc, #4	; (adr r2, 8005960 <UART_SetConfig+0xe8>)
 800595c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005960:	08005995 	.word	0x08005995
 8005964:	080059ad 	.word	0x080059ad
 8005968:	080059ad 	.word	0x080059ad
 800596c:	080059ad 	.word	0x080059ad
 8005970:	080059a1 	.word	0x080059a1
 8005974:	080059ad 	.word	0x080059ad
 8005978:	080059ad 	.word	0x080059ad
 800597c:	080059ad 	.word	0x080059ad
 8005980:	0800599b 	.word	0x0800599b
 8005984:	080059ad 	.word	0x080059ad
 8005988:	080059ad 	.word	0x080059ad
 800598c:	080059ad 	.word	0x080059ad
 8005990:	080059a7 	.word	0x080059a7
 8005994:	2300      	movs	r3, #0
 8005996:	76fb      	strb	r3, [r7, #27]
 8005998:	e084      	b.n	8005aa4 <UART_SetConfig+0x22c>
 800599a:	2302      	movs	r3, #2
 800599c:	76fb      	strb	r3, [r7, #27]
 800599e:	e081      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059a0:	2304      	movs	r3, #4
 80059a2:	76fb      	strb	r3, [r7, #27]
 80059a4:	e07e      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059a6:	2308      	movs	r3, #8
 80059a8:	76fb      	strb	r3, [r7, #27]
 80059aa:	e07b      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059ac:	2310      	movs	r3, #16
 80059ae:	76fb      	strb	r3, [r7, #27]
 80059b0:	e078      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4a64      	ldr	r2, [pc, #400]	; (8005b48 <UART_SetConfig+0x2d0>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d120      	bne.n	80059fe <UART_SetConfig+0x186>
 80059bc:	4b60      	ldr	r3, [pc, #384]	; (8005b40 <UART_SetConfig+0x2c8>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80059c6:	2b30      	cmp	r3, #48	; 0x30
 80059c8:	d013      	beq.n	80059f2 <UART_SetConfig+0x17a>
 80059ca:	2b30      	cmp	r3, #48	; 0x30
 80059cc:	d814      	bhi.n	80059f8 <UART_SetConfig+0x180>
 80059ce:	2b20      	cmp	r3, #32
 80059d0:	d009      	beq.n	80059e6 <UART_SetConfig+0x16e>
 80059d2:	2b20      	cmp	r3, #32
 80059d4:	d810      	bhi.n	80059f8 <UART_SetConfig+0x180>
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d002      	beq.n	80059e0 <UART_SetConfig+0x168>
 80059da:	2b10      	cmp	r3, #16
 80059dc:	d006      	beq.n	80059ec <UART_SetConfig+0x174>
 80059de:	e00b      	b.n	80059f8 <UART_SetConfig+0x180>
 80059e0:	2300      	movs	r3, #0
 80059e2:	76fb      	strb	r3, [r7, #27]
 80059e4:	e05e      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059e6:	2302      	movs	r3, #2
 80059e8:	76fb      	strb	r3, [r7, #27]
 80059ea:	e05b      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059ec:	2304      	movs	r3, #4
 80059ee:	76fb      	strb	r3, [r7, #27]
 80059f0:	e058      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059f2:	2308      	movs	r3, #8
 80059f4:	76fb      	strb	r3, [r7, #27]
 80059f6:	e055      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059f8:	2310      	movs	r3, #16
 80059fa:	76fb      	strb	r3, [r7, #27]
 80059fc:	e052      	b.n	8005aa4 <UART_SetConfig+0x22c>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a52      	ldr	r2, [pc, #328]	; (8005b4c <UART_SetConfig+0x2d4>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d120      	bne.n	8005a4a <UART_SetConfig+0x1d2>
 8005a08:	4b4d      	ldr	r3, [pc, #308]	; (8005b40 <UART_SetConfig+0x2c8>)
 8005a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a12:	2bc0      	cmp	r3, #192	; 0xc0
 8005a14:	d013      	beq.n	8005a3e <UART_SetConfig+0x1c6>
 8005a16:	2bc0      	cmp	r3, #192	; 0xc0
 8005a18:	d814      	bhi.n	8005a44 <UART_SetConfig+0x1cc>
 8005a1a:	2b80      	cmp	r3, #128	; 0x80
 8005a1c:	d009      	beq.n	8005a32 <UART_SetConfig+0x1ba>
 8005a1e:	2b80      	cmp	r3, #128	; 0x80
 8005a20:	d810      	bhi.n	8005a44 <UART_SetConfig+0x1cc>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d002      	beq.n	8005a2c <UART_SetConfig+0x1b4>
 8005a26:	2b40      	cmp	r3, #64	; 0x40
 8005a28:	d006      	beq.n	8005a38 <UART_SetConfig+0x1c0>
 8005a2a:	e00b      	b.n	8005a44 <UART_SetConfig+0x1cc>
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	76fb      	strb	r3, [r7, #27]
 8005a30:	e038      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a32:	2302      	movs	r3, #2
 8005a34:	76fb      	strb	r3, [r7, #27]
 8005a36:	e035      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a38:	2304      	movs	r3, #4
 8005a3a:	76fb      	strb	r3, [r7, #27]
 8005a3c:	e032      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a3e:	2308      	movs	r3, #8
 8005a40:	76fb      	strb	r3, [r7, #27]
 8005a42:	e02f      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a44:	2310      	movs	r3, #16
 8005a46:	76fb      	strb	r3, [r7, #27]
 8005a48:	e02c      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a3a      	ldr	r2, [pc, #232]	; (8005b38 <UART_SetConfig+0x2c0>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d125      	bne.n	8005aa0 <UART_SetConfig+0x228>
 8005a54:	4b3a      	ldr	r3, [pc, #232]	; (8005b40 <UART_SetConfig+0x2c8>)
 8005a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005a5e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a62:	d017      	beq.n	8005a94 <UART_SetConfig+0x21c>
 8005a64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005a68:	d817      	bhi.n	8005a9a <UART_SetConfig+0x222>
 8005a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a6e:	d00b      	beq.n	8005a88 <UART_SetConfig+0x210>
 8005a70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a74:	d811      	bhi.n	8005a9a <UART_SetConfig+0x222>
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <UART_SetConfig+0x20a>
 8005a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a7e:	d006      	beq.n	8005a8e <UART_SetConfig+0x216>
 8005a80:	e00b      	b.n	8005a9a <UART_SetConfig+0x222>
 8005a82:	2300      	movs	r3, #0
 8005a84:	76fb      	strb	r3, [r7, #27]
 8005a86:	e00d      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a88:	2302      	movs	r3, #2
 8005a8a:	76fb      	strb	r3, [r7, #27]
 8005a8c:	e00a      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a8e:	2304      	movs	r3, #4
 8005a90:	76fb      	strb	r3, [r7, #27]
 8005a92:	e007      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a94:	2308      	movs	r3, #8
 8005a96:	76fb      	strb	r3, [r7, #27]
 8005a98:	e004      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005a9a:	2310      	movs	r3, #16
 8005a9c:	76fb      	strb	r3, [r7, #27]
 8005a9e:	e001      	b.n	8005aa4 <UART_SetConfig+0x22c>
 8005aa0:	2310      	movs	r3, #16
 8005aa2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a23      	ldr	r2, [pc, #140]	; (8005b38 <UART_SetConfig+0x2c0>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	f040 8084 	bne.w	8005bb8 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ab0:	7efb      	ldrb	r3, [r7, #27]
 8005ab2:	2b08      	cmp	r3, #8
 8005ab4:	d823      	bhi.n	8005afe <UART_SetConfig+0x286>
 8005ab6:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <UART_SetConfig+0x244>)
 8005ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005abc:	08005ae1 	.word	0x08005ae1
 8005ac0:	08005aff 	.word	0x08005aff
 8005ac4:	08005ae9 	.word	0x08005ae9
 8005ac8:	08005aff 	.word	0x08005aff
 8005acc:	08005aef 	.word	0x08005aef
 8005ad0:	08005aff 	.word	0x08005aff
 8005ad4:	08005aff 	.word	0x08005aff
 8005ad8:	08005aff 	.word	0x08005aff
 8005adc:	08005af7 	.word	0x08005af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ae0:	f7fe fd44 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8005ae4:	6178      	str	r0, [r7, #20]
        break;
 8005ae6:	e00f      	b.n	8005b08 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ae8:	4b19      	ldr	r3, [pc, #100]	; (8005b50 <UART_SetConfig+0x2d8>)
 8005aea:	617b      	str	r3, [r7, #20]
        break;
 8005aec:	e00c      	b.n	8005b08 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005aee:	f7fe fca5 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8005af2:	6178      	str	r0, [r7, #20]
        break;
 8005af4:	e008      	b.n	8005b08 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005afa:	617b      	str	r3, [r7, #20]
        break;
 8005afc:	e004      	b.n	8005b08 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	76bb      	strb	r3, [r7, #26]
        break;
 8005b06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 8102 	beq.w	8005d14 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	4613      	mov	r3, r2
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	4413      	add	r3, r2
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d305      	bcc.n	8005b2c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d913      	bls.n	8005b54 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	76bb      	strb	r3, [r7, #26]
 8005b30:	e0f0      	b.n	8005d14 <UART_SetConfig+0x49c>
 8005b32:	bf00      	nop
 8005b34:	efff69f3 	.word	0xefff69f3
 8005b38:	40008000 	.word	0x40008000
 8005b3c:	40013800 	.word	0x40013800
 8005b40:	40021000 	.word	0x40021000
 8005b44:	40004400 	.word	0x40004400
 8005b48:	40004800 	.word	0x40004800
 8005b4c:	40004c00 	.word	0x40004c00
 8005b50:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f04f 0100 	mov.w	r1, #0
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	020b      	lsls	r3, r1, #8
 8005b66:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005b6a:	0202      	lsls	r2, r0, #8
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	6849      	ldr	r1, [r1, #4]
 8005b70:	0849      	lsrs	r1, r1, #1
 8005b72:	4608      	mov	r0, r1
 8005b74:	f04f 0100 	mov.w	r1, #0
 8005b78:	1814      	adds	r4, r2, r0
 8005b7a:	eb43 0501 	adc.w	r5, r3, r1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	461a      	mov	r2, r3
 8005b84:	f04f 0300 	mov.w	r3, #0
 8005b88:	4620      	mov	r0, r4
 8005b8a:	4629      	mov	r1, r5
 8005b8c:	f7fa fb22 	bl	80001d4 <__aeabi_uldivmod>
 8005b90:	4602      	mov	r2, r0
 8005b92:	460b      	mov	r3, r1
 8005b94:	4613      	mov	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b9e:	d308      	bcc.n	8005bb2 <UART_SetConfig+0x33a>
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba6:	d204      	bcs.n	8005bb2 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	60da      	str	r2, [r3, #12]
 8005bb0:	e0b0      	b.n	8005d14 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	76bb      	strb	r3, [r7, #26]
 8005bb6:	e0ad      	b.n	8005d14 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bc0:	d15c      	bne.n	8005c7c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8005bc2:	7efb      	ldrb	r3, [r7, #27]
 8005bc4:	2b08      	cmp	r3, #8
 8005bc6:	d828      	bhi.n	8005c1a <UART_SetConfig+0x3a2>
 8005bc8:	a201      	add	r2, pc, #4	; (adr r2, 8005bd0 <UART_SetConfig+0x358>)
 8005bca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bce:	bf00      	nop
 8005bd0:	08005bf5 	.word	0x08005bf5
 8005bd4:	08005bfd 	.word	0x08005bfd
 8005bd8:	08005c05 	.word	0x08005c05
 8005bdc:	08005c1b 	.word	0x08005c1b
 8005be0:	08005c0b 	.word	0x08005c0b
 8005be4:	08005c1b 	.word	0x08005c1b
 8005be8:	08005c1b 	.word	0x08005c1b
 8005bec:	08005c1b 	.word	0x08005c1b
 8005bf0:	08005c13 	.word	0x08005c13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005bf4:	f7fe fcba 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8005bf8:	6178      	str	r0, [r7, #20]
        break;
 8005bfa:	e013      	b.n	8005c24 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bfc:	f7fe fccc 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8005c00:	6178      	str	r0, [r7, #20]
        break;
 8005c02:	e00f      	b.n	8005c24 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005c04:	4b49      	ldr	r3, [pc, #292]	; (8005d2c <UART_SetConfig+0x4b4>)
 8005c06:	617b      	str	r3, [r7, #20]
        break;
 8005c08:	e00c      	b.n	8005c24 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005c0a:	f7fe fc17 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8005c0e:	6178      	str	r0, [r7, #20]
        break;
 8005c10:	e008      	b.n	8005c24 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c16:	617b      	str	r3, [r7, #20]
        break;
 8005c18:	e004      	b.n	8005c24 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	76bb      	strb	r3, [r7, #26]
        break;
 8005c22:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d074      	beq.n	8005d14 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	005a      	lsls	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	085b      	lsrs	r3, r3, #1
 8005c34:	441a      	add	r2, r3
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	685b      	ldr	r3, [r3, #4]
 8005c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c3e:	b29b      	uxth	r3, r3
 8005c40:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	2b0f      	cmp	r3, #15
 8005c46:	d916      	bls.n	8005c76 <UART_SetConfig+0x3fe>
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c4e:	d212      	bcs.n	8005c76 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f023 030f 	bic.w	r3, r3, #15
 8005c58:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c5a:	693b      	ldr	r3, [r7, #16]
 8005c5c:	085b      	lsrs	r3, r3, #1
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	f003 0307 	and.w	r3, r3, #7
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	89fb      	ldrh	r3, [r7, #14]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	89fa      	ldrh	r2, [r7, #14]
 8005c72:	60da      	str	r2, [r3, #12]
 8005c74:	e04e      	b.n	8005d14 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	76bb      	strb	r3, [r7, #26]
 8005c7a:	e04b      	b.n	8005d14 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c7c:	7efb      	ldrb	r3, [r7, #27]
 8005c7e:	2b08      	cmp	r3, #8
 8005c80:	d827      	bhi.n	8005cd2 <UART_SetConfig+0x45a>
 8005c82:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <UART_SetConfig+0x410>)
 8005c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c88:	08005cad 	.word	0x08005cad
 8005c8c:	08005cb5 	.word	0x08005cb5
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005cd3 	.word	0x08005cd3
 8005c98:	08005cc3 	.word	0x08005cc3
 8005c9c:	08005cd3 	.word	0x08005cd3
 8005ca0:	08005cd3 	.word	0x08005cd3
 8005ca4:	08005cd3 	.word	0x08005cd3
 8005ca8:	08005ccb 	.word	0x08005ccb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cac:	f7fe fc5e 	bl	800456c <HAL_RCC_GetPCLK1Freq>
 8005cb0:	6178      	str	r0, [r7, #20]
        break;
 8005cb2:	e013      	b.n	8005cdc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cb4:	f7fe fc70 	bl	8004598 <HAL_RCC_GetPCLK2Freq>
 8005cb8:	6178      	str	r0, [r7, #20]
        break;
 8005cba:	e00f      	b.n	8005cdc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cbc:	4b1b      	ldr	r3, [pc, #108]	; (8005d2c <UART_SetConfig+0x4b4>)
 8005cbe:	617b      	str	r3, [r7, #20]
        break;
 8005cc0:	e00c      	b.n	8005cdc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cc2:	f7fe fbbb 	bl	800443c <HAL_RCC_GetSysClockFreq>
 8005cc6:	6178      	str	r0, [r7, #20]
        break;
 8005cc8:	e008      	b.n	8005cdc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cce:	617b      	str	r3, [r7, #20]
        break;
 8005cd0:	e004      	b.n	8005cdc <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	76bb      	strb	r3, [r7, #26]
        break;
 8005cda:	bf00      	nop
    }

    if (pclk != 0U)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d018      	beq.n	8005d14 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	085a      	lsrs	r2, r3, #1
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	441a      	add	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b0f      	cmp	r3, #15
 8005cfc:	d908      	bls.n	8005d10 <UART_SetConfig+0x498>
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d04:	d204      	bcs.n	8005d10 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	693a      	ldr	r2, [r7, #16]
 8005d0c:	60da      	str	r2, [r3, #12]
 8005d0e:	e001      	b.n	8005d14 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d20:	7ebb      	ldrb	r3, [r7, #26]
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3720      	adds	r7, #32
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bdb0      	pop	{r4, r5, r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	00f42400 	.word	0x00f42400

08005d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3c:	f003 0301 	and.w	r3, r3, #1
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00a      	beq.n	8005d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d5e:	f003 0302 	and.w	r3, r3, #2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d00a      	beq.n	8005d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	430a      	orrs	r2, r1
 8005d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d80:	f003 0304 	and.w	r3, r3, #4
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00a      	beq.n	8005d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	f003 0308 	and.w	r3, r3, #8
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	f003 0310 	and.w	r3, r3, #16
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d00a      	beq.n	8005de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005de6:	f003 0320 	and.w	r3, r3, #32
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d00a      	beq.n	8005e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	430a      	orrs	r2, r1
 8005e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01a      	beq.n	8005e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	430a      	orrs	r2, r1
 8005e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e2e:	d10a      	bne.n	8005e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	430a      	orrs	r2, r1
 8005e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	430a      	orrs	r2, r1
 8005e66:	605a      	str	r2, [r3, #4]
  }
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b086      	sub	sp, #24
 8005e78:	af02      	add	r7, sp, #8
 8005e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e84:	f7fc fbb4 	bl	80025f0 <HAL_GetTick>
 8005e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d10e      	bne.n	8005eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005e9c:	9300      	str	r3, [sp, #0]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f82d 	bl	8005f06 <UART_WaitOnFlagUntilTimeout>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d001      	beq.n	8005eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e023      	b.n	8005efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f003 0304 	and.w	r3, r3, #4
 8005ec0:	2b04      	cmp	r3, #4
 8005ec2:	d10e      	bne.n	8005ee2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ec8:	9300      	str	r3, [sp, #0]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 f817 	bl	8005f06 <UART_WaitOnFlagUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ede:	2303      	movs	r3, #3
 8005ee0:	e00d      	b.n	8005efe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b084      	sub	sp, #16
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	60b9      	str	r1, [r7, #8]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	4613      	mov	r3, r2
 8005f14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f16:	e05e      	b.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d05a      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f20:	f7fc fb66 	bl	80025f0 <HAL_GetTick>
 8005f24:	4602      	mov	r2, r0
 8005f26:	683b      	ldr	r3, [r7, #0]
 8005f28:	1ad3      	subs	r3, r2, r3
 8005f2a:	69ba      	ldr	r2, [r7, #24]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d302      	bcc.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x30>
 8005f30:	69bb      	ldr	r3, [r7, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d11b      	bne.n	8005f6e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005f44:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	689a      	ldr	r2, [r3, #8]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 0201 	bic.w	r2, r2, #1
 8005f54:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2220      	movs	r2, #32
 8005f5a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005f6a:	2303      	movs	r3, #3
 8005f6c:	e043      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d02c      	beq.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	69db      	ldr	r3, [r3, #28]
 8005f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f8a:	d124      	bne.n	8005fd6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f94:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005fa4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	2220      	movs	r2, #32
 8005fc0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2220      	movs	r2, #32
 8005fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005fd2:	2303      	movs	r3, #3
 8005fd4:	e00f      	b.n	8005ff6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	69da      	ldr	r2, [r3, #28]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	4013      	ands	r3, r2
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	461a      	mov	r2, r3
 8005fee:	79fb      	ldrb	r3, [r7, #7]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d091      	beq.n	8005f18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ff4:	2300      	movs	r3, #0
}
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	3710      	adds	r7, #16
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}

08005ffe <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006014:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	689a      	ldr	r2, [r3, #8]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f022 0201 	bic.w	r2, r2, #1
 8006024:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602a:	2b01      	cmp	r3, #1
 800602c:	d107      	bne.n	800603e <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f022 0210 	bic.w	r2, r2, #16
 800603c:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2220      	movs	r2, #32
 8006042:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr

0800605c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006068:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800607a:	68f8      	ldr	r0, [r7, #12]
 800607c:	f7ff fbe6 	bl	800584c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006080:	bf00      	nop
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b082      	sub	sp, #8
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800609e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2220      	movs	r2, #32
 80060a4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2200      	movs	r2, #0
 80060aa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f7ff fbc3 	bl	8005838 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060b2:	bf00      	nop
 80060b4:	3708      	adds	r7, #8
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}

080060ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80060ba:	b480      	push	{r7}
 80060bc:	b083      	sub	sp, #12
 80060be:	af00      	add	r7, sp, #0
 80060c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80060c2:	bf00      	nop
 80060c4:	370c      	adds	r7, #12
 80060c6:	46bd      	mov	sp, r7
 80060c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060cc:	4770      	bx	lr
	...

080060d0 <__libc_init_array>:
 80060d0:	b570      	push	{r4, r5, r6, lr}
 80060d2:	4d0d      	ldr	r5, [pc, #52]	; (8006108 <__libc_init_array+0x38>)
 80060d4:	4c0d      	ldr	r4, [pc, #52]	; (800610c <__libc_init_array+0x3c>)
 80060d6:	1b64      	subs	r4, r4, r5
 80060d8:	10a4      	asrs	r4, r4, #2
 80060da:	2600      	movs	r6, #0
 80060dc:	42a6      	cmp	r6, r4
 80060de:	d109      	bne.n	80060f4 <__libc_init_array+0x24>
 80060e0:	4d0b      	ldr	r5, [pc, #44]	; (8006110 <__libc_init_array+0x40>)
 80060e2:	4c0c      	ldr	r4, [pc, #48]	; (8006114 <__libc_init_array+0x44>)
 80060e4:	f000 f820 	bl	8006128 <_init>
 80060e8:	1b64      	subs	r4, r4, r5
 80060ea:	10a4      	asrs	r4, r4, #2
 80060ec:	2600      	movs	r6, #0
 80060ee:	42a6      	cmp	r6, r4
 80060f0:	d105      	bne.n	80060fe <__libc_init_array+0x2e>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f8:	4798      	blx	r3
 80060fa:	3601      	adds	r6, #1
 80060fc:	e7ee      	b.n	80060dc <__libc_init_array+0xc>
 80060fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006102:	4798      	blx	r3
 8006104:	3601      	adds	r6, #1
 8006106:	e7f2      	b.n	80060ee <__libc_init_array+0x1e>
 8006108:	08006258 	.word	0x08006258
 800610c:	08006258 	.word	0x08006258
 8006110:	08006258 	.word	0x08006258
 8006114:	0800625c 	.word	0x0800625c

08006118 <memset>:
 8006118:	4402      	add	r2, r0
 800611a:	4603      	mov	r3, r0
 800611c:	4293      	cmp	r3, r2
 800611e:	d100      	bne.n	8006122 <memset+0xa>
 8006120:	4770      	bx	lr
 8006122:	f803 1b01 	strb.w	r1, [r3], #1
 8006126:	e7f9      	b.n	800611c <memset+0x4>

08006128 <_init>:
 8006128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800612a:	bf00      	nop
 800612c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612e:	bc08      	pop	{r3}
 8006130:	469e      	mov	lr, r3
 8006132:	4770      	bx	lr

08006134 <_fini>:
 8006134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006136:	bf00      	nop
 8006138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800613a:	bc08      	pop	{r3}
 800613c:	469e      	mov	lr, r3
 800613e:	4770      	bx	lr
