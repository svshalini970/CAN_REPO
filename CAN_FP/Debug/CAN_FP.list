
CAN_FP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000423c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044a8  080044a8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080044a8  080044a8  000144a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080044b0  080044b0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044b0  080044b0  000144b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044b4  080044b4  000144b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000010  080044c4  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000022c  080044c4  0002022c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e881  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe8  00000000  00000000  0002e8bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  000308a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000aa8  00000000  00000000  00031408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022764  00000000  00000000  00031eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000be74  00000000  00000000  00054614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d279e  00000000  00000000  00060488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  00132c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080043b8 	.word	0x080043b8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	080043b8 	.word	0x080043b8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295
 80001f8:	f000 b96e 	b.w	80004d8 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468c      	mov	ip, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	f040 8083 	bne.w	800032a <__udivmoddi4+0x116>
 8000224:	428a      	cmp	r2, r1
 8000226:	4617      	mov	r7, r2
 8000228:	d947      	bls.n	80002ba <__udivmoddi4+0xa6>
 800022a:	fab2 f282 	clz	r2, r2
 800022e:	b142      	cbz	r2, 8000242 <__udivmoddi4+0x2e>
 8000230:	f1c2 0020 	rsb	r0, r2, #32
 8000234:	fa24 f000 	lsr.w	r0, r4, r0
 8000238:	4091      	lsls	r1, r2
 800023a:	4097      	lsls	r7, r2
 800023c:	ea40 0c01 	orr.w	ip, r0, r1
 8000240:	4094      	lsls	r4, r2
 8000242:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000246:	0c23      	lsrs	r3, r4, #16
 8000248:	fbbc f6f8 	udiv	r6, ip, r8
 800024c:	fa1f fe87 	uxth.w	lr, r7
 8000250:	fb08 c116 	mls	r1, r8, r6, ip
 8000254:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000258:	fb06 f10e 	mul.w	r1, r6, lr
 800025c:	4299      	cmp	r1, r3
 800025e:	d909      	bls.n	8000274 <__udivmoddi4+0x60>
 8000260:	18fb      	adds	r3, r7, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 8119 	bcs.w	800049c <__udivmoddi4+0x288>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 8116 	bls.w	800049c <__udivmoddi4+0x288>
 8000270:	3e02      	subs	r6, #2
 8000272:	443b      	add	r3, r7
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 fe0e 	mul.w	lr, r0, lr
 8000288:	45a6      	cmp	lr, r4
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x8c>
 800028c:	193c      	adds	r4, r7, r4
 800028e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000292:	f080 8105 	bcs.w	80004a0 <__udivmoddi4+0x28c>
 8000296:	45a6      	cmp	lr, r4
 8000298:	f240 8102 	bls.w	80004a0 <__udivmoddi4+0x28c>
 800029c:	3802      	subs	r0, #2
 800029e:	443c      	add	r4, r7
 80002a0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a4:	eba4 040e 	sub.w	r4, r4, lr
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa0>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	b902      	cbnz	r2, 80002be <__udivmoddi4+0xaa>
 80002bc:	deff      	udf	#255	; 0xff
 80002be:	fab2 f282 	clz	r2, r2
 80002c2:	2a00      	cmp	r2, #0
 80002c4:	d150      	bne.n	8000368 <__udivmoddi4+0x154>
 80002c6:	1bcb      	subs	r3, r1, r7
 80002c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002cc:	fa1f f887 	uxth.w	r8, r7
 80002d0:	2601      	movs	r6, #1
 80002d2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002d6:	0c21      	lsrs	r1, r4, #16
 80002d8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e0:	fb08 f30c 	mul.w	r3, r8, ip
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d907      	bls.n	80002f8 <__udivmoddi4+0xe4>
 80002e8:	1879      	adds	r1, r7, r1
 80002ea:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002ee:	d202      	bcs.n	80002f6 <__udivmoddi4+0xe2>
 80002f0:	428b      	cmp	r3, r1
 80002f2:	f200 80e9 	bhi.w	80004c8 <__udivmoddi4+0x2b4>
 80002f6:	4684      	mov	ip, r0
 80002f8:	1ac9      	subs	r1, r1, r3
 80002fa:	b2a3      	uxth	r3, r4
 80002fc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000300:	fb0e 1110 	mls	r1, lr, r0, r1
 8000304:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000308:	fb08 f800 	mul.w	r8, r8, r0
 800030c:	45a0      	cmp	r8, r4
 800030e:	d907      	bls.n	8000320 <__udivmoddi4+0x10c>
 8000310:	193c      	adds	r4, r7, r4
 8000312:	f100 33ff 	add.w	r3, r0, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x10a>
 8000318:	45a0      	cmp	r8, r4
 800031a:	f200 80d9 	bhi.w	80004d0 <__udivmoddi4+0x2bc>
 800031e:	4618      	mov	r0, r3
 8000320:	eba4 0408 	sub.w	r4, r4, r8
 8000324:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000328:	e7bf      	b.n	80002aa <__udivmoddi4+0x96>
 800032a:	428b      	cmp	r3, r1
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x12e>
 800032e:	2d00      	cmp	r5, #0
 8000330:	f000 80b1 	beq.w	8000496 <__udivmoddi4+0x282>
 8000334:	2600      	movs	r6, #0
 8000336:	e9c5 0100 	strd	r0, r1, [r5]
 800033a:	4630      	mov	r0, r6
 800033c:	4631      	mov	r1, r6
 800033e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000342:	fab3 f683 	clz	r6, r3
 8000346:	2e00      	cmp	r6, #0
 8000348:	d14a      	bne.n	80003e0 <__udivmoddi4+0x1cc>
 800034a:	428b      	cmp	r3, r1
 800034c:	d302      	bcc.n	8000354 <__udivmoddi4+0x140>
 800034e:	4282      	cmp	r2, r0
 8000350:	f200 80b8 	bhi.w	80004c4 <__udivmoddi4+0x2b0>
 8000354:	1a84      	subs	r4, r0, r2
 8000356:	eb61 0103 	sbc.w	r1, r1, r3
 800035a:	2001      	movs	r0, #1
 800035c:	468c      	mov	ip, r1
 800035e:	2d00      	cmp	r5, #0
 8000360:	d0a8      	beq.n	80002b4 <__udivmoddi4+0xa0>
 8000362:	e9c5 4c00 	strd	r4, ip, [r5]
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0xa0>
 8000368:	f1c2 0320 	rsb	r3, r2, #32
 800036c:	fa20 f603 	lsr.w	r6, r0, r3
 8000370:	4097      	lsls	r7, r2
 8000372:	fa01 f002 	lsl.w	r0, r1, r2
 8000376:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800037a:	40d9      	lsrs	r1, r3
 800037c:	4330      	orrs	r0, r6
 800037e:	0c03      	lsrs	r3, r0, #16
 8000380:	fbb1 f6fe 	udiv	r6, r1, lr
 8000384:	fa1f f887 	uxth.w	r8, r7
 8000388:	fb0e 1116 	mls	r1, lr, r6, r1
 800038c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000390:	fb06 f108 	mul.w	r1, r6, r8
 8000394:	4299      	cmp	r1, r3
 8000396:	fa04 f402 	lsl.w	r4, r4, r2
 800039a:	d909      	bls.n	80003b0 <__udivmoddi4+0x19c>
 800039c:	18fb      	adds	r3, r7, r3
 800039e:	f106 3cff 	add.w	ip, r6, #4294967295
 80003a2:	f080 808d 	bcs.w	80004c0 <__udivmoddi4+0x2ac>
 80003a6:	4299      	cmp	r1, r3
 80003a8:	f240 808a 	bls.w	80004c0 <__udivmoddi4+0x2ac>
 80003ac:	3e02      	subs	r6, #2
 80003ae:	443b      	add	r3, r7
 80003b0:	1a5b      	subs	r3, r3, r1
 80003b2:	b281      	uxth	r1, r0
 80003b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003bc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c0:	fb00 f308 	mul.w	r3, r0, r8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d907      	bls.n	80003d8 <__udivmoddi4+0x1c4>
 80003c8:	1879      	adds	r1, r7, r1
 80003ca:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ce:	d273      	bcs.n	80004b8 <__udivmoddi4+0x2a4>
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d971      	bls.n	80004b8 <__udivmoddi4+0x2a4>
 80003d4:	3802      	subs	r0, #2
 80003d6:	4439      	add	r1, r7
 80003d8:	1acb      	subs	r3, r1, r3
 80003da:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003de:	e778      	b.n	80002d2 <__udivmoddi4+0xbe>
 80003e0:	f1c6 0c20 	rsb	ip, r6, #32
 80003e4:	fa03 f406 	lsl.w	r4, r3, r6
 80003e8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003ec:	431c      	orrs	r4, r3
 80003ee:	fa20 f70c 	lsr.w	r7, r0, ip
 80003f2:	fa01 f306 	lsl.w	r3, r1, r6
 80003f6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003fa:	fa21 f10c 	lsr.w	r1, r1, ip
 80003fe:	431f      	orrs	r7, r3
 8000400:	0c3b      	lsrs	r3, r7, #16
 8000402:	fbb1 f9fe 	udiv	r9, r1, lr
 8000406:	fa1f f884 	uxth.w	r8, r4
 800040a:	fb0e 1119 	mls	r1, lr, r9, r1
 800040e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000412:	fb09 fa08 	mul.w	sl, r9, r8
 8000416:	458a      	cmp	sl, r1
 8000418:	fa02 f206 	lsl.w	r2, r2, r6
 800041c:	fa00 f306 	lsl.w	r3, r0, r6
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x220>
 8000422:	1861      	adds	r1, r4, r1
 8000424:	f109 30ff 	add.w	r0, r9, #4294967295
 8000428:	d248      	bcs.n	80004bc <__udivmoddi4+0x2a8>
 800042a:	458a      	cmp	sl, r1
 800042c:	d946      	bls.n	80004bc <__udivmoddi4+0x2a8>
 800042e:	f1a9 0902 	sub.w	r9, r9, #2
 8000432:	4421      	add	r1, r4
 8000434:	eba1 010a 	sub.w	r1, r1, sl
 8000438:	b2bf      	uxth	r7, r7
 800043a:	fbb1 f0fe 	udiv	r0, r1, lr
 800043e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000442:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000446:	fb00 f808 	mul.w	r8, r0, r8
 800044a:	45b8      	cmp	r8, r7
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x24a>
 800044e:	19e7      	adds	r7, r4, r7
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d22e      	bcs.n	80004b4 <__udivmoddi4+0x2a0>
 8000456:	45b8      	cmp	r8, r7
 8000458:	d92c      	bls.n	80004b4 <__udivmoddi4+0x2a0>
 800045a:	3802      	subs	r0, #2
 800045c:	4427      	add	r7, r4
 800045e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000462:	eba7 0708 	sub.w	r7, r7, r8
 8000466:	fba0 8902 	umull	r8, r9, r0, r2
 800046a:	454f      	cmp	r7, r9
 800046c:	46c6      	mov	lr, r8
 800046e:	4649      	mov	r1, r9
 8000470:	d31a      	bcc.n	80004a8 <__udivmoddi4+0x294>
 8000472:	d017      	beq.n	80004a4 <__udivmoddi4+0x290>
 8000474:	b15d      	cbz	r5, 800048e <__udivmoddi4+0x27a>
 8000476:	ebb3 020e 	subs.w	r2, r3, lr
 800047a:	eb67 0701 	sbc.w	r7, r7, r1
 800047e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000482:	40f2      	lsrs	r2, r6
 8000484:	ea4c 0202 	orr.w	r2, ip, r2
 8000488:	40f7      	lsrs	r7, r6
 800048a:	e9c5 2700 	strd	r2, r7, [r5]
 800048e:	2600      	movs	r6, #0
 8000490:	4631      	mov	r1, r6
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e70b      	b.n	80002b4 <__udivmoddi4+0xa0>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e9      	b.n	8000274 <__udivmoddi4+0x60>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6fd      	b.n	80002a0 <__udivmoddi4+0x8c>
 80004a4:	4543      	cmp	r3, r8
 80004a6:	d2e5      	bcs.n	8000474 <__udivmoddi4+0x260>
 80004a8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ac:	eb69 0104 	sbc.w	r1, r9, r4
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7df      	b.n	8000474 <__udivmoddi4+0x260>
 80004b4:	4608      	mov	r0, r1
 80004b6:	e7d2      	b.n	800045e <__udivmoddi4+0x24a>
 80004b8:	4660      	mov	r0, ip
 80004ba:	e78d      	b.n	80003d8 <__udivmoddi4+0x1c4>
 80004bc:	4681      	mov	r9, r0
 80004be:	e7b9      	b.n	8000434 <__udivmoddi4+0x220>
 80004c0:	4666      	mov	r6, ip
 80004c2:	e775      	b.n	80003b0 <__udivmoddi4+0x19c>
 80004c4:	4630      	mov	r0, r6
 80004c6:	e74a      	b.n	800035e <__udivmoddi4+0x14a>
 80004c8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004cc:	4439      	add	r1, r7
 80004ce:	e713      	b.n	80002f8 <__udivmoddi4+0xe4>
 80004d0:	3802      	subs	r0, #2
 80004d2:	443c      	add	r4, r7
 80004d4:	e724      	b.n	8000320 <__udivmoddi4+0x10c>
 80004d6:	bf00      	nop

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <can_fil_config>:




void can_fil_config()
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
		fil.FilterIdHigh=0x0000;
 80004e0:	4b17      	ldr	r3, [pc, #92]	; (8000540 <can_fil_config+0x64>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
	  	fil.FilterIdLow=0x0000;
 80004e6:	4b16      	ldr	r3, [pc, #88]	; (8000540 <can_fil_config+0x64>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	605a      	str	r2, [r3, #4]
	  	fil.FilterMaskIdHigh=0x0000;
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <can_fil_config+0x64>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
	  	fil.FilterMaskIdLow=0x0000;
 80004f2:	4b13      	ldr	r3, [pc, #76]	; (8000540 <can_fil_config+0x64>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	60da      	str	r2, [r3, #12]
	  	fil.FilterFIFOAssignment=0;
 80004f8:	4b11      	ldr	r3, [pc, #68]	; (8000540 <can_fil_config+0x64>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
	  	fil.FilterBank=0;
 80004fe:	4b10      	ldr	r3, [pc, #64]	; (8000540 <can_fil_config+0x64>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
	  	fil.FilterMode=CAN_FILTERMODE_IDMASK;
 8000504:	4b0e      	ldr	r3, [pc, #56]	; (8000540 <can_fil_config+0x64>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
	  	fil.FilterScale=CAN_FILTERSCALE_32BIT;
 800050a:	4b0d      	ldr	r3, [pc, #52]	; (8000540 <can_fil_config+0x64>)
 800050c:	2201      	movs	r2, #1
 800050e:	61da      	str	r2, [r3, #28]
	  	fil.FilterActivation=CAN_FILTER_ENABLE;
 8000510:	4b0b      	ldr	r3, [pc, #44]	; (8000540 <can_fil_config+0x64>)
 8000512:	2201      	movs	r2, #1
 8000514:	621a      	str	r2, [r3, #32]
	  	fil.SlaveStartFilterBank=0;
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <can_fil_config+0x64>)
 8000518:	2200      	movs	r2, #0
 800051a:	625a      	str	r2, [r3, #36]	; 0x24

	  	if (HAL_CAN_ConfigFilter(&hcan1, &fil) != HAL_OK)
 800051c:	4908      	ldr	r1, [pc, #32]	; (8000540 <can_fil_config+0x64>)
 800051e:	4809      	ldr	r0, [pc, #36]	; (8000544 <can_fil_config+0x68>)
 8000520:	f001 f816 	bl	8001550 <HAL_CAN_ConfigFilter>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d008      	beq.n	800053c <can_fil_config+0x60>
	  		    {
	  		        /* Filter configuration Error */
	  		        HAL_UART_Transmit(&huart3,"error in configfil\n\r", 20, 1000);
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	2214      	movs	r2, #20
 8000530:	4905      	ldr	r1, [pc, #20]	; (8000548 <can_fil_config+0x6c>)
 8000532:	4806      	ldr	r0, [pc, #24]	; (800054c <can_fil_config+0x70>)
 8000534:	f003 fabc 	bl	8003ab0 <HAL_UART_Transmit>
	  		        Error_Handler();
 8000538:	f000 fca8 	bl	8000e8c <Error_Handler>
	  		    }
}
 800053c:	bf00      	nop
 800053e:	bd80      	pop	{r7, pc}
 8000540:	200001e8 	.word	0x200001e8
 8000544:	20000184 	.word	0x20000184
 8000548:	080043d0 	.word	0x080043d0
 800054c:	200000e0 	.word	0x200000e0

08000550 <HAL_CAN_TxMailbox0CompleteCallback>:
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b08a      	sub	sp, #40	; 0x28
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

	HAL_UART_Transmit(&huart3, "txcalbckM0\n\r", 25, 1000);
 8000558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800055c:	2219      	movs	r2, #25
 800055e:	4907      	ldr	r1, [pc, #28]	; (800057c <HAL_CAN_TxMailbox0CompleteCallback+0x2c>)
 8000560:	4807      	ldr	r0, [pc, #28]	; (8000580 <HAL_CAN_TxMailbox0CompleteCallback+0x30>)
 8000562:	f003 faa5 	bl	8003ab0 <HAL_UART_Transmit>
	memset(mssg,0,25);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2219      	movs	r2, #25
 800056c:	2100      	movs	r1, #0
 800056e:	4618      	mov	r0, r3
 8000570:	f003 ff1a 	bl	80043a8 <memset>


}
 8000574:	bf00      	nop
 8000576:	3728      	adds	r7, #40	; 0x28
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	080043e8 	.word	0x080043e8
 8000580:	200000e0 	.word	0x200000e0

08000584 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)

{
 8000584:	b580      	push	{r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		HAL_UART_Transmit(&huart3, "txcalbckM1\n\r", 25, 1000);
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	2219      	movs	r2, #25
 8000592:	4907      	ldr	r1, [pc, #28]	; (80005b0 <HAL_CAN_TxMailbox1CompleteCallback+0x2c>)
 8000594:	4807      	ldr	r0, [pc, #28]	; (80005b4 <HAL_CAN_TxMailbox1CompleteCallback+0x30>)
 8000596:	f003 fa8b 	bl	8003ab0 <HAL_UART_Transmit>
		memset(mssg,0,25);
 800059a:	f107 030c 	add.w	r3, r7, #12
 800059e:	2219      	movs	r2, #25
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f003 ff00 	bl	80043a8 <memset>

}
 80005a8:	bf00      	nop
 80005aa:	3728      	adds	r7, #40	; 0x28
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	080043f8 	.word	0x080043f8
 80005b4:	200000e0 	.word	0x200000e0

080005b8 <HAL_CAN_TxMailbox2CompleteCallback>:
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b08a      	sub	sp, #40	; 0x28
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

		HAL_UART_Transmit(&huart3, "txcalbckM2\n\r", 25, 1000);
 80005c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005c4:	2219      	movs	r2, #25
 80005c6:	4907      	ldr	r1, [pc, #28]	; (80005e4 <HAL_CAN_TxMailbox2CompleteCallback+0x2c>)
 80005c8:	4807      	ldr	r0, [pc, #28]	; (80005e8 <HAL_CAN_TxMailbox2CompleteCallback+0x30>)
 80005ca:	f003 fa71 	bl	8003ab0 <HAL_UART_Transmit>
		memset(mssg,0,25);
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	2219      	movs	r2, #25
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fee6 	bl	80043a8 <memset>

}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	08004408 	.word	0x08004408
 80005e8:	200000e0 	.word	0x200000e0

080005ec <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b086      	sub	sp, #24
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 80005f4:	f000 fe56 	bl	80012a4 <HAL_ResumeTick>

    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) != HAL_OK)
 80005f8:	4b6a      	ldr	r3, [pc, #424]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80005fa:	4a6b      	ldr	r2, [pc, #428]	; (80007a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80005fc:	2100      	movs	r1, #0
 80005fe:	486b      	ldr	r0, [pc, #428]	; (80007ac <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8000600:	f001 f98f 	bl	8001922 <HAL_CAN_GetRxMessage>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d008      	beq.n	800061c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>
    {

    	HAL_UART_Transmit(&huart3,"error in reception\n\r", 20, 1000);
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	2214      	movs	r2, #20
 8000610:	4967      	ldr	r1, [pc, #412]	; (80007b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c4>)
 8000612:	4868      	ldr	r0, [pc, #416]	; (80007b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c8>)
 8000614:	f003 fa4c 	bl	8003ab0 <HAL_UART_Transmit>
    	Error_Handler();
 8000618:	f000 fc38 	bl	8000e8c <Error_Handler>
    }
    */

     //void (*fun_ptr)(int) = &switch_fp;
     //void (*fun_ptr[4])(rxhead.StdId);
    data=((arr[0])|(arr[1]<<8)|(arr[2]<<16)|(arr[3]<<24)|((arr[4]<<32)|(arr[5]<<40)|(arr[6]<<48)|(arr[7]<<56)));
 800061c:	4b61      	ldr	r3, [pc, #388]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	461a      	mov	r2, r3
 8000622:	4b60      	ldr	r3, [pc, #384]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	021b      	lsls	r3, r3, #8
 8000628:	431a      	orrs	r2, r3
 800062a:	4b5e      	ldr	r3, [pc, #376]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800062c:	789b      	ldrb	r3, [r3, #2]
 800062e:	041b      	lsls	r3, r3, #16
 8000630:	431a      	orrs	r2, r3
 8000632:	4b5c      	ldr	r3, [pc, #368]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000634:	78db      	ldrb	r3, [r3, #3]
 8000636:	061b      	lsls	r3, r3, #24
 8000638:	431a      	orrs	r2, r3
 800063a:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800063c:	791b      	ldrb	r3, [r3, #4]
 800063e:	4619      	mov	r1, r3
 8000640:	2320      	movs	r3, #32
 8000642:	4099      	lsls	r1, r3
 8000644:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000646:	795b      	ldrb	r3, [r3, #5]
 8000648:	4618      	mov	r0, r3
 800064a:	2328      	movs	r3, #40	; 0x28
 800064c:	fa00 f303 	lsl.w	r3, r0, r3
 8000650:	4319      	orrs	r1, r3
 8000652:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000654:	799b      	ldrb	r3, [r3, #6]
 8000656:	4618      	mov	r0, r3
 8000658:	2330      	movs	r3, #48	; 0x30
 800065a:	fa00 f303 	lsl.w	r3, r0, r3
 800065e:	4319      	orrs	r1, r3
 8000660:	4b50      	ldr	r3, [pc, #320]	; (80007a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 8000662:	79db      	ldrb	r3, [r3, #7]
 8000664:	4618      	mov	r0, r3
 8000666:	2338      	movs	r3, #56	; 0x38
 8000668:	fa00 f303 	lsl.w	r3, r0, r3
 800066c:	430b      	orrs	r3, r1
 800066e:	4313      	orrs	r3, r2
 8000670:	461a      	mov	r2, r3
 8000672:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000676:	4950      	ldr	r1, [pc, #320]	; (80007b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1cc>)
 8000678:	e9c1 2300 	strd	r2, r3, [r1]
    //arr[1]=var.d1;arr[2]=var.d2;arr[3]=var.d3;arr[4]=var.d4;arr[5]=var.d5;arr[6]=var.d6;arr[7]=var.d7;


    void (*fp[4])(void);

    fp[0]=call_to_speed_details;
 800067c:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <HAL_CAN_RxFifo0MsgPendingCallback+0x1d0>)
 800067e:	60bb      	str	r3, [r7, #8]
    fp[1]=call_to_battery_details;
 8000680:	4b4f      	ldr	r3, [pc, #316]	; (80007c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d4>)
 8000682:	60fb      	str	r3, [r7, #12]
    fp[2]=call_to_voltage_details;
 8000684:	4b4f      	ldr	r3, [pc, #316]	; (80007c4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1d8>)
 8000686:	613b      	str	r3, [r7, #16]
    fp[3]=call_to_default;
 8000688:	4b4f      	ldr	r3, [pc, #316]	; (80007c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1dc>)
 800068a:	617b      	str	r3, [r7, #20]
    choice=rxhead.StdId;
 800068c:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a4e      	ldr	r2, [pc, #312]	; (80007cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000692:	6013      	str	r3, [r2, #0]
    fp[choice]();
 8000694:	4b4d      	ldr	r3, [pc, #308]	; (80007cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1e0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	f107 0218 	add.w	r2, r7, #24
 800069e:	4413      	add	r3, r2
 80006a0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 80006a4:	4798      	blx	r3

    val1=(float)value1*floval;
 80006a6:	4b4a      	ldr	r3, [pc, #296]	; (80007d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e4>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	ee07 3a90 	vmov	s15, r3
 80006ae:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006b2:	4b48      	ldr	r3, [pc, #288]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80006b4:	edd3 7a00 	vldr	s15, [r3]
 80006b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006bc:	4b46      	ldr	r3, [pc, #280]	; (80007d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1ec>)
 80006be:	edc3 7a00 	vstr	s15, [r3]
   	val2=(float)value2*floval;
 80006c2:	4b46      	ldr	r3, [pc, #280]	; (80007dc <HAL_CAN_RxFifo0MsgPendingCallback+0x1f0>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	ee07 3a90 	vmov	s15, r3
 80006ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006ce:	4b41      	ldr	r3, [pc, #260]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80006d0:	edd3 7a00 	vldr	s15, [r3]
 80006d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006d8:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f4>)
 80006da:	edc3 7a00 	vstr	s15, [r3]
    val3=(float)value3*floval;
 80006de:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1f8>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	ee07 3a90 	vmov	s15, r3
 80006e6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80006ea:	4b3a      	ldr	r3, [pc, #232]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 80006ec:	edd3 7a00 	vldr	s15, [r3]
 80006f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1fc>)
 80006f6:	edc3 7a00 	vstr	s15, [r3]
    val4=(float)value4*floval;
 80006fa:	4b3c      	ldr	r3, [pc, #240]	; (80007ec <HAL_CAN_RxFifo0MsgPendingCallback+0x200>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	ee07 3a90 	vmov	s15, r3
 8000702:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000706:	4b33      	ldr	r3, [pc, #204]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000708:	edd3 7a00 	vldr	s15, [r3]
 800070c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000710:	4b37      	ldr	r3, [pc, #220]	; (80007f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x204>)
 8000712:	edc3 7a00 	vstr	s15, [r3]
    val5=(float)value5*floval;
 8000716:	4b37      	ldr	r3, [pc, #220]	; (80007f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x208>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	ee07 3a90 	vmov	s15, r3
 800071e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000722:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000724:	edd3 7a00 	vldr	s15, [r3]
 8000728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800072c:	4b32      	ldr	r3, [pc, #200]	; (80007f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x20c>)
 800072e:	edc3 7a00 	vstr	s15, [r3]
    val6=(float)value6*floval;
 8000732:	4b32      	ldr	r3, [pc, #200]	; (80007fc <HAL_CAN_RxFifo0MsgPendingCallback+0x210>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	ee07 3a90 	vmov	s15, r3
 800073a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800073e:	4b25      	ldr	r3, [pc, #148]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000740:	edd3 7a00 	vldr	s15, [r3]
 8000744:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <HAL_CAN_RxFifo0MsgPendingCallback+0x214>)
 800074a:	edc3 7a00 	vstr	s15, [r3]
  	val7=(float)value7*floval;
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <HAL_CAN_RxFifo0MsgPendingCallback+0x218>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	ee07 3a90 	vmov	s15, r3
 8000756:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800075a:	4b1e      	ldr	r3, [pc, #120]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 800075c:	edd3 7a00 	vldr	s15, [r3]
 8000760:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <HAL_CAN_RxFifo0MsgPendingCallback+0x21c>)
 8000766:	edc3 7a00 	vstr	s15, [r3]
  	val8=(float)value8*floval;
 800076a:	4b28      	ldr	r3, [pc, #160]	; (800080c <HAL_CAN_RxFifo0MsgPendingCallback+0x220>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	ee07 3a90 	vmov	s15, r3
 8000772:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000776:	4b17      	ldr	r3, [pc, #92]	; (80007d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x1e8>)
 8000778:	edd3 7a00 	vldr	s15, [r3]
 800077c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000780:	4b23      	ldr	r3, [pc, #140]	; (8000810 <HAL_CAN_RxFifo0MsgPendingCallback+0x224>)
 8000782:	edc3 7a00 	vstr	s15, [r3]

  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000786:	2201      	movs	r2, #1
 8000788:	2102      	movs	r1, #2
 800078a:	4822      	ldr	r0, [pc, #136]	; (8000814 <HAL_CAN_RxFifo0MsgPendingCallback+0x228>)
 800078c:	f001 fea2 	bl	80024d4 <HAL_GPIO_WritePin>
//  	  HAL_Delay(1000);
//  	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
//  		  HAL_Delay(1000);
  	 HAL_SuspendTick();
 8000790:	f000 fd78 	bl	8001284 <HAL_SuspendTick>

  		  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000794:	2101      	movs	r1, #1
 8000796:	2000      	movs	r0, #0
 8000798:	f001 fed8 	bl	800254c <HAL_PWR_EnterSLEEPMode>
}
 800079c:	bf00      	nop
 800079e:	3718      	adds	r7, #24
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000034 	.word	0x20000034
 80007a8:	20000164 	.word	0x20000164
 80007ac:	20000184 	.word	0x20000184
 80007b0:	08004418 	.word	0x08004418
 80007b4:	200000e0 	.word	0x200000e0
 80007b8:	200000a0 	.word	0x200000a0
 80007bc:	0800084d 	.word	0x0800084d
 80007c0:	08000945 	.word	0x08000945
 80007c4:	08000a09 	.word	0x08000a09
 80007c8:	08000acd 	.word	0x08000acd
 80007cc:	20000098 	.word	0x20000098
 80007d0:	200000d8 	.word	0x200000d8
 80007d4:	200000b8 	.word	0x200000b8
 80007d8:	200000c4 	.word	0x200000c4
 80007dc:	200000a8 	.word	0x200000a8
 80007e0:	20000088 	.word	0x20000088
 80007e4:	2000007c 	.word	0x2000007c
 80007e8:	20000090 	.word	0x20000090
 80007ec:	200000bc 	.word	0x200000bc
 80007f0:	20000068 	.word	0x20000068
 80007f4:	20000080 	.word	0x20000080
 80007f8:	20000074 	.word	0x20000074
 80007fc:	2000004c 	.word	0x2000004c
 8000800:	200000dc 	.word	0x200000dc
 8000804:	200000d0 	.word	0x200000d0
 8000808:	2000008c 	.word	0x2000008c
 800080c:	20000070 	.word	0x20000070
 8000810:	20000064 	.word	0x20000064
 8000814:	48000400 	.word	0x48000400

08000818 <HAL_CAN_ErrorCallback>:

void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08a      	sub	sp, #40	; 0x28
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
	uint8_t mssg[25];

			HAL_UART_Transmit(&huart3, "callbck_error\n\r", 25, 1000);
 8000820:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000824:	2219      	movs	r2, #25
 8000826:	4907      	ldr	r1, [pc, #28]	; (8000844 <HAL_CAN_ErrorCallback+0x2c>)
 8000828:	4807      	ldr	r0, [pc, #28]	; (8000848 <HAL_CAN_ErrorCallback+0x30>)
 800082a:	f003 f941 	bl	8003ab0 <HAL_UART_Transmit>
			memset(mssg,0,25);
 800082e:	f107 030c 	add.w	r3, r7, #12
 8000832:	2219      	movs	r2, #25
 8000834:	2100      	movs	r1, #0
 8000836:	4618      	mov	r0, r3
 8000838:	f003 fdb6 	bl	80043a8 <memset>

}
 800083c:	bf00      	nop
 800083e:	3728      	adds	r7, #40	; 0x28
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	08004430 	.word	0x08004430
 8000848:	200000e0 	.word	0x200000e0

0800084c <call_to_speed_details>:
void call_to_speed_details(uint32_t var)
{
 800084c:	b590      	push	{r4, r7, lr}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
	value1=((arr[0])|(arr[1]<<8)|(arr[2]<<16)|(arr[3]<<24));
 8000854:	4b33      	ldr	r3, [pc, #204]	; (8000924 <call_to_speed_details+0xd8>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	461a      	mov	r2, r3
 800085a:	4b32      	ldr	r3, [pc, #200]	; (8000924 <call_to_speed_details+0xd8>)
 800085c:	785b      	ldrb	r3, [r3, #1]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	431a      	orrs	r2, r3
 8000862:	4b30      	ldr	r3, [pc, #192]	; (8000924 <call_to_speed_details+0xd8>)
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	041b      	lsls	r3, r3, #16
 8000868:	431a      	orrs	r2, r3
 800086a:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <call_to_speed_details+0xd8>)
 800086c:	78db      	ldrb	r3, [r3, #3]
 800086e:	061b      	lsls	r3, r3, #24
 8000870:	4313      	orrs	r3, r2
 8000872:	461a      	mov	r2, r3
 8000874:	4b2c      	ldr	r3, [pc, #176]	; (8000928 <call_to_speed_details+0xdc>)
 8000876:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3,str1, strlen(str1), 1000);
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <call_to_speed_details+0xe0>)
 800087a:	681c      	ldr	r4, [r3, #0]
 800087c:	4b2b      	ldr	r3, [pc, #172]	; (800092c <call_to_speed_details+0xe0>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff fca7 	bl	80001d4 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800088e:	4621      	mov	r1, r4
 8000890:	4827      	ldr	r0, [pc, #156]	; (8000930 <call_to_speed_details+0xe4>)
 8000892:	f003 f90d 	bl	8003ab0 <HAL_UART_Transmit>
	value2=((arr[4])|(arr[5]<<8)|(arr[6]<<16)|(arr[7]<<24));
 8000896:	4b23      	ldr	r3, [pc, #140]	; (8000924 <call_to_speed_details+0xd8>)
 8000898:	791b      	ldrb	r3, [r3, #4]
 800089a:	461a      	mov	r2, r3
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <call_to_speed_details+0xd8>)
 800089e:	795b      	ldrb	r3, [r3, #5]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	431a      	orrs	r2, r3
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <call_to_speed_details+0xd8>)
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	041b      	lsls	r3, r3, #16
 80008aa:	431a      	orrs	r2, r3
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <call_to_speed_details+0xd8>)
 80008ae:	79db      	ldrb	r3, [r3, #7]
 80008b0:	061b      	lsls	r3, r3, #24
 80008b2:	4313      	orrs	r3, r2
 80008b4:	461a      	mov	r2, r3
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <call_to_speed_details+0xe8>)
 80008b8:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, str2, strlen(str2), 1000);
 80008ba:	4b1f      	ldr	r3, [pc, #124]	; (8000938 <call_to_speed_details+0xec>)
 80008bc:	681c      	ldr	r4, [r3, #0]
 80008be:	4b1e      	ldr	r3, [pc, #120]	; (8000938 <call_to_speed_details+0xec>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff fc86 	bl	80001d4 <strlen>
 80008c8:	4603      	mov	r3, r0
 80008ca:	b29a      	uxth	r2, r3
 80008cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008d0:	4621      	mov	r1, r4
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <call_to_speed_details+0xe4>)
 80008d4:	f003 f8ec 	bl	8003ab0 <HAL_UART_Transmit>
    data1=((arr[0]&(0xF0))|arr[1]<<8|(((arr[2])&(0x0F))<<16));
 80008d8:	4b12      	ldr	r3, [pc, #72]	; (8000924 <call_to_speed_details+0xd8>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <call_to_speed_details+0xd8>)
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	431a      	orrs	r2, r3
 80008e8:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <call_to_speed_details+0xd8>)
 80008ea:	789b      	ldrb	r3, [r3, #2]
 80008ec:	041b      	lsls	r3, r3, #16
 80008ee:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80008f2:	4313      	orrs	r3, r2
 80008f4:	461a      	mov	r2, r3
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <call_to_speed_details+0xf0>)
 80008f8:	601a      	str	r2, [r3, #0]
    data2=((arr[1]&(0xF0))|arr[2]<<8|(((arr[3])&(0x0F))<<16));
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <call_to_speed_details+0xd8>)
 80008fc:	785b      	ldrb	r3, [r3, #1]
 80008fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <call_to_speed_details+0xd8>)
 8000904:	789b      	ldrb	r3, [r3, #2]
 8000906:	021b      	lsls	r3, r3, #8
 8000908:	431a      	orrs	r2, r3
 800090a:	4b06      	ldr	r3, [pc, #24]	; (8000924 <call_to_speed_details+0xd8>)
 800090c:	78db      	ldrb	r3, [r3, #3]
 800090e:	041b      	lsls	r3, r3, #16
 8000910:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000914:	4313      	orrs	r3, r2
 8000916:	461a      	mov	r2, r3
 8000918:	4b09      	ldr	r3, [pc, #36]	; (8000940 <call_to_speed_details+0xf4>)
 800091a:	601a      	str	r2, [r3, #0]

}
 800091c:	bf00      	nop
 800091e:	370c      	adds	r7, #12
 8000920:	46bd      	mov	sp, r7
 8000922:	bd90      	pop	{r4, r7, pc}
 8000924:	20000034 	.word	0x20000034
 8000928:	200000d8 	.word	0x200000d8
 800092c:	20000094 	.word	0x20000094
 8000930:	200000e0 	.word	0x200000e0
 8000934:	200000a8 	.word	0x200000a8
 8000938:	200000cc 	.word	0x200000cc
 800093c:	20000050 	.word	0x20000050
 8000940:	20000054 	.word	0x20000054

08000944 <call_to_battery_details>:
void call_to_battery_details(uint32_t var)
{
 8000944:	b480      	push	{r7}
 8000946:	b083      	sub	sp, #12
 8000948:	af00      	add	r7, sp, #0
 800094a:	6078      	str	r0, [r7, #4]
	value1=((arr[0])|(arr[1]<<8));
 800094c:	4b27      	ldr	r3, [pc, #156]	; (80009ec <call_to_battery_details+0xa8>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	461a      	mov	r2, r3
 8000952:	4b26      	ldr	r3, [pc, #152]	; (80009ec <call_to_battery_details+0xa8>)
 8000954:	785b      	ldrb	r3, [r3, #1]
 8000956:	021b      	lsls	r3, r3, #8
 8000958:	4313      	orrs	r3, r2
 800095a:	461a      	mov	r2, r3
 800095c:	4b24      	ldr	r3, [pc, #144]	; (80009f0 <call_to_battery_details+0xac>)
 800095e:	601a      	str	r2, [r3, #0]
	value2=((arr[2])|(arr[3]<<8));
 8000960:	4b22      	ldr	r3, [pc, #136]	; (80009ec <call_to_battery_details+0xa8>)
 8000962:	789b      	ldrb	r3, [r3, #2]
 8000964:	461a      	mov	r2, r3
 8000966:	4b21      	ldr	r3, [pc, #132]	; (80009ec <call_to_battery_details+0xa8>)
 8000968:	78db      	ldrb	r3, [r3, #3]
 800096a:	021b      	lsls	r3, r3, #8
 800096c:	4313      	orrs	r3, r2
 800096e:	461a      	mov	r2, r3
 8000970:	4b20      	ldr	r3, [pc, #128]	; (80009f4 <call_to_battery_details+0xb0>)
 8000972:	601a      	str	r2, [r3, #0]
	value3=((arr[4])|(arr[5]<<8));
 8000974:	4b1d      	ldr	r3, [pc, #116]	; (80009ec <call_to_battery_details+0xa8>)
 8000976:	791b      	ldrb	r3, [r3, #4]
 8000978:	461a      	mov	r2, r3
 800097a:	4b1c      	ldr	r3, [pc, #112]	; (80009ec <call_to_battery_details+0xa8>)
 800097c:	795b      	ldrb	r3, [r3, #5]
 800097e:	021b      	lsls	r3, r3, #8
 8000980:	4313      	orrs	r3, r2
 8000982:	461a      	mov	r2, r3
 8000984:	4b1c      	ldr	r3, [pc, #112]	; (80009f8 <call_to_battery_details+0xb4>)
 8000986:	601a      	str	r2, [r3, #0]
	value4=((arr[6])|(arr[7]<<8));
 8000988:	4b18      	ldr	r3, [pc, #96]	; (80009ec <call_to_battery_details+0xa8>)
 800098a:	799b      	ldrb	r3, [r3, #6]
 800098c:	461a      	mov	r2, r3
 800098e:	4b17      	ldr	r3, [pc, #92]	; (80009ec <call_to_battery_details+0xa8>)
 8000990:	79db      	ldrb	r3, [r3, #7]
 8000992:	021b      	lsls	r3, r3, #8
 8000994:	4313      	orrs	r3, r2
 8000996:	461a      	mov	r2, r3
 8000998:	4b18      	ldr	r3, [pc, #96]	; (80009fc <call_to_battery_details+0xb8>)
 800099a:	601a      	str	r2, [r3, #0]
	data1=((arr[2]&(0xF0))|arr[3]<<8|(((arr[4])&(0x0F))<<16));
 800099c:	4b13      	ldr	r3, [pc, #76]	; (80009ec <call_to_battery_details+0xa8>)
 800099e:	789b      	ldrb	r3, [r3, #2]
 80009a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80009a4:	4b11      	ldr	r3, [pc, #68]	; (80009ec <call_to_battery_details+0xa8>)
 80009a6:	78db      	ldrb	r3, [r3, #3]
 80009a8:	021b      	lsls	r3, r3, #8
 80009aa:	431a      	orrs	r2, r3
 80009ac:	4b0f      	ldr	r3, [pc, #60]	; (80009ec <call_to_battery_details+0xa8>)
 80009ae:	791b      	ldrb	r3, [r3, #4]
 80009b0:	041b      	lsls	r3, r3, #16
 80009b2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009b6:	4313      	orrs	r3, r2
 80009b8:	461a      	mov	r2, r3
 80009ba:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <call_to_battery_details+0xbc>)
 80009bc:	601a      	str	r2, [r3, #0]
	data2=((arr[5]&(0xF0))|arr[6]<<8|(((arr[7])&(0x0F))<<16));
 80009be:	4b0b      	ldr	r3, [pc, #44]	; (80009ec <call_to_battery_details+0xa8>)
 80009c0:	795b      	ldrb	r3, [r3, #5]
 80009c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80009c6:	4b09      	ldr	r3, [pc, #36]	; (80009ec <call_to_battery_details+0xa8>)
 80009c8:	799b      	ldrb	r3, [r3, #6]
 80009ca:	021b      	lsls	r3, r3, #8
 80009cc:	431a      	orrs	r2, r3
 80009ce:	4b07      	ldr	r3, [pc, #28]	; (80009ec <call_to_battery_details+0xa8>)
 80009d0:	79db      	ldrb	r3, [r3, #7]
 80009d2:	041b      	lsls	r3, r3, #16
 80009d4:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80009d8:	4313      	orrs	r3, r2
 80009da:	461a      	mov	r2, r3
 80009dc:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <call_to_battery_details+0xc0>)
 80009de:	601a      	str	r2, [r3, #0]

}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	20000034 	.word	0x20000034
 80009f0:	200000d8 	.word	0x200000d8
 80009f4:	200000a8 	.word	0x200000a8
 80009f8:	2000007c 	.word	0x2000007c
 80009fc:	200000bc 	.word	0x200000bc
 8000a00:	20000050 	.word	0x20000050
 8000a04:	20000054 	.word	0x20000054

08000a08 <call_to_voltage_details>:
void call_to_voltage_details(uint32_t var)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	value1=((arr[0])|(arr[3]<<8)|(arr[6]<<16));
 8000a10:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	461a      	mov	r2, r3
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a18:	78db      	ldrb	r3, [r3, #3]
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a20:	799b      	ldrb	r3, [r3, #6]
 8000a22:	041b      	lsls	r3, r3, #16
 8000a24:	4313      	orrs	r3, r2
 8000a26:	461a      	mov	r2, r3
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <call_to_voltage_details+0xac>)
 8000a2a:	601a      	str	r2, [r3, #0]
	value2=((arr[1])|(arr[4]<<8)|(arr[7]<<16));
 8000a2c:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a2e:	785b      	ldrb	r3, [r3, #1]
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a34:	791b      	ldrb	r3, [r3, #4]
 8000a36:	021b      	lsls	r3, r3, #8
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a3c:	79db      	ldrb	r3, [r3, #7]
 8000a3e:	041b      	lsls	r3, r3, #16
 8000a40:	4313      	orrs	r3, r2
 8000a42:	461a      	mov	r2, r3
 8000a44:	4b1c      	ldr	r3, [pc, #112]	; (8000ab8 <call_to_voltage_details+0xb0>)
 8000a46:	601a      	str	r2, [r3, #0]
	value3=((arr[2])|(arr[5]<<8));
 8000a48:	4b19      	ldr	r3, [pc, #100]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a4a:	789b      	ldrb	r3, [r3, #2]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a50:	795b      	ldrb	r3, [r3, #5]
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	4313      	orrs	r3, r2
 8000a56:	461a      	mov	r2, r3
 8000a58:	4b18      	ldr	r3, [pc, #96]	; (8000abc <call_to_voltage_details+0xb4>)
 8000a5a:	601a      	str	r2, [r3, #0]
	data1=(arr[2]&(0xF0));
 8000a5c:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a5e:	789b      	ldrb	r3, [r3, #2]
 8000a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a64:	4a16      	ldr	r2, [pc, #88]	; (8000ac0 <call_to_voltage_details+0xb8>)
 8000a66:	6013      	str	r3, [r2, #0]
	data2=(arr[6]&(0xF0))|(((arr[7])&(0x0F))<<16);
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a6a:	799b      	ldrb	r3, [r3, #6]
 8000a6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000a70:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a72:	79db      	ldrb	r3, [r3, #7]
 8000a74:	041b      	lsls	r3, r3, #16
 8000a76:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a7a:	4313      	orrs	r3, r2
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <call_to_voltage_details+0xbc>)
 8000a80:	601a      	str	r2, [r3, #0]
	data3=((arr[5]&(0xF0))|arr[6]<<8|(((arr[7])&(0x0F))<<16));
 8000a82:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a84:	795b      	ldrb	r3, [r3, #5]
 8000a86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a8c:	799b      	ldrb	r3, [r3, #6]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	431a      	orrs	r2, r3
 8000a92:	4b07      	ldr	r3, [pc, #28]	; (8000ab0 <call_to_voltage_details+0xa8>)
 8000a94:	79db      	ldrb	r3, [r3, #7]
 8000a96:	041b      	lsls	r3, r3, #16
 8000a98:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	461a      	mov	r2, r3
 8000aa0:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <call_to_voltage_details+0xc0>)
 8000aa2:	601a      	str	r2, [r3, #0]

}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	20000034 	.word	0x20000034
 8000ab4:	200000d8 	.word	0x200000d8
 8000ab8:	200000a8 	.word	0x200000a8
 8000abc:	2000007c 	.word	0x2000007c
 8000ac0:	20000050 	.word	0x20000050
 8000ac4:	20000054 	.word	0x20000054
 8000ac8:	200000b4 	.word	0x200000b4

08000acc <call_to_default>:
void call_to_default(uint32_t var)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	value1=0xFFFFFFFF;
 8000ad4:	4b12      	ldr	r3, [pc, #72]	; (8000b20 <call_to_default+0x54>)
 8000ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8000ada:	601a      	str	r2, [r3, #0]
	value2=0xFFFFFFFF;
 8000adc:	4b11      	ldr	r3, [pc, #68]	; (8000b24 <call_to_default+0x58>)
 8000ade:	f04f 32ff 	mov.w	r2, #4294967295
 8000ae2:	601a      	str	r2, [r3, #0]
	value3=0xFFFFFFFF;
 8000ae4:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <call_to_default+0x5c>)
 8000ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8000aea:	601a      	str	r2, [r3, #0]
	value4=0xFFFFFFFF;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <call_to_default+0x60>)
 8000aee:	f04f 32ff 	mov.w	r2, #4294967295
 8000af2:	601a      	str	r2, [r3, #0]
	value5=0xFFFFFFFF;
 8000af4:	4b0e      	ldr	r3, [pc, #56]	; (8000b30 <call_to_default+0x64>)
 8000af6:	f04f 32ff 	mov.w	r2, #4294967295
 8000afa:	601a      	str	r2, [r3, #0]
	value6=0xFFFFFFFF;
 8000afc:	4b0d      	ldr	r3, [pc, #52]	; (8000b34 <call_to_default+0x68>)
 8000afe:	f04f 32ff 	mov.w	r2, #4294967295
 8000b02:	601a      	str	r2, [r3, #0]
	value7=0xFFFFFFFF;
 8000b04:	4b0c      	ldr	r3, [pc, #48]	; (8000b38 <call_to_default+0x6c>)
 8000b06:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0a:	601a      	str	r2, [r3, #0]
	value8=0xFFFFFFFF;
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <call_to_default+0x70>)
 8000b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8000b12:	601a      	str	r2, [r3, #0]

}
 8000b14:	bf00      	nop
 8000b16:	370c      	adds	r7, #12
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	200000d8 	.word	0x200000d8
 8000b24:	200000a8 	.word	0x200000a8
 8000b28:	2000007c 	.word	0x2000007c
 8000b2c:	200000bc 	.word	0x200000bc
 8000b30:	20000080 	.word	0x20000080
 8000b34:	2000004c 	.word	0x2000004c
 8000b38:	200000d0 	.word	0x200000d0
 8000b3c:	20000070 	.word	0x20000070

08000b40 <can_tx>:




void can_tx()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0

	uint8_t message[5]="KINGS";
 8000b46:	4a0f      	ldr	r2, [pc, #60]	; (8000b84 <can_tx+0x44>)
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b50:	6018      	str	r0, [r3, #0]
 8000b52:	3304      	adds	r3, #4
 8000b54:	7019      	strb	r1, [r3, #0]
	uint32_t mailbox;
	txhead.ExtId=0x06;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <can_tx+0x48>)
 8000b58:	2206      	movs	r2, #6
 8000b5a:	605a      	str	r2, [r3, #4]
	txhead.IDE=CAN_ID_EXT;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <can_tx+0x48>)
 8000b5e:	2204      	movs	r2, #4
 8000b60:	609a      	str	r2, [r3, #8]
	txhead.RTR=CAN_RTR_DATA;
 8000b62:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <can_tx+0x48>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	60da      	str	r2, [r3, #12]
	txhead.DLC=5;
 8000b68:	4b07      	ldr	r3, [pc, #28]	; (8000b88 <can_tx+0x48>)
 8000b6a:	2205      	movs	r2, #5
 8000b6c:	611a      	str	r2, [r3, #16]
	HAL_CAN_AddTxMessage(&hcan1,&txhead, message, &mailbox);
 8000b6e:	1d3b      	adds	r3, r7, #4
 8000b70:	f107 0208 	add.w	r2, r7, #8
 8000b74:	4904      	ldr	r1, [pc, #16]	; (8000b88 <can_tx+0x48>)
 8000b76:	4805      	ldr	r0, [pc, #20]	; (8000b8c <can_tx+0x4c>)
 8000b78:	f000 fdf8 	bl	800176c <HAL_CAN_AddTxMessage>

}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08004440 	.word	0x08004440
 8000b88:	20000210 	.word	0x20000210
 8000b8c:	20000184 	.word	0x20000184

08000b90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b94:	f000 fb01 	bl	800119a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b98:	f000 f830 	bl	8000bfc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b9c:	f000 f906 	bl	8000dac <MX_GPIO_Init>
  MX_CAN1_Init();
 8000ba0:	f000 f89e 	bl	8000ce0 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000ba4:	f000 f8d2 	bl	8000d4c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //CAN_INIT(&canh1,CAN_INIT_BRIDGE,CAN_STB_BRIDGE,CAN_CONFIG_BRIDGE);//can_init,can_stb,can_congfig
  //CAN_ACTIVATE(&canh1,CAN_ACTIVATE_BRIDGE,CAN_START_BRIDGE);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bae:	480f      	ldr	r0, [pc, #60]	; (8000bec <main+0x5c>)
 8000bb0:	f001 fc90 	bl	80024d4 <HAL_GPIO_WritePin>
  can_fil_config();
 8000bb4:	f7ff fc92 	bl	80004dc <can_fil_config>
  HAL_CAN_ActivateNotification(&hcan1,CAN_IT_RX_FIFO0_MSG_PENDING|CAN_IT_ERROR);
 8000bb8:	f248 0102 	movw	r1, #32770	; 0x8002
 8000bbc:	480c      	ldr	r0, [pc, #48]	; (8000bf0 <main+0x60>)
 8000bbe:	f000 ffc2 	bl	8001b46 <HAL_CAN_ActivateNotification>
  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <main+0x60>)
 8000bc4:	f000 fd8e 	bl	80016e4 <HAL_CAN_Start>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d008      	beq.n	8000be0 <main+0x50>
   {
 	  HAL_UART_Transmit(&huart3,"error in can_start\n\r", 20, 1000);
 8000bce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd2:	2214      	movs	r2, #20
 8000bd4:	4907      	ldr	r1, [pc, #28]	; (8000bf4 <main+0x64>)
 8000bd6:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <main+0x68>)
 8000bd8:	f002 ff6a 	bl	8003ab0 <HAL_UART_Transmit>
 	  Error_Handler();
 8000bdc:	f000 f956 	bl	8000e8c <Error_Handler>
   }
  //HAL_SuspendTick();
      //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//indication to sleep mode
      //HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
      //HAL_ResumeTick();
  can_tx(); can_tx();
 8000be0:	f7ff ffae 	bl	8000b40 <can_tx>
 8000be4:	f7ff ffac 	bl	8000b40 <can_tx>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <main+0x58>
 8000bea:	bf00      	nop
 8000bec:	48000400 	.word	0x48000400
 8000bf0:	20000184 	.word	0x20000184
 8000bf4:	08004448 	.word	0x08004448
 8000bf8:	200000e0 	.word	0x200000e0

08000bfc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b0b0      	sub	sp, #192	; 0xc0
 8000c00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c02:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c06:	2244      	movs	r2, #68	; 0x44
 8000c08:	2100      	movs	r1, #0
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f003 fbcc 	bl	80043a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c10:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	463b      	mov	r3, r7
 8000c22:	2268      	movs	r2, #104	; 0x68
 8000c24:	2100      	movs	r1, #0
 8000c26:	4618      	mov	r0, r3
 8000c28:	f003 fbbe 	bl	80043a8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000c2c:	2310      	movs	r3, #16
 8000c2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c30:	2301      	movs	r3, #1
 8000c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c3c:	2360      	movs	r3, #96	; 0x60
 8000c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c42:	2302      	movs	r3, #2
 8000c44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000c54:	2328      	movs	r3, #40	; 0x28
 8000c56:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000c5a:	2307      	movs	r3, #7
 8000c5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c60:	2302      	movs	r3, #2
 8000c62:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c66:	2302      	movs	r3, #2
 8000c68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fd4b 	bl	800270c <HAL_RCC_OscConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000c7c:	f000 f906 	bl	8000e8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c80:	230f      	movs	r3, #15
 8000c82:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c84:	2303      	movs	r3, #3
 8000c86:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c90:	2300      	movs	r3, #0
 8000c92:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c94:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c98:	2104      	movs	r1, #4
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f002 f956 	bl	8002f4c <HAL_RCC_ClockConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000ca6:	f000 f8f1 	bl	8000e8c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000caa:	2304      	movs	r3, #4
 8000cac:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f002 fb4f 	bl	8003358 <HAL_RCCEx_PeriphCLKConfig>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000cc0:	f000 f8e4 	bl	8000e8c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000cc4:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cc8:	f001 fc82 	bl	80025d0 <HAL_PWREx_ControlVoltageScaling>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000cd2:	f000 f8db 	bl	8000e8c <Error_Handler>
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	37c0      	adds	r7, #192	; 0xc0
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
	...

08000ce0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000ce6:	4a18      	ldr	r2, [pc, #96]	; (8000d48 <MX_CAN1_Init+0x68>)
 8000ce8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000cea:	4b16      	ldr	r3, [pc, #88]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000cec:	2210      	movs	r2, #16
 8000cee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_5TQ;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000cfe:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d02:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_4TQ;
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d06:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000d0a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d0c:	4b0d      	ldr	r3, [pc, #52]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d12:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d18:	4b0a      	ldr	r3, [pc, #40]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d1e:	4b09      	ldr	r3, [pc, #36]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d24:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d2a:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	; (8000d44 <MX_CAN1_Init+0x64>)
 8000d32:	f000 fac7 	bl	80012c4 <HAL_CAN_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d3c:	f000 f8a6 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000184 	.word	0x20000184
 8000d48:	40006400 	.word	0x40006400

08000d4c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d52:	4a15      	ldr	r2, [pc, #84]	; (8000da8 <MX_USART3_UART_Init+0x5c>)
 8000d54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d56:	4b13      	ldr	r3, [pc, #76]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d64:	4b0f      	ldr	r3, [pc, #60]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d70:	4b0c      	ldr	r3, [pc, #48]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d72:	220c      	movs	r2, #12
 8000d74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d76:	4b0b      	ldr	r3, [pc, #44]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d82:	4b08      	ldr	r3, [pc, #32]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d8e:	4805      	ldr	r0, [pc, #20]	; (8000da4 <MX_USART3_UART_Init+0x58>)
 8000d90:	f002 fe40 	bl	8003a14 <HAL_UART_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d9a:	f000 f877 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	200000e0 	.word	0x200000e0
 8000da8:	40004800 	.word	0x40004800

08000dac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08a      	sub	sp, #40	; 0x28
 8000db0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0314 	add.w	r3, r7, #20
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b2c      	ldr	r3, [pc, #176]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dde:	4a28      	ldr	r2, [pc, #160]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000de0:	f043 0301 	orr.w	r3, r3, #1
 8000de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df2:	4b23      	ldr	r3, [pc, #140]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df6:	4a22      	ldr	r2, [pc, #136]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000df8:	f043 0304 	orr.w	r3, r3, #4
 8000dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfe:	4b20      	ldr	r3, [pc, #128]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e02:	f003 0304 	and.w	r3, r3, #4
 8000e06:	60bb      	str	r3, [r7, #8]
 8000e08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0a:	4b1d      	ldr	r3, [pc, #116]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000e10:	f043 0302 	orr.w	r3, r3, #2
 8000e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e16:	4b1a      	ldr	r3, [pc, #104]	; (8000e80 <MX_GPIO_Init+0xd4>)
 8000e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1a:	f003 0302 	and.w	r3, r3, #2
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	f244 0106 	movw	r1, #16390	; 0x4006
 8000e28:	4816      	ldr	r0, [pc, #88]	; (8000e84 <MX_GPIO_Init+0xd8>)
 8000e2a:	f001 fb53 	bl	80024d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <MX_GPIO_Init+0xdc>)
 8000e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3a:	f107 0314 	add.w	r3, r7, #20
 8000e3e:	4619      	mov	r1, r3
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f001 f9cc 	bl	80021e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14;
 8000e48:	f244 0306 	movw	r3, #16390	; 0x4006
 8000e4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5a:	f107 0314 	add.w	r3, r7, #20
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4808      	ldr	r0, [pc, #32]	; (8000e84 <MX_GPIO_Init+0xd8>)
 8000e62:	f001 f9bd 	bl	80021e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2100      	movs	r1, #0
 8000e6a:	2007      	movs	r0, #7
 8000e6c:	f001 f981 	bl	8002172 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e70:	2007      	movs	r0, #7
 8000e72:	f001 f99a 	bl	80021aa <HAL_NVIC_EnableIRQ>

}
 8000e76:	bf00      	nop
 8000e78:	3728      	adds	r7, #40	; 0x28
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40021000 	.word	0x40021000
 8000e84:	48000400 	.word	0x48000400
 8000e88:	10110000 	.word	0x10110000

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	e7fe      	b.n	8000e94 <Error_Handler+0x8>
	...

08000e98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9e:	4b0f      	ldr	r3, [pc, #60]	; (8000edc <HAL_MspInit+0x44>)
 8000ea0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_MspInit+0x44>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6613      	str	r3, [r2, #96]	; 0x60
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <HAL_MspInit+0x44>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	f003 0301 	and.w	r3, r3, #1
 8000eb2:	607b      	str	r3, [r7, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eb6:	4b09      	ldr	r3, [pc, #36]	; (8000edc <HAL_MspInit+0x44>)
 8000eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eba:	4a08      	ldr	r2, [pc, #32]	; (8000edc <HAL_MspInit+0x44>)
 8000ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec2:	4b06      	ldr	r3, [pc, #24]	; (8000edc <HAL_MspInit+0x44>)
 8000ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eca:	603b      	str	r3, [r7, #0]
 8000ecc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	370c      	adds	r7, #12
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	40021000 	.word	0x40021000

08000ee0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a27      	ldr	r2, [pc, #156]	; (8000f9c <HAL_CAN_MspInit+0xbc>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d148      	bne.n	8000f94 <HAL_CAN_MspInit+0xb4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f02:	4b27      	ldr	r3, [pc, #156]	; (8000fa0 <HAL_CAN_MspInit+0xc0>)
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	4a26      	ldr	r2, [pc, #152]	; (8000fa0 <HAL_CAN_MspInit+0xc0>)
 8000f08:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000f0c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f0e:	4b24      	ldr	r3, [pc, #144]	; (8000fa0 <HAL_CAN_MspInit+0xc0>)
 8000f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1a:	4b21      	ldr	r3, [pc, #132]	; (8000fa0 <HAL_CAN_MspInit+0xc0>)
 8000f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1e:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <HAL_CAN_MspInit+0xc0>)
 8000f20:	f043 0302 	orr.w	r3, r3, #2
 8000f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f26:	4b1e      	ldr	r3, [pc, #120]	; (8000fa0 <HAL_CAN_MspInit+0xc0>)
 8000f28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000f32:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000f44:	230a      	movs	r3, #10
 8000f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4815      	ldr	r0, [pc, #84]	; (8000fa4 <HAL_CAN_MspInit+0xc4>)
 8000f50:	f001 f946 	bl	80021e0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8000f54:	2200      	movs	r2, #0
 8000f56:	2100      	movs	r1, #0
 8000f58:	2013      	movs	r0, #19
 8000f5a:	f001 f90a 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000f5e:	2013      	movs	r0, #19
 8000f60:	f001 f923 	bl	80021aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2100      	movs	r1, #0
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f001 f902 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000f6e:	2014      	movs	r0, #20
 8000f70:	f001 f91b 	bl	80021aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2100      	movs	r1, #0
 8000f78:	2015      	movs	r0, #21
 8000f7a:	f001 f8fa 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f7e:	2015      	movs	r0, #21
 8000f80:	f001 f913 	bl	80021aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2016      	movs	r0, #22
 8000f8a:	f001 f8f2 	bl	8002172 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000f8e:	2016      	movs	r0, #22
 8000f90:	f001 f90b 	bl	80021aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40006400 	.word	0x40006400
 8000fa0:	40021000 	.word	0x40021000
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08a      	sub	sp, #40	; 0x28
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a17      	ldr	r2, [pc, #92]	; (8001024 <HAL_UART_MspInit+0x7c>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d127      	bne.n	800101a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <HAL_UART_MspInit+0x80>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a16      	ldr	r2, [pc, #88]	; (8001028 <HAL_UART_MspInit+0x80>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b14      	ldr	r3, [pc, #80]	; (8001028 <HAL_UART_MspInit+0x80>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fe2:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_UART_MspInit+0x80>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a10      	ldr	r2, [pc, #64]	; (8001028 <HAL_UART_MspInit+0x80>)
 8000fe8:	f043 0304 	orr.w	r3, r3, #4
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <HAL_UART_MspInit+0x80>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0304 	and.w	r3, r3, #4
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ffa:	2330      	movs	r3, #48	; 0x30
 8000ffc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffe:	2302      	movs	r3, #2
 8001000:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800100a:	2307      	movs	r3, #7
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <HAL_UART_MspInit+0x84>)
 8001016:	f001 f8e3 	bl	80021e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800101a:	bf00      	nop
 800101c:	3728      	adds	r7, #40	; 0x28
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	40004800 	.word	0x40004800
 8001028:	40021000 	.word	0x40021000
 800102c:	48000800 	.word	0x48000800

08001030 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <NMI_Handler+0x4>

08001036 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <HardFault_Handler+0x4>

0800103c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <MemManage_Handler+0x4>

08001042 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001046:	e7fe      	b.n	8001046 <BusFault_Handler+0x4>

08001048 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800104c:	e7fe      	b.n	800104c <UsageFault_Handler+0x4>

0800104e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107c:	f000 f8e2 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001080:	bf00      	nop
 8001082:	bd80      	pop	{r7, pc}

08001084 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001088:	2002      	movs	r0, #2
 800108a:	f001 fa3b 	bl	8002504 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <CAN1_TX_IRQHandler+0x10>)
 800109a:	f000 fd7a 	bl	8001b92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000184 	.word	0x20000184

080010a8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <CAN1_RX0_IRQHandler+0x10>)
 80010ae:	f000 fd70 	bl	8001b92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000184 	.word	0x20000184

080010bc <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <CAN1_RX1_IRQHandler+0x10>)
 80010c2:	f000 fd66 	bl	8001b92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000184 	.word	0x20000184

080010d0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80010d4:	4802      	ldr	r0, [pc, #8]	; (80010e0 <CAN1_SCE_IRQHandler+0x10>)
 80010d6:	f000 fd5c 	bl	8001b92 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80010da:	bf00      	nop
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000184 	.word	0x20000184

080010e4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <SystemInit+0x5c>)
 80010ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ee:	4a14      	ldr	r2, [pc, #80]	; (8001140 <SystemInit+0x5c>)
 80010f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <SystemInit+0x60>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a11      	ldr	r2, [pc, #68]	; (8001144 <SystemInit+0x60>)
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001104:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <SystemInit+0x60>)
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <SystemInit+0x60>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <SystemInit+0x60>)
 8001110:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001114:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001118:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800111a:	4b0a      	ldr	r3, [pc, #40]	; (8001144 <SystemInit+0x60>)
 800111c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001120:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001122:	4b08      	ldr	r3, [pc, #32]	; (8001144 <SystemInit+0x60>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <SystemInit+0x60>)
 8001128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800112c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <SystemInit+0x60>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	e000ed00 	.word	0xe000ed00
 8001144:	40021000 	.word	0x40021000

08001148 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001180 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800114c:	f7ff ffca 	bl	80010e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001150:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001152:	e003      	b.n	800115c <LoopCopyDataInit>

08001154 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001154:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001156:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001158:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800115a:	3104      	adds	r1, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800115c:	480a      	ldr	r0, [pc, #40]	; (8001188 <LoopForever+0xa>)
	ldr	r3, =_edata
 800115e:	4b0b      	ldr	r3, [pc, #44]	; (800118c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001160:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001162:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001164:	d3f6      	bcc.n	8001154 <CopyDataInit>
	ldr	r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001168:	e002      	b.n	8001170 <LoopFillZerobss>

0800116a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800116a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800116c:	f842 3b04 	str.w	r3, [r2], #4

08001170 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LoopForever+0x16>)
	cmp	r2, r3
 8001172:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001174:	d3f9      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001176:	f003 f8f3 	bl	8004360 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800117a:	f7ff fd09 	bl	8000b90 <main>

0800117e <LoopForever>:

LoopForever:
    b LoopForever
 800117e:	e7fe      	b.n	800117e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001180:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8001184:	080044b8 	.word	0x080044b8
	ldr	r0, =_sdata
 8001188:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800118c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001190:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8001194:	2000022c 	.word	0x2000022c

08001198 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC1_IRQHandler>

0800119a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f000 ffd9 	bl	800215c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011aa:	2000      	movs	r0, #0
 80011ac:	f000 f80e 	bl	80011cc <HAL_InitTick>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d002      	beq.n	80011bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e001      	b.n	80011c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011bc:	f7ff fe6c 	bl	8000e98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c0:	79fb      	ldrb	r3, [r7, #7]
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011d4:	2300      	movs	r3, #0
 80011d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011d8:	4b17      	ldr	r3, [pc, #92]	; (8001238 <HAL_InitTick+0x6c>)
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d023      	beq.n	8001228 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_InitTick+0x70>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_InitTick+0x6c>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	4619      	mov	r1, r3
 80011ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80011f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f000 ffe5 	bl	80021c6 <HAL_SYSTICK_Config>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d10f      	bne.n	8001222 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b0f      	cmp	r3, #15
 8001206:	d809      	bhi.n	800121c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001208:	2200      	movs	r2, #0
 800120a:	6879      	ldr	r1, [r7, #4]
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f000 ffaf 	bl	8002172 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001214:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_InitTick+0x74>)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6013      	str	r3, [r2, #0]
 800121a:	e007      	b.n	800122c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
 8001220:	e004      	b.n	800122c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e001      	b.n	800122c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000008 	.word	0x20000008
 800123c:	20000000 	.word	0x20000000
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	20000228 	.word	0x20000228

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000228 	.word	0x20000228

08001284 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8001288:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <HAL_SuspendTick+0x1c>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_SuspendTick+0x1c>)
 800128e:	f023 0302 	bic.w	r3, r3, #2
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e010 	.word	0xe000e010

080012a4 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 80012a8:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_ResumeTick+0x1c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_ResumeTick+0x1c>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	6013      	str	r3, [r2, #0]
}
 80012b4:	bf00      	nop
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e11c      	b.n	8001510 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d131      	bne.n	8001346 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	4a8c      	ldr	r2, [pc, #560]	; (8001518 <HAL_CAN_Init+0x254>)
 80012e6:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a8c      	ldr	r2, [pc, #560]	; (800151c <HAL_CAN_Init+0x258>)
 80012ec:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a8b      	ldr	r2, [pc, #556]	; (8001520 <HAL_CAN_Init+0x25c>)
 80012f2:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a8b      	ldr	r2, [pc, #556]	; (8001524 <HAL_CAN_Init+0x260>)
 80012f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a8a      	ldr	r2, [pc, #552]	; (8001528 <HAL_CAN_Init+0x264>)
 80012fe:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a8a      	ldr	r2, [pc, #552]	; (800152c <HAL_CAN_Init+0x268>)
 8001304:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a89      	ldr	r2, [pc, #548]	; (8001530 <HAL_CAN_Init+0x26c>)
 800130a:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a89      	ldr	r2, [pc, #548]	; (8001534 <HAL_CAN_Init+0x270>)
 8001310:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a88      	ldr	r2, [pc, #544]	; (8001538 <HAL_CAN_Init+0x274>)
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a88      	ldr	r2, [pc, #544]	; (800153c <HAL_CAN_Init+0x278>)
 800131c:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a87      	ldr	r2, [pc, #540]	; (8001540 <HAL_CAN_Init+0x27c>)
 8001322:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a87      	ldr	r2, [pc, #540]	; (8001544 <HAL_CAN_Init+0x280>)
 8001328:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a86      	ldr	r2, [pc, #536]	; (8001548 <HAL_CAN_Init+0x284>)
 800132e:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2b00      	cmp	r3, #0
 8001336:	d102      	bne.n	800133e <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a84      	ldr	r2, [pc, #528]	; (800154c <HAL_CAN_Init+0x288>)
 800133c:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f022 0202 	bic.w	r2, r2, #2
 8001354:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001356:	f7ff ff89 	bl	800126c <HAL_GetTick>
 800135a:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800135c:	e012      	b.n	8001384 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800135e:	f7ff ff85 	bl	800126c <HAL_GetTick>
 8001362:	4602      	mov	r2, r0
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b0a      	cmp	r3, #10
 800136a:	d90b      	bls.n	8001384 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001370:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2205      	movs	r2, #5
 800137c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001380:	2301      	movs	r3, #1
 8001382:	e0c5      	b.n	8001510 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	2b00      	cmp	r3, #0
 8001390:	d1e5      	bne.n	800135e <HAL_CAN_Init+0x9a>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f042 0201 	orr.w	r2, r2, #1
 80013a0:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80013a2:	f7ff ff63 	bl	800126c <HAL_GetTick>
 80013a6:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013a8:	e012      	b.n	80013d0 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80013aa:	f7ff ff5f 	bl	800126c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b0a      	cmp	r3, #10
 80013b6:	d90b      	bls.n	80013d0 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2205      	movs	r2, #5
 80013c8:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e09f      	b.n	8001510 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0e5      	beq.n	80013aa <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	7e1b      	ldrb	r3, [r3, #24]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d108      	bne.n	80013f8 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	e007      	b.n	8001408 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001406:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	7e5b      	ldrb	r3, [r3, #25]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d108      	bne.n	8001422 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681a      	ldr	r2, [r3, #0]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	e007      	b.n	8001432 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001430:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	7e9b      	ldrb	r3, [r3, #26]
 8001436:	2b01      	cmp	r3, #1
 8001438:	d108      	bne.n	800144c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f042 0220 	orr.w	r2, r2, #32
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	e007      	b.n	800145c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f022 0220 	bic.w	r2, r2, #32
 800145a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	7edb      	ldrb	r3, [r3, #27]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d108      	bne.n	8001476 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0210 	bic.w	r2, r2, #16
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	e007      	b.n	8001486 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0210 	orr.w	r2, r2, #16
 8001484:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	7f1b      	ldrb	r3, [r3, #28]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f042 0208 	orr.w	r2, r2, #8
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	e007      	b.n	80014b0 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	f022 0208 	bic.w	r2, r2, #8
 80014ae:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	7f5b      	ldrb	r3, [r3, #29]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d108      	bne.n	80014ca <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	681a      	ldr	r2, [r3, #0]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f042 0204 	orr.w	r2, r2, #4
 80014c6:	601a      	str	r2, [r3, #0]
 80014c8:	e007      	b.n	80014da <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f022 0204 	bic.w	r2, r2, #4
 80014d8:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	68db      	ldr	r3, [r3, #12]
 80014e2:	431a      	orrs	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	431a      	orrs	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	695b      	ldr	r3, [r3, #20]
 80014ee:	ea42 0103 	orr.w	r1, r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	1e5a      	subs	r2, r3, #1
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	430a      	orrs	r2, r1
 80014fe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2201      	movs	r2, #1
 800150a:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	3710      	adds	r7, #16
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	080005ed 	.word	0x080005ed
 800151c:	08001f59 	.word	0x08001f59
 8001520:	08001f6d 	.word	0x08001f6d
 8001524:	08001f81 	.word	0x08001f81
 8001528:	08000551 	.word	0x08000551
 800152c:	08000585 	.word	0x08000585
 8001530:	080005b9 	.word	0x080005b9
 8001534:	08001f1d 	.word	0x08001f1d
 8001538:	08001f31 	.word	0x08001f31
 800153c:	08001f45 	.word	0x08001f45
 8001540:	08001f95 	.word	0x08001f95
 8001544:	08001fa9 	.word	0x08001fa9
 8001548:	08000819 	.word	0x08000819
 800154c:	08000ee1 	.word	0x08000ee1

08001550 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001550:	b480      	push	{r7}
 8001552:	b087      	sub	sp, #28
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001566:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001568:	7cfb      	ldrb	r3, [r7, #19]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d003      	beq.n	8001576 <HAL_CAN_ConfigFilter+0x26>
 800156e:	7cfb      	ldrb	r3, [r7, #19]
 8001570:	2b02      	cmp	r3, #2
 8001572:	f040 80aa 	bne.w	80016ca <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800157c:	f043 0201 	orr.w	r2, r3, #1
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	695b      	ldr	r3, [r3, #20]
 800158a:	f003 031f 	and.w	r3, r3, #31
 800158e:	2201      	movs	r2, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	43db      	mvns	r3, r3
 80015a0:	401a      	ands	r2, r3
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d123      	bne.n	80015f8 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015ce:	683a      	ldr	r2, [r7, #0]
 80015d0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80015d2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	3248      	adds	r2, #72	; 0x48
 80015d8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015ec:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015ee:	6979      	ldr	r1, [r7, #20]
 80015f0:	3348      	adds	r3, #72	; 0x48
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	69db      	ldr	r3, [r3, #28]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d122      	bne.n	8001646 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	431a      	orrs	r2, r3
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800161c:	683a      	ldr	r2, [r7, #0]
 800161e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001620:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3248      	adds	r2, #72	; 0x48
 8001626:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	689b      	ldr	r3, [r3, #8]
 800162e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800163a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800163c:	6979      	ldr	r1, [r7, #20]
 800163e:	3348      	adds	r3, #72	; 0x48
 8001640:	00db      	lsls	r3, r3, #3
 8001642:	440b      	add	r3, r1
 8001644:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	699b      	ldr	r3, [r3, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d109      	bne.n	8001662 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43db      	mvns	r3, r3
 8001658:	401a      	ands	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001660:	e007      	b.n	8001672 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	431a      	orrs	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d109      	bne.n	800168e <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	43db      	mvns	r3, r3
 8001684:	401a      	ands	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800168c:	e007      	b.n	800169e <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	431a      	orrs	r2, r3
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d107      	bne.n	80016b6 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80016bc:	f023 0201 	bic.w	r2, r3, #1
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80016c6:	2300      	movs	r3, #0
 80016c8:	e006      	b.n	80016d8 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ce:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80016d6:	2301      	movs	r3, #1
  }
}
 80016d8:	4618      	mov	r0, r3
 80016da:	371c      	adds	r7, #28
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d12e      	bne.n	8001756 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2202      	movs	r2, #2
 80016fc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0201 	bic.w	r2, r2, #1
 800170e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001710:	f7ff fdac 	bl	800126c <HAL_GetTick>
 8001714:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001716:	e012      	b.n	800173e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001718:	f7ff fda8 	bl	800126c <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b0a      	cmp	r3, #10
 8001724:	d90b      	bls.n	800173e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2205      	movs	r2, #5
 8001736:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e012      	b.n	8001764 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	f003 0301 	and.w	r3, r3, #1
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1e5      	bne.n	8001718 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001752:	2300      	movs	r3, #0
 8001754:	e006      	b.n	8001764 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
  }
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800176c:	b480      	push	{r7}
 800176e:	b089      	sub	sp, #36	; 0x24
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001780:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800178a:	7ffb      	ldrb	r3, [r7, #31]
 800178c:	2b01      	cmp	r3, #1
 800178e:	d003      	beq.n	8001798 <HAL_CAN_AddTxMessage+0x2c>
 8001790:	7ffb      	ldrb	r3, [r7, #31]
 8001792:	2b02      	cmp	r3, #2
 8001794:	f040 80b8 	bne.w	8001908 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d10a      	bne.n	80017b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d105      	bne.n	80017b8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f000 80a0 	beq.w	80018f8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	0e1b      	lsrs	r3, r3, #24
 80017bc:	f003 0303 	and.w	r3, r3, #3
 80017c0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d907      	bls.n	80017d8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017cc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e09e      	b.n	8001916 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80017d8:	2201      	movs	r2, #1
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	409a      	lsls	r2, r3
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	689b      	ldr	r3, [r3, #8]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d10d      	bne.n	8001806 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80017f4:	68f9      	ldr	r1, [r7, #12]
 80017f6:	6809      	ldr	r1, [r1, #0]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3318      	adds	r3, #24
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	440b      	add	r3, r1
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	e00f      	b.n	8001826 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001810:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001816:	68f9      	ldr	r1, [r7, #12]
 8001818:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800181a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	3318      	adds	r3, #24
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	440b      	add	r3, r1
 8001824:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	6819      	ldr	r1, [r3, #0]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3318      	adds	r3, #24
 8001832:	011b      	lsls	r3, r3, #4
 8001834:	440b      	add	r3, r1
 8001836:	3304      	adds	r3, #4
 8001838:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	7d1b      	ldrb	r3, [r3, #20]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d111      	bne.n	8001866 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3318      	adds	r3, #24
 800184a:	011b      	lsls	r3, r3, #4
 800184c:	4413      	add	r3, r2
 800184e:	3304      	adds	r3, #4
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	3318      	adds	r3, #24
 800185e:	011b      	lsls	r3, r3, #4
 8001860:	440b      	add	r3, r1
 8001862:	3304      	adds	r3, #4
 8001864:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3307      	adds	r3, #7
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	061a      	lsls	r2, r3, #24
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	3306      	adds	r3, #6
 8001872:	781b      	ldrb	r3, [r3, #0]
 8001874:	041b      	lsls	r3, r3, #16
 8001876:	431a      	orrs	r2, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3305      	adds	r3, #5
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	4313      	orrs	r3, r2
 8001882:	687a      	ldr	r2, [r7, #4]
 8001884:	3204      	adds	r2, #4
 8001886:	7812      	ldrb	r2, [r2, #0]
 8001888:	4610      	mov	r0, r2
 800188a:	68fa      	ldr	r2, [r7, #12]
 800188c:	6811      	ldr	r1, [r2, #0]
 800188e:	ea43 0200 	orr.w	r2, r3, r0
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	011b      	lsls	r3, r3, #4
 8001896:	440b      	add	r3, r1
 8001898:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800189c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3303      	adds	r3, #3
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	061a      	lsls	r2, r3, #24
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3302      	adds	r3, #2
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	431a      	orrs	r2, r3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	3301      	adds	r3, #1
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	021b      	lsls	r3, r3, #8
 80018b8:	4313      	orrs	r3, r2
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	7812      	ldrb	r2, [r2, #0]
 80018be:	4610      	mov	r0, r2
 80018c0:	68fa      	ldr	r2, [r7, #12]
 80018c2:	6811      	ldr	r1, [r2, #0]
 80018c4:	ea43 0200 	orr.w	r2, r3, r0
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	011b      	lsls	r3, r3, #4
 80018cc:	440b      	add	r3, r1
 80018ce:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80018d2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	3318      	adds	r3, #24
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	6811      	ldr	r1, [r2, #0]
 80018e6:	f043 0201 	orr.w	r2, r3, #1
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	3318      	adds	r3, #24
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	440b      	add	r3, r1
 80018f2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80018f4:	2300      	movs	r3, #0
 80018f6:	e00e      	b.n	8001916 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018fc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001904:	2301      	movs	r3, #1
 8001906:	e006      	b.n	8001916 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001922:	b480      	push	{r7}
 8001924:	b087      	sub	sp, #28
 8001926:	af00      	add	r7, sp, #0
 8001928:	60f8      	str	r0, [r7, #12]
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001936:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001938:	7dfb      	ldrb	r3, [r7, #23]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d003      	beq.n	8001946 <HAL_CAN_GetRxMessage+0x24>
 800193e:	7dfb      	ldrb	r3, [r7, #23]
 8001940:	2b02      	cmp	r3, #2
 8001942:	f040 80f3 	bne.w	8001b2c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d10e      	bne.n	800196a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	68db      	ldr	r3, [r3, #12]
 8001952:	f003 0303 	and.w	r3, r3, #3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d116      	bne.n	8001988 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e0e7      	b.n	8001b3a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d107      	bne.n	8001988 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800197c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e0d8      	b.n	8001b3a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	331b      	adds	r3, #27
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0204 	and.w	r2, r3, #4
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d10c      	bne.n	80019c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	331b      	adds	r3, #27
 80019ae:	011b      	lsls	r3, r3, #4
 80019b0:	4413      	add	r3, r2
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	0d5b      	lsrs	r3, r3, #21
 80019b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	601a      	str	r2, [r3, #0]
 80019be:	e00b      	b.n	80019d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	331b      	adds	r3, #27
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	08db      	lsrs	r3, r3, #3
 80019d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	331b      	adds	r3, #27
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0202 	and.w	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	331b      	adds	r3, #27
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	3304      	adds	r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 020f 	and.w	r2, r3, #15
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	3304      	adds	r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0a1b      	lsrs	r3, r3, #8
 8001a18:	b2da      	uxtb	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0c1b      	lsrs	r3, r3, #16
 8001a30:	b29a      	uxth	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	011b      	lsls	r3, r3, #4
 8001a3e:	4413      	add	r3, r2
 8001a40:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	011b      	lsls	r3, r3, #4
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	0a1a      	lsrs	r2, r3, #8
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	3301      	adds	r3, #1
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	68bb      	ldr	r3, [r7, #8]
 8001a6c:	011b      	lsls	r3, r3, #4
 8001a6e:	4413      	add	r3, r2
 8001a70:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	0c1a      	lsrs	r2, r3, #16
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
 8001a8a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	0e1a      	lsrs	r2, r3, #24
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	3303      	adds	r3, #3
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	011b      	lsls	r3, r3, #4
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3304      	adds	r3, #4
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	0a1a      	lsrs	r2, r3, #8
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	3305      	adds	r3, #5
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681a      	ldr	r2, [r3, #0]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	011b      	lsls	r3, r3, #4
 8001ad4:	4413      	add	r3, r2
 8001ad6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	0c1a      	lsrs	r2, r3, #16
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	3306      	adds	r3, #6
 8001ae2:	b2d2      	uxtb	r2, r2
 8001ae4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	0e1a      	lsrs	r2, r3, #24
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	3307      	adds	r3, #7
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d108      	bne.n	8001b18 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	68da      	ldr	r2, [r3, #12]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	60da      	str	r2, [r3, #12]
 8001b16:	e007      	b.n	8001b28 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	691a      	ldr	r2, [r3, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f042 0220 	orr.w	r2, r2, #32
 8001b26:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e006      	b.n	8001b3a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
  }
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	371c      	adds	r7, #28
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b085      	sub	sp, #20
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
 8001b4e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b56:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d002      	beq.n	8001b64 <HAL_CAN_ActivateNotification+0x1e>
 8001b5e:	7bfb      	ldrb	r3, [r7, #15]
 8001b60:	2b02      	cmp	r3, #2
 8001b62:	d109      	bne.n	8001b78 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6959      	ldr	r1, [r3, #20]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	430a      	orrs	r2, r1
 8001b72:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b74:	2300      	movs	r3, #0
 8001b76:	e006      	b.n	8001b86 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
  }
}
 8001b86:	4618      	mov	r0, r3
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr

08001b92 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b92:	b580      	push	{r7, lr}
 8001b94:	b08a      	sub	sp, #40	; 0x28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691b      	ldr	r3, [r3, #16]
 8001bc4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 8083 	beq.w	8001ce0 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d025      	beq.n	8001c30 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2201      	movs	r2, #1
 8001bea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d004      	beq.n	8001c00 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	4798      	blx	r3
 8001bfe:	e017      	b.n	8001c30 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	f003 0304 	and.w	r3, r3, #4
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d004      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
 8001c12:	e00d      	b.n	8001c30 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	f003 0308 	and.w	r3, r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d004      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	e003      	b.n	8001c30 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d026      	beq.n	8001c88 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d004      	beq.n	8001c58 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	4798      	blx	r3
 8001c56:	e017      	b.n	8001c88 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d004      	beq.n	8001c6c <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24
 8001c6a:	e00d      	b.n	8001c88 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c7e:	e003      	b.n	8001c88 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d026      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d004      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	4798      	blx	r3
 8001cae:	e017      	b.n	8001ce0 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d004      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001cc2:	e00d      	b.n	8001ce0 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d004      	beq.n	8001cd8 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	627b      	str	r3, [r7, #36]	; 0x24
 8001cd6:	e003      	b.n	8001ce0 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ce0:	6a3b      	ldr	r3, [r7, #32]
 8001ce2:	f003 0308 	and.w	r3, r3, #8
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00c      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d007      	beq.n	8001d04 <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2210      	movs	r2, #16
 8001d02:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d04:	6a3b      	ldr	r3, [r7, #32]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2208      	movs	r2, #8
 8001d1e:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d28:	6a3b      	ldr	r3, [r7, #32]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00a      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0303 	and.w	r3, r3, #3
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d48:	6a3b      	ldr	r3, [r7, #32]
 8001d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d00c      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0310 	and.w	r3, r3, #16
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d007      	beq.n	8001d6c <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2210      	movs	r2, #16
 8001d6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d00c      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d007      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2208      	movs	r2, #8
 8001d86:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	6878      	ldr	r0, [r7, #4]
 8001d8e:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d00a      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 mesage pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001db0:	6a3b      	ldr	r3, [r7, #32]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00c      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d007      	beq.n	8001dd4 <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2210      	movs	r2, #16
 8001dca:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00c      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d007      	beq.n	8001df8 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2208      	movs	r2, #8
 8001dee:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001df8:	6a3b      	ldr	r3, [r7, #32]
 8001dfa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d07b      	beq.n	8001efa <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	f003 0304 	and.w	r3, r3, #4
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d072      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e0c:	6a3b      	ldr	r3, [r7, #32]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d003      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e28:	6a3b      	ldr	r3, [r7, #32]
 8001e2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	f043 0302 	orr.w	r3, r3, #2
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e44:	6a3b      	ldr	r3, [r7, #32]
 8001e46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d003      	beq.n	8001e60 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	f043 0304 	orr.w	r3, r3, #4
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e60:	6a3b      	ldr	r3, [r7, #32]
 8001e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d043      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d03e      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001e7a:	2b60      	cmp	r3, #96	; 0x60
 8001e7c:	d02b      	beq.n	8001ed6 <HAL_CAN_IRQHandler+0x344>
 8001e7e:	2b60      	cmp	r3, #96	; 0x60
 8001e80:	d82e      	bhi.n	8001ee0 <HAL_CAN_IRQHandler+0x34e>
 8001e82:	2b50      	cmp	r3, #80	; 0x50
 8001e84:	d022      	beq.n	8001ecc <HAL_CAN_IRQHandler+0x33a>
 8001e86:	2b50      	cmp	r3, #80	; 0x50
 8001e88:	d82a      	bhi.n	8001ee0 <HAL_CAN_IRQHandler+0x34e>
 8001e8a:	2b40      	cmp	r3, #64	; 0x40
 8001e8c:	d019      	beq.n	8001ec2 <HAL_CAN_IRQHandler+0x330>
 8001e8e:	2b40      	cmp	r3, #64	; 0x40
 8001e90:	d826      	bhi.n	8001ee0 <HAL_CAN_IRQHandler+0x34e>
 8001e92:	2b30      	cmp	r3, #48	; 0x30
 8001e94:	d010      	beq.n	8001eb8 <HAL_CAN_IRQHandler+0x326>
 8001e96:	2b30      	cmp	r3, #48	; 0x30
 8001e98:	d822      	bhi.n	8001ee0 <HAL_CAN_IRQHandler+0x34e>
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d002      	beq.n	8001ea4 <HAL_CAN_IRQHandler+0x312>
 8001e9e:	2b20      	cmp	r3, #32
 8001ea0:	d005      	beq.n	8001eae <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ea2:	e01d      	b.n	8001ee0 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	f043 0308 	orr.w	r3, r3, #8
 8001eaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eac:	e019      	b.n	8001ee2 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	f043 0310 	orr.w	r3, r3, #16
 8001eb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eb6:	e014      	b.n	8001ee2 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	f043 0320 	orr.w	r3, r3, #32
 8001ebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ec0:	e00f      	b.n	8001ee2 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001eca:	e00a      	b.n	8001ee2 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ed4:	e005      	b.n	8001ee2 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ede:	e000      	b.n	8001ee2 <HAL_CAN_IRQHandler+0x350>
            break;
 8001ee0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	699a      	ldr	r2, [r3, #24]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001ef0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2204      	movs	r2, #4
 8001ef8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d009      	beq.n	8001f14 <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f06:	431a      	orrs	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f14:	bf00      	nop
 8001f16:	3728      	adds	r7, #40	; 0x28
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f24:	bf00      	nop
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr

08001f58 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f60:	bf00      	nop
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr

08001f80 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr

08001f94 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f9c:	bf00      	nop
 8001f9e:	370c      	adds	r7, #12
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr

08001fa8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fe4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fe8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fee:	4a04      	ldr	r2, [pc, #16]	; (8002000 <__NVIC_SetPriorityGrouping+0x44>)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	60d3      	str	r3, [r2, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <__NVIC_GetPriorityGrouping+0x18>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	0a1b      	lsrs	r3, r3, #8
 800200e:	f003 0307 	and.w	r3, r3, #7
}
 8002012:	4618      	mov	r0, r3
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	e000ed00 	.word	0xe000ed00

08002020 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	4603      	mov	r3, r0
 8002028:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	2b00      	cmp	r3, #0
 8002030:	db0b      	blt.n	800204a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	f003 021f 	and.w	r2, r3, #31
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <__NVIC_EnableIRQ+0x38>)
 800203a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800203e:	095b      	lsrs	r3, r3, #5
 8002040:	2001      	movs	r0, #1
 8002042:	fa00 f202 	lsl.w	r2, r0, r2
 8002046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800204a:	bf00      	nop
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	e000e100 	.word	0xe000e100

0800205c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002068:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206c:	2b00      	cmp	r3, #0
 800206e:	db0a      	blt.n	8002086 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	b2da      	uxtb	r2, r3
 8002074:	490c      	ldr	r1, [pc, #48]	; (80020a8 <__NVIC_SetPriority+0x4c>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	0112      	lsls	r2, r2, #4
 800207c:	b2d2      	uxtb	r2, r2
 800207e:	440b      	add	r3, r1
 8002080:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002084:	e00a      	b.n	800209c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	b2da      	uxtb	r2, r3
 800208a:	4908      	ldr	r1, [pc, #32]	; (80020ac <__NVIC_SetPriority+0x50>)
 800208c:	79fb      	ldrb	r3, [r7, #7]
 800208e:	f003 030f 	and.w	r3, r3, #15
 8002092:	3b04      	subs	r3, #4
 8002094:	0112      	lsls	r2, r2, #4
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	440b      	add	r3, r1
 800209a:	761a      	strb	r2, [r3, #24]
}
 800209c:	bf00      	nop
 800209e:	370c      	adds	r7, #12
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000e100 	.word	0xe000e100
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020b0:	b480      	push	{r7}
 80020b2:	b089      	sub	sp, #36	; 0x24
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	60b9      	str	r1, [r7, #8]
 80020ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f1c3 0307 	rsb	r3, r3, #7
 80020ca:	2b04      	cmp	r3, #4
 80020cc:	bf28      	it	cs
 80020ce:	2304      	movcs	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	3304      	adds	r3, #4
 80020d6:	2b06      	cmp	r3, #6
 80020d8:	d902      	bls.n	80020e0 <NVIC_EncodePriority+0x30>
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	3b03      	subs	r3, #3
 80020de:	e000      	b.n	80020e2 <NVIC_EncodePriority+0x32>
 80020e0:	2300      	movs	r3, #0
 80020e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e4:	f04f 32ff 	mov.w	r2, #4294967295
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43da      	mvns	r2, r3
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	401a      	ands	r2, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020f8:	f04f 31ff 	mov.w	r1, #4294967295
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002102:	43d9      	mvns	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002108:	4313      	orrs	r3, r2
         );
}
 800210a:	4618      	mov	r0, r3
 800210c:	3724      	adds	r7, #36	; 0x24
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
	...

08002118 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	3b01      	subs	r3, #1
 8002124:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002128:	d301      	bcc.n	800212e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800212a:	2301      	movs	r3, #1
 800212c:	e00f      	b.n	800214e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <SysTick_Config+0x40>)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	3b01      	subs	r3, #1
 8002134:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002136:	210f      	movs	r1, #15
 8002138:	f04f 30ff 	mov.w	r0, #4294967295
 800213c:	f7ff ff8e 	bl	800205c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002140:	4b05      	ldr	r3, [pc, #20]	; (8002158 <SysTick_Config+0x40>)
 8002142:	2200      	movs	r2, #0
 8002144:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002146:	4b04      	ldr	r3, [pc, #16]	; (8002158 <SysTick_Config+0x40>)
 8002148:	2207      	movs	r2, #7
 800214a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	e000e010 	.word	0xe000e010

0800215c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f7ff ff29 	bl	8001fbc <__NVIC_SetPriorityGrouping>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b086      	sub	sp, #24
 8002176:	af00      	add	r7, sp, #0
 8002178:	4603      	mov	r3, r0
 800217a:	60b9      	str	r1, [r7, #8]
 800217c:	607a      	str	r2, [r7, #4]
 800217e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002184:	f7ff ff3e 	bl	8002004 <__NVIC_GetPriorityGrouping>
 8002188:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800218a:	687a      	ldr	r2, [r7, #4]
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	6978      	ldr	r0, [r7, #20]
 8002190:	f7ff ff8e 	bl	80020b0 <NVIC_EncodePriority>
 8002194:	4602      	mov	r2, r0
 8002196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800219a:	4611      	mov	r1, r2
 800219c:	4618      	mov	r0, r3
 800219e:	f7ff ff5d 	bl	800205c <__NVIC_SetPriority>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}

080021aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021aa:	b580      	push	{r7, lr}
 80021ac:	b082      	sub	sp, #8
 80021ae:	af00      	add	r7, sp, #0
 80021b0:	4603      	mov	r3, r0
 80021b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b8:	4618      	mov	r0, r3
 80021ba:	f7ff ff31 	bl	8002020 <__NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f7ff ffa2 	bl	8002118 <SysTick_Config>
 80021d4:	4603      	mov	r3, r0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b087      	sub	sp, #28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ee:	e154      	b.n	800249a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2101      	movs	r1, #1
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	fa01 f303 	lsl.w	r3, r1, r3
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8146 	beq.w	8002494 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b01      	cmp	r3, #1
 800220e:	d00b      	beq.n	8002228 <HAL_GPIO_Init+0x48>
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d007      	beq.n	8002228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800221c:	2b11      	cmp	r3, #17
 800221e:	d003      	beq.n	8002228 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	2b12      	cmp	r3, #18
 8002226:	d130      	bne.n	800228a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	005b      	lsls	r3, r3, #1
 8002232:	2203      	movs	r2, #3
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	693a      	ldr	r2, [r7, #16]
 800223c:	4013      	ands	r3, r2
 800223e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4313      	orrs	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800225e:	2201      	movs	r2, #1
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	fa02 f303 	lsl.w	r3, r2, r3
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	091b      	lsrs	r3, r3, #4
 8002274:	f003 0201 	and.w	r2, r3, #1
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	2203      	movs	r2, #3
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43db      	mvns	r3, r3
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	4013      	ands	r3, r2
 80022a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	689a      	ldr	r2, [r3, #8]
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	693a      	ldr	r2, [r7, #16]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0xea>
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	2b12      	cmp	r3, #18
 80022c8:	d123      	bne.n	8002312 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	08da      	lsrs	r2, r3, #3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3208      	adds	r2, #8
 80022d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	220f      	movs	r2, #15
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	43db      	mvns	r3, r3
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4013      	ands	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	691a      	ldr	r2, [r3, #16]
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	f003 0307 	and.w	r3, r3, #7
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	6939      	ldr	r1, [r7, #16]
 800230e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	4013      	ands	r3, r2
 8002328:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f003 0203 	and.w	r2, r3, #3
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	693a      	ldr	r2, [r7, #16]
 8002344:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 80a0 	beq.w	8002494 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002354:	4b58      	ldr	r3, [pc, #352]	; (80024b8 <HAL_GPIO_Init+0x2d8>)
 8002356:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002358:	4a57      	ldr	r2, [pc, #348]	; (80024b8 <HAL_GPIO_Init+0x2d8>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6613      	str	r3, [r2, #96]	; 0x60
 8002360:	4b55      	ldr	r3, [pc, #340]	; (80024b8 <HAL_GPIO_Init+0x2d8>)
 8002362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002364:	f003 0301 	and.w	r3, r3, #1
 8002368:	60bb      	str	r3, [r7, #8]
 800236a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800236c:	4a53      	ldr	r2, [pc, #332]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 800236e:	697b      	ldr	r3, [r7, #20]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	4013      	ands	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002396:	d019      	beq.n	80023cc <HAL_GPIO_Init+0x1ec>
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	4a49      	ldr	r2, [pc, #292]	; (80024c0 <HAL_GPIO_Init+0x2e0>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d013      	beq.n	80023c8 <HAL_GPIO_Init+0x1e8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_GPIO_Init+0x2e4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d00d      	beq.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_GPIO_Init+0x2e8>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d007      	beq.n	80023c0 <HAL_GPIO_Init+0x1e0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a46      	ldr	r2, [pc, #280]	; (80024cc <HAL_GPIO_Init+0x2ec>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d101      	bne.n	80023bc <HAL_GPIO_Init+0x1dc>
 80023b8:	2304      	movs	r3, #4
 80023ba:	e008      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023bc:	2307      	movs	r3, #7
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c0:	2303      	movs	r3, #3
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023cc:	2300      	movs	r3, #0
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80023de:	4937      	ldr	r1, [pc, #220]	; (80024bc <HAL_GPIO_Init+0x2dc>)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	693a      	ldr	r2, [r7, #16]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80023ec:	4b38      	ldr	r3, [pc, #224]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d003      	beq.n	8002410 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4313      	orrs	r3, r2
 800240e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002410:	4a2f      	ldr	r2, [pc, #188]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	43db      	mvns	r3, r3
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4013      	ands	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d003      	beq.n	800243a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	4313      	orrs	r3, r2
 8002438:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800243a:	4a25      	ldr	r2, [pc, #148]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002440:	4b23      	ldr	r3, [pc, #140]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d003      	beq.n	8002464 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002464:	4a1a      	ldr	r2, [pc, #104]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	43db      	mvns	r3, r3
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	4013      	ands	r3, r2
 8002478:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002486:	693a      	ldr	r2, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	4313      	orrs	r3, r2
 800248c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800248e:	4a10      	ldr	r2, [pc, #64]	; (80024d0 <HAL_GPIO_Init+0x2f0>)
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	681a      	ldr	r2, [r3, #0]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	f47f aea3 	bne.w	80021f0 <HAL_GPIO_Init+0x10>
  }
}
 80024aa:	bf00      	nop
 80024ac:	bf00      	nop
 80024ae:	371c      	adds	r7, #28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	40021000 	.word	0x40021000
 80024bc:	40010000 	.word	0x40010000
 80024c0:	48000400 	.word	0x48000400
 80024c4:	48000800 	.word	0x48000800
 80024c8:	48000c00 	.word	0x48000c00
 80024cc:	48001000 	.word	0x48001000
 80024d0:	40010400 	.word	0x40010400

080024d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	460b      	mov	r3, r1
 80024de:	807b      	strh	r3, [r7, #2]
 80024e0:	4613      	mov	r3, r2
 80024e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80024e4:	787b      	ldrb	r3, [r7, #1]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d003      	beq.n	80024f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80024ea:	887a      	ldrh	r2, [r7, #2]
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80024f0:	e002      	b.n	80024f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80024f2:	887a      	ldrh	r2, [r7, #2]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024f8:	bf00      	nop
 80024fa:	370c      	adds	r7, #12
 80024fc:	46bd      	mov	sp, r7
 80024fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002502:	4770      	bx	lr

08002504 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800250e:	4b08      	ldr	r3, [pc, #32]	; (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002510:	695a      	ldr	r2, [r3, #20]
 8002512:	88fb      	ldrh	r3, [r7, #6]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d006      	beq.n	8002528 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800251a:	4a05      	ldr	r2, [pc, #20]	; (8002530 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002520:	88fb      	ldrh	r3, [r7, #6]
 8002522:	4618      	mov	r0, r3
 8002524:	f000 f806 	bl	8002534 <HAL_GPIO_EXTI_Callback>
  }
}
 8002528:	bf00      	nop
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	4603      	mov	r3, r0
 800253c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
	...

0800254c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10c      	bne.n	8002578 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800255e:	4b13      	ldr	r3, [pc, #76]	; (80025ac <HAL_PWR_EnterSLEEPMode+0x60>)
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256a:	d10e      	bne.n	800258a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 800256c:	f000 f896 	bl	800269c <HAL_PWREx_DisableLowPowerRunMode>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8002576:	e016      	b.n	80025a6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_PWR_EnterSLEEPMode+0x60>)
 800257a:	695b      	ldr	r3, [r3, #20]
 800257c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002584:	d001      	beq.n	800258a <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8002586:	f000 f879 	bl	800267c <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 800258a:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	4a08      	ldr	r2, [pc, #32]	; (80025b0 <HAL_PWR_EnterSLEEPMode+0x64>)
 8002590:	f023 0304 	bic.w	r3, r3, #4
 8002594:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002596:	78fb      	ldrb	r3, [r7, #3]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 800259c:	bf30      	wfi
 800259e:	e002      	b.n	80025a6 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80025a0:	bf40      	sev
    __WFE();
 80025a2:	bf20      	wfe
    __WFE();
 80025a4:	bf20      	wfe
  }

}
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	40007000 	.word	0x40007000
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025b8:	4b04      	ldr	r3, [pc, #16]	; (80025cc <HAL_PWREx_GetVoltageRange+0x18>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40007000 	.word	0x40007000

080025d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025de:	d130      	bne.n	8002642 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80025e0:	4b23      	ldr	r3, [pc, #140]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80025e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ec:	d038      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80025ee:	4b20      	ldr	r3, [pc, #128]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80025f6:	4a1e      	ldr	r2, [pc, #120]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2232      	movs	r2, #50	; 0x32
 8002604:	fb02 f303 	mul.w	r3, r2, r3
 8002608:	4a1b      	ldr	r2, [pc, #108]	; (8002678 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0c9b      	lsrs	r3, r3, #18
 8002610:	3301      	adds	r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002614:	e002      	b.n	800261c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	3b01      	subs	r3, #1
 800261a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800261c:	4b14      	ldr	r3, [pc, #80]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	695b      	ldr	r3, [r3, #20]
 8002620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002624:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002628:	d102      	bne.n	8002630 <HAL_PWREx_ControlVoltageScaling+0x60>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1f2      	bne.n	8002616 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002630:	4b0f      	ldr	r3, [pc, #60]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002638:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800263c:	d110      	bne.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e00f      	b.n	8002662 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002642:	4b0b      	ldr	r3, [pc, #44]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800264a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800264e:	d007      	beq.n	8002660 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002650:	4b07      	ldr	r3, [pc, #28]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002658:	4a05      	ldr	r2, [pc, #20]	; (8002670 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002660:	2300      	movs	r3, #0
}
 8002662:	4618      	mov	r0, r3
 8002664:	3714      	adds	r7, #20
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	40007000 	.word	0x40007000
 8002674:	20000000 	.word	0x20000000
 8002678:	431bde83 	.word	0x431bde83

0800267c <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a04      	ldr	r2, [pc, #16]	; (8002698 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8002686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40007000 	.word	0x40007000

0800269c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80026a2:	4b17      	ldr	r3, [pc, #92]	; (8002700 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a16      	ldr	r2, [pc, #88]	; (8002700 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80026a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026ac:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2232      	movs	r2, #50	; 0x32
 80026b4:	fb02 f303 	mul.w	r3, r2, r3
 80026b8:	4a13      	ldr	r2, [pc, #76]	; (8002708 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	3301      	adds	r3, #1
 80026c2:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80026c4:	e002      	b.n	80026cc <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	3b01      	subs	r3, #1
 80026ca:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026d8:	d102      	bne.n	80026e0 <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f2      	bne.n	80026c6 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80026e0:	4b07      	ldr	r3, [pc, #28]	; (8002700 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026ec:	d101      	bne.n	80026f2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e000      	b.n	80026f4 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	40007000 	.word	0x40007000
 8002704:	20000000 	.word	0x20000000
 8002708:	431bde83 	.word	0x431bde83

0800270c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d102      	bne.n	8002720 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	f000 bc11 	b.w	8002f42 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002720:	4ba0      	ldr	r3, [pc, #640]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	f003 030c 	and.w	r3, r3, #12
 8002728:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800272a:	4b9e      	ldr	r3, [pc, #632]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0310 	and.w	r3, r3, #16
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80e4 	beq.w	800290a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d007      	beq.n	8002758 <HAL_RCC_OscConfig+0x4c>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	f040 808b 	bne.w	8002866 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002750:	697b      	ldr	r3, [r7, #20]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 8087 	bne.w	8002866 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002758:	4b92      	ldr	r3, [pc, #584]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_OscConfig+0x64>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d101      	bne.n	8002770 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e3e8      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a1a      	ldr	r2, [r3, #32]
 8002774:	4b8b      	ldr	r3, [pc, #556]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0308 	and.w	r3, r3, #8
 800277c:	2b00      	cmp	r3, #0
 800277e:	d004      	beq.n	800278a <HAL_RCC_OscConfig+0x7e>
 8002780:	4b88      	ldr	r3, [pc, #544]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002788:	e005      	b.n	8002796 <HAL_RCC_OscConfig+0x8a>
 800278a:	4b86      	ldr	r3, [pc, #536]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800278c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002790:	091b      	lsrs	r3, r3, #4
 8002792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002796:	4293      	cmp	r3, r2
 8002798:	d223      	bcs.n	80027e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 fd7a 	bl	8003298 <RCC_SetFlashLatencyFromMSIRange>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e3c9      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027ae:	4b7d      	ldr	r3, [pc, #500]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7c      	ldr	r2, [pc, #496]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027b4:	f043 0308 	orr.w	r3, r3, #8
 80027b8:	6013      	str	r3, [r2, #0]
 80027ba:	4b7a      	ldr	r3, [pc, #488]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	4977      	ldr	r1, [pc, #476]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027cc:	4b75      	ldr	r3, [pc, #468]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	69db      	ldr	r3, [r3, #28]
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	4972      	ldr	r1, [pc, #456]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	604b      	str	r3, [r1, #4]
 80027e0:	e025      	b.n	800282e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027e2:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a6f      	ldr	r2, [pc, #444]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027e8:	f043 0308 	orr.w	r3, r3, #8
 80027ec:	6013      	str	r3, [r2, #0]
 80027ee:	4b6d      	ldr	r3, [pc, #436]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	496a      	ldr	r1, [pc, #424]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002800:	4b68      	ldr	r3, [pc, #416]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	021b      	lsls	r3, r3, #8
 800280e:	4965      	ldr	r1, [pc, #404]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002814:	69bb      	ldr	r3, [r7, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a1b      	ldr	r3, [r3, #32]
 800281e:	4618      	mov	r0, r3
 8002820:	f000 fd3a 	bl	8003298 <RCC_SetFlashLatencyFromMSIRange>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e389      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800282e:	f000 fc6f 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 8002832:	4602      	mov	r2, r0
 8002834:	4b5b      	ldr	r3, [pc, #364]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	495a      	ldr	r1, [pc, #360]	; (80029a8 <HAL_RCC_OscConfig+0x29c>)
 8002840:	5ccb      	ldrb	r3, [r1, r3]
 8002842:	f003 031f 	and.w	r3, r3, #31
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_OscConfig+0x2a0>)
 800284c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800284e:	4b58      	ldr	r3, [pc, #352]	; (80029b0 <HAL_RCC_OscConfig+0x2a4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe fcba 	bl	80011cc <HAL_InitTick>
 8002858:	4603      	mov	r3, r0
 800285a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d052      	beq.n	8002908 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	e36d      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d032      	beq.n	80028d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800286e:	4b4d      	ldr	r3, [pc, #308]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a4c      	ldr	r2, [pc, #304]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800287a:	f7fe fcf7 	bl	800126c <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002882:	f7fe fcf3 	bl	800126c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e356      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002894:	4b43      	ldr	r3, [pc, #268]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0302 	and.w	r3, r3, #2
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028a0:	4b40      	ldr	r3, [pc, #256]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a3f      	ldr	r2, [pc, #252]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028a6:	f043 0308 	orr.w	r3, r3, #8
 80028aa:	6013      	str	r3, [r2, #0]
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a1b      	ldr	r3, [r3, #32]
 80028b8:	493a      	ldr	r1, [pc, #232]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028be:	4b39      	ldr	r3, [pc, #228]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69db      	ldr	r3, [r3, #28]
 80028ca:	021b      	lsls	r3, r3, #8
 80028cc:	4935      	ldr	r1, [pc, #212]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
 80028d2:	e01a      	b.n	800290a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80028d4:	4b33      	ldr	r3, [pc, #204]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a32      	ldr	r2, [pc, #200]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028da:	f023 0301 	bic.w	r3, r3, #1
 80028de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028e0:	f7fe fcc4 	bl	800126c <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e8:	f7fe fcc0 	bl	800126c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e323      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028fa:	4b2a      	ldr	r3, [pc, #168]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x1dc>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002908:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0301 	and.w	r3, r3, #1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d073      	beq.n	80029fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b08      	cmp	r3, #8
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x21c>
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d10e      	bne.n	8002940 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b03      	cmp	r3, #3
 8002926:	d10b      	bne.n	8002940 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	4b1e      	ldr	r3, [pc, #120]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d063      	beq.n	80029fc <HAL_RCC_OscConfig+0x2f0>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d15f      	bne.n	80029fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e300      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002948:	d106      	bne.n	8002958 <HAL_RCC_OscConfig+0x24c>
 800294a:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	e01d      	b.n	8002994 <HAL_RCC_OscConfig+0x288>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002960:	d10c      	bne.n	800297c <HAL_RCC_OscConfig+0x270>
 8002962:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a0f      	ldr	r2, [pc, #60]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002968:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800296c:	6013      	str	r3, [r2, #0]
 800296e:	4b0d      	ldr	r3, [pc, #52]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a0c      	ldr	r2, [pc, #48]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002974:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002978:	6013      	str	r3, [r2, #0]
 800297a:	e00b      	b.n	8002994 <HAL_RCC_OscConfig+0x288>
 800297c:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a08      	ldr	r2, [pc, #32]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 8002982:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002986:	6013      	str	r3, [r2, #0]
 8002988:	4b06      	ldr	r3, [pc, #24]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a05      	ldr	r2, [pc, #20]	; (80029a4 <HAL_RCC_OscConfig+0x298>)
 800298e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002992:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d01b      	beq.n	80029d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299c:	f7fe fc66 	bl	800126c <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a2:	e010      	b.n	80029c6 <HAL_RCC_OscConfig+0x2ba>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	08004460 	.word	0x08004460
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fc5a 	bl	800126c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e2bd      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029c6:	4baf      	ldr	r3, [pc, #700]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x2a8>
 80029d2:	e014      	b.n	80029fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc4a 	bl	800126c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029dc:	f7fe fc46 	bl	800126c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b64      	cmp	r3, #100	; 0x64
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e2a9      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80029ee:	4ba5      	ldr	r3, [pc, #660]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x2d0>
 80029fa:	e000      	b.n	80029fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d060      	beq.n	8002acc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a0a:	69bb      	ldr	r3, [r7, #24]
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d005      	beq.n	8002a1c <HAL_RCC_OscConfig+0x310>
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	2b0c      	cmp	r3, #12
 8002a14:	d119      	bne.n	8002a4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d116      	bne.n	8002a4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a1c:	4b99      	ldr	r3, [pc, #612]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d005      	beq.n	8002a34 <HAL_RCC_OscConfig+0x328>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d101      	bne.n	8002a34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e286      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a34:	4b93      	ldr	r3, [pc, #588]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	691b      	ldr	r3, [r3, #16]
 8002a40:	061b      	lsls	r3, r3, #24
 8002a42:	4990      	ldr	r1, [pc, #576]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a48:	e040      	b.n	8002acc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d023      	beq.n	8002a9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a52:	4b8c      	ldr	r3, [pc, #560]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a8b      	ldr	r2, [pc, #556]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a5e:	f7fe fc05 	bl	800126c <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a66:	f7fe fc01 	bl	800126c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e264      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a78:	4b82      	ldr	r3, [pc, #520]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a84:	4b7f      	ldr	r3, [pc, #508]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691b      	ldr	r3, [r3, #16]
 8002a90:	061b      	lsls	r3, r3, #24
 8002a92:	497c      	ldr	r1, [pc, #496]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]
 8002a98:	e018      	b.n	8002acc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a9a:	4b7a      	ldr	r3, [pc, #488]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a79      	ldr	r2, [pc, #484]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002aa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa6:	f7fe fbe1 	bl	800126c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002aac:	e008      	b.n	8002ac0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002aae:	f7fe fbdd 	bl	800126c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d901      	bls.n	8002ac0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e240      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002ac0:	4b70      	ldr	r3, [pc, #448]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d1f0      	bne.n	8002aae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d03c      	beq.n	8002b52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d01c      	beq.n	8002b1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae0:	4b68      	ldr	r3, [pc, #416]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ae6:	4a67      	ldr	r2, [pc, #412]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002ae8:	f043 0301 	orr.w	r3, r3, #1
 8002aec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe fbbc 	bl	800126c <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fe fbb8 	bl	800126c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e21b      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b0a:	4b5e      	ldr	r3, [pc, #376]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d0ef      	beq.n	8002af8 <HAL_RCC_OscConfig+0x3ec>
 8002b18:	e01b      	b.n	8002b52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1a:	4b5a      	ldr	r3, [pc, #360]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2a:	f7fe fb9f 	bl	800126c <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b32:	f7fe fb9b 	bl	800126c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e1fe      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b44:	4b4f      	ldr	r3, [pc, #316]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1ef      	bne.n	8002b32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0304 	and.w	r3, r3, #4
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 80a6 	beq.w	8002cac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b60:	2300      	movs	r3, #0
 8002b62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b64:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10d      	bne.n	8002b8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b70:	4b44      	ldr	r3, [pc, #272]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b74:	4a43      	ldr	r2, [pc, #268]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002b7c:	4b41      	ldr	r3, [pc, #260]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b8c:	4b3e      	ldr	r3, [pc, #248]	; (8002c88 <HAL_RCC_OscConfig+0x57c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d118      	bne.n	8002bca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b98:	4b3b      	ldr	r3, [pc, #236]	; (8002c88 <HAL_RCC_OscConfig+0x57c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a3a      	ldr	r2, [pc, #232]	; (8002c88 <HAL_RCC_OscConfig+0x57c>)
 8002b9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe fb62 	bl	800126c <HAL_GetTick>
 8002ba8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bac:	f7fe fb5e 	bl	800126c <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1c1      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bbe:	4b32      	ldr	r3, [pc, #200]	; (8002c88 <HAL_RCC_OscConfig+0x57c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d0f0      	beq.n	8002bac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d108      	bne.n	8002be4 <HAL_RCC_OscConfig+0x4d8>
 8002bd2:	4b2c      	ldr	r3, [pc, #176]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002bd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd8:	4a2a      	ldr	r2, [pc, #168]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002be2:	e024      	b.n	8002c2e <HAL_RCC_OscConfig+0x522>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b05      	cmp	r3, #5
 8002bea:	d110      	bne.n	8002c0e <HAL_RCC_OscConfig+0x502>
 8002bec:	4b25      	ldr	r3, [pc, #148]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bf2:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002bf4:	f043 0304 	orr.w	r3, r3, #4
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bfc:	4b21      	ldr	r3, [pc, #132]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c02:	4a20      	ldr	r2, [pc, #128]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002c04:	f043 0301 	orr.w	r3, r3, #1
 8002c08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c0c:	e00f      	b.n	8002c2e <HAL_RCC_OscConfig+0x522>
 8002c0e:	4b1d      	ldr	r3, [pc, #116]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002c10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c14:	4a1b      	ldr	r2, [pc, #108]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002c16:	f023 0301 	bic.w	r3, r3, #1
 8002c1a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002c1e:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c24:	4a17      	ldr	r2, [pc, #92]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002c26:	f023 0304 	bic.w	r3, r3, #4
 8002c2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d016      	beq.n	8002c64 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c36:	f7fe fb19 	bl	800126c <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3e:	f7fe fb15 	bl	800126c <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e176      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_OscConfig+0x578>)
 8002c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d0ed      	beq.n	8002c3e <HAL_RCC_OscConfig+0x532>
 8002c62:	e01a      	b.n	8002c9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c64:	f7fe fb02 	bl	800126c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c6a:	e00f      	b.n	8002c8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe fafe 	bl	800126c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d906      	bls.n	8002c8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e15f      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c8c:	4baa      	ldr	r3, [pc, #680]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e8      	bne.n	8002c6c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c9a:	7ffb      	ldrb	r3, [r7, #31]
 8002c9c:	2b01      	cmp	r3, #1
 8002c9e:	d105      	bne.n	8002cac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ca0:	4ba5      	ldr	r3, [pc, #660]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca4:	4aa4      	ldr	r2, [pc, #656]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ca6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002caa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d03c      	beq.n	8002d32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d01c      	beq.n	8002cfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002cc0:	4b9d      	ldr	r3, [pc, #628]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002cc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cc6:	4a9c      	ldr	r2, [pc, #624]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002cc8:	f043 0301 	orr.w	r3, r3, #1
 8002ccc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cd0:	f7fe facc 	bl	800126c <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cd8:	f7fe fac8 	bl	800126c <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e12b      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002cea:	4b93      	ldr	r3, [pc, #588]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002cec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0ef      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x5cc>
 8002cf8:	e01b      	b.n	8002d32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002cfa:	4b8f      	ldr	r3, [pc, #572]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002cfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d00:	4a8d      	ldr	r2, [pc, #564]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002d02:	f023 0301 	bic.w	r3, r3, #1
 8002d06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe faaf 	bl	800126c <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002d12:	f7fe faab 	bl	800126c <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e10e      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002d24:	4b84      	ldr	r3, [pc, #528]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002d2a:	f003 0302 	and.w	r3, r3, #2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1ef      	bne.n	8002d12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8102 	beq.w	8002f40 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	f040 80c5 	bne.w	8002ed0 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d46:	4b7c      	ldr	r3, [pc, #496]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 0203 	and.w	r2, r3, #3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d12c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	3b01      	subs	r3, #1
 8002d66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d68:	429a      	cmp	r2, r3
 8002d6a:	d123      	bne.n	8002db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d11b      	bne.n	8002db4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d113      	bne.n	8002db4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d109      	bne.n	8002db4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	085b      	lsrs	r3, r3, #1
 8002dac:	3b01      	subs	r3, #1
 8002dae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d067      	beq.n	8002e84 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	2b0c      	cmp	r3, #12
 8002db8:	d062      	beq.n	8002e80 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002dba:	4b5f      	ldr	r3, [pc, #380]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0bb      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002dca:	4b5b      	ldr	r3, [pc, #364]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a5a      	ldr	r2, [pc, #360]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002dd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dd6:	f7fe fa49 	bl	800126c <HAL_GetTick>
 8002dda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ddc:	e008      	b.n	8002df0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dde:	f7fe fa45 	bl	800126c <HAL_GetTick>
 8002de2:	4602      	mov	r2, r0
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1ad3      	subs	r3, r2, r3
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d901      	bls.n	8002df0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002dec:	2303      	movs	r3, #3
 8002dee:	e0a8      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002df0:	4b51      	ldr	r3, [pc, #324]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1f0      	bne.n	8002dde <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dfc:	4b4e      	ldr	r3, [pc, #312]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002dfe:	68da      	ldr	r2, [r3, #12]
 8002e00:	4b4e      	ldr	r3, [pc, #312]	; (8002f3c <HAL_RCC_OscConfig+0x830>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e0c:	3a01      	subs	r2, #1
 8002e0e:	0112      	lsls	r2, r2, #4
 8002e10:	4311      	orrs	r1, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e16:	0212      	lsls	r2, r2, #8
 8002e18:	4311      	orrs	r1, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e1e:	0852      	lsrs	r2, r2, #1
 8002e20:	3a01      	subs	r2, #1
 8002e22:	0552      	lsls	r2, r2, #21
 8002e24:	4311      	orrs	r1, r2
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e2a:	0852      	lsrs	r2, r2, #1
 8002e2c:	3a01      	subs	r2, #1
 8002e2e:	0652      	lsls	r2, r2, #25
 8002e30:	4311      	orrs	r1, r2
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e36:	06d2      	lsls	r2, r2, #27
 8002e38:	430a      	orrs	r2, r1
 8002e3a:	493f      	ldr	r1, [pc, #252]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e40:	4b3d      	ldr	r3, [pc, #244]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3c      	ldr	r2, [pc, #240]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e4c:	4b3a      	ldr	r3, [pc, #232]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	4a39      	ldr	r2, [pc, #228]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e58:	f7fe fa08 	bl	800126c <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e60:	f7fe fa04 	bl	800126c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e067      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d0f0      	beq.n	8002e60 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7e:	e05f      	b.n	8002f40 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e05e      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e84:	4b2c      	ldr	r3, [pc, #176]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d157      	bne.n	8002f40 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e90:	4b29      	ldr	r3, [pc, #164]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a28      	ldr	r2, [pc, #160]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e9c:	4b26      	ldr	r3, [pc, #152]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ea2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ea6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ea8:	f7fe f9e0 	bl	800126c <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eb0:	f7fe f9dc 	bl	800126c <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e03f      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ec2:	4b1d      	ldr	r3, [pc, #116]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x7a4>
 8002ece:	e037      	b.n	8002f40 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2b0c      	cmp	r3, #12
 8002ed4:	d02d      	beq.n	8002f32 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed6:	4b18      	ldr	r3, [pc, #96]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002edc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee0:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002ef4:	f023 0303 	bic.w	r3, r3, #3
 8002ef8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002efa:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002efc:	68db      	ldr	r3, [r3, #12]
 8002efe:	4a0e      	ldr	r2, [pc, #56]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002f00:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002f04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f08:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f0a:	f7fe f9af 	bl	800126c <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f10:	e008      	b.n	8002f24 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fe f9ab 	bl	800126c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	1ad3      	subs	r3, r2, r3
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e00e      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f24:	4b04      	ldr	r3, [pc, #16]	; (8002f38 <HAL_RCC_OscConfig+0x82c>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1f0      	bne.n	8002f12 <HAL_RCC_OscConfig+0x806>
 8002f30:	e006      	b.n	8002f40 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e005      	b.n	8002f42 <HAL_RCC_OscConfig+0x836>
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002f40:	2300      	movs	r3, #0
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3720      	adds	r7, #32
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop

08002f4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e0c8      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f60:	4b66      	ldr	r3, [pc, #408]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0307 	and.w	r3, r3, #7
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d910      	bls.n	8002f90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f6e:	4b63      	ldr	r3, [pc, #396]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f023 0207 	bic.w	r2, r3, #7
 8002f76:	4961      	ldr	r1, [pc, #388]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 0307 	and.w	r3, r3, #7
 8002f86:	683a      	ldr	r2, [r7, #0]
 8002f88:	429a      	cmp	r2, r3
 8002f8a:	d001      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e0b0      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0301 	and.w	r3, r3, #1
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d04c      	beq.n	8003036 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2b03      	cmp	r3, #3
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fa4:	4b56      	ldr	r3, [pc, #344]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d121      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e09e      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d107      	bne.n	8002fcc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fbc:	4b50      	ldr	r3, [pc, #320]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d115      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e092      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d107      	bne.n	8002fe4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d109      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e086      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe4:	4b46      	ldr	r3, [pc, #280]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d101      	bne.n	8002ff4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	e07e      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ff4:	4b42      	ldr	r3, [pc, #264]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f023 0203 	bic.w	r2, r3, #3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	493f      	ldr	r1, [pc, #252]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003002:	4313      	orrs	r3, r2
 8003004:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003006:	f7fe f931 	bl	800126c <HAL_GetTick>
 800300a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800300c:	e00a      	b.n	8003024 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800300e:	f7fe f92d 	bl	800126c <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	f241 3288 	movw	r2, #5000	; 0x1388
 800301c:	4293      	cmp	r3, r2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e066      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003024:	4b36      	ldr	r3, [pc, #216]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 020c 	and.w	r2, r3, #12
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	429a      	cmp	r2, r3
 8003034:	d1eb      	bne.n	800300e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d008      	beq.n	8003054 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003042:	4b2f      	ldr	r3, [pc, #188]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	492c      	ldr	r1, [pc, #176]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003050:	4313      	orrs	r3, r2
 8003052:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003054:	4b29      	ldr	r3, [pc, #164]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d210      	bcs.n	8003084 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b26      	ldr	r3, [pc, #152]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 0207 	bic.w	r2, r3, #7
 800306a:	4924      	ldr	r1, [pc, #144]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003072:	4b22      	ldr	r3, [pc, #136]	; (80030fc <HAL_RCC_ClockConfig+0x1b0>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	683a      	ldr	r2, [r7, #0]
 800307c:	429a      	cmp	r2, r3
 800307e:	d001      	beq.n	8003084 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e036      	b.n	80030f2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	d008      	beq.n	80030a2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	68db      	ldr	r3, [r3, #12]
 800309c:	4918      	ldr	r1, [pc, #96]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 800309e:	4313      	orrs	r3, r2
 80030a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0308 	and.w	r3, r3, #8
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d009      	beq.n	80030c2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030ae:	4b14      	ldr	r3, [pc, #80]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	4910      	ldr	r1, [pc, #64]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030c2:	f000 f825 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 80030c6:	4602      	mov	r2, r0
 80030c8:	4b0d      	ldr	r3, [pc, #52]	; (8003100 <HAL_RCC_ClockConfig+0x1b4>)
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 030f 	and.w	r3, r3, #15
 80030d2:	490c      	ldr	r1, [pc, #48]	; (8003104 <HAL_RCC_ClockConfig+0x1b8>)
 80030d4:	5ccb      	ldrb	r3, [r1, r3]
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	fa22 f303 	lsr.w	r3, r2, r3
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030e2:	4b0a      	ldr	r3, [pc, #40]	; (800310c <HAL_RCC_ClockConfig+0x1c0>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f870 	bl	80011cc <HAL_InitTick>
 80030ec:	4603      	mov	r3, r0
 80030ee:	72fb      	strb	r3, [r7, #11]

  return status;
 80030f0:	7afb      	ldrb	r3, [r7, #11]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	3710      	adds	r7, #16
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40022000 	.word	0x40022000
 8003100:	40021000 	.word	0x40021000
 8003104:	08004460 	.word	0x08004460
 8003108:	20000000 	.word	0x20000000
 800310c:	20000004 	.word	0x20000004

08003110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003110:	b480      	push	{r7}
 8003112:	b089      	sub	sp, #36	; 0x24
 8003114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003116:	2300      	movs	r3, #0
 8003118:	61fb      	str	r3, [r7, #28]
 800311a:	2300      	movs	r3, #0
 800311c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800311e:	4b3e      	ldr	r3, [pc, #248]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f003 030c 	and.w	r3, r3, #12
 8003126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003128:	4b3b      	ldr	r3, [pc, #236]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	f003 0303 	and.w	r3, r3, #3
 8003130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d005      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x34>
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b0c      	cmp	r3, #12
 800313c:	d121      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d11e      	bne.n	8003182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003150:	4b31      	ldr	r3, [pc, #196]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003152:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003156:	0a1b      	lsrs	r3, r3, #8
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	61fb      	str	r3, [r7, #28]
 800315e:	e005      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003160:	4b2d      	ldr	r3, [pc, #180]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800316c:	4a2b      	ldr	r2, [pc, #172]	; (800321c <HAL_RCC_GetSysClockFreq+0x10c>)
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10d      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b04      	cmp	r3, #4
 8003186:	d102      	bne.n	800318e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003188:	4b25      	ldr	r3, [pc, #148]	; (8003220 <HAL_RCC_GetSysClockFreq+0x110>)
 800318a:	61bb      	str	r3, [r7, #24]
 800318c:	e004      	b.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d101      	bne.n	8003198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_RCC_GetSysClockFreq+0x114>)
 8003196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	2b0c      	cmp	r3, #12
 800319c:	d134      	bne.n	8003208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800319e:	4b1e      	ldr	r3, [pc, #120]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f003 0303 	and.w	r3, r3, #3
 80031a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d003      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	d003      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0xac>
 80031b4:	e005      	b.n	80031c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031b6:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCC_GetSysClockFreq+0x110>)
 80031b8:	617b      	str	r3, [r7, #20]
      break;
 80031ba:	e005      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031bc:	4b19      	ldr	r3, [pc, #100]	; (8003224 <HAL_RCC_GetSysClockFreq+0x114>)
 80031be:	617b      	str	r3, [r7, #20]
      break;
 80031c0:	e002      	b.n	80031c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	617b      	str	r3, [r7, #20]
      break;
 80031c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031c8:	4b13      	ldr	r3, [pc, #76]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 0307 	and.w	r3, r3, #7
 80031d2:	3301      	adds	r3, #1
 80031d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031d6:	4b10      	ldr	r3, [pc, #64]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e0:	697a      	ldr	r2, [r7, #20]
 80031e2:	fb02 f203 	mul.w	r2, r2, r3
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031ee:	4b0a      	ldr	r3, [pc, #40]	; (8003218 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	0e5b      	lsrs	r3, r3, #25
 80031f4:	f003 0303 	and.w	r3, r3, #3
 80031f8:	3301      	adds	r3, #1
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	fbb2 f3f3 	udiv	r3, r2, r3
 8003206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003208:	69bb      	ldr	r3, [r7, #24]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3724      	adds	r7, #36	; 0x24
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
 8003216:	bf00      	nop
 8003218:	40021000 	.word	0x40021000
 800321c:	08004478 	.word	0x08004478
 8003220:	00f42400 	.word	0x00f42400
 8003224:	007a1200 	.word	0x007a1200

08003228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <HAL_RCC_GetHCLKFreq+0x14>)
 800322e:	681b      	ldr	r3, [r3, #0]
}
 8003230:	4618      	mov	r0, r3
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000000 	.word	0x20000000

08003240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003244:	f7ff fff0 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003248:	4602      	mov	r2, r0
 800324a:	4b06      	ldr	r3, [pc, #24]	; (8003264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	0a1b      	lsrs	r3, r3, #8
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	4904      	ldr	r1, [pc, #16]	; (8003268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003256:	5ccb      	ldrb	r3, [r1, r3]
 8003258:	f003 031f 	and.w	r3, r3, #31
 800325c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003260:	4618      	mov	r0, r3
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	08004470 	.word	0x08004470

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003270:	f7ff ffda 	bl	8003228 <HAL_RCC_GetHCLKFreq>
 8003274:	4602      	mov	r2, r0
 8003276:	4b06      	ldr	r3, [pc, #24]	; (8003290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	0adb      	lsrs	r3, r3, #11
 800327c:	f003 0307 	and.w	r3, r3, #7
 8003280:	4904      	ldr	r1, [pc, #16]	; (8003294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003282:	5ccb      	ldrb	r3, [r1, r3]
 8003284:	f003 031f 	and.w	r3, r3, #31
 8003288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800328c:	4618      	mov	r0, r3
 800328e:	bd80      	pop	{r7, pc}
 8003290:	40021000 	.word	0x40021000
 8003294:	08004470 	.word	0x08004470

08003298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032a4:	4b2a      	ldr	r3, [pc, #168]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d003      	beq.n	80032b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032b0:	f7ff f980 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 80032b4:	6178      	str	r0, [r7, #20]
 80032b6:	e014      	b.n	80032e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032b8:	4b25      	ldr	r3, [pc, #148]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032bc:	4a24      	ldr	r2, [pc, #144]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032c2:	6593      	str	r3, [r2, #88]	; 0x58
 80032c4:	4b22      	ldr	r3, [pc, #136]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	60fb      	str	r3, [r7, #12]
 80032ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032d0:	f7ff f970 	bl	80025b4 <HAL_PWREx_GetVoltageRange>
 80032d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032d6:	4b1e      	ldr	r3, [pc, #120]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	4a1d      	ldr	r2, [pc, #116]	; (8003350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e8:	d10b      	bne.n	8003302 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2b80      	cmp	r3, #128	; 0x80
 80032ee:	d919      	bls.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2ba0      	cmp	r3, #160	; 0xa0
 80032f4:	d902      	bls.n	80032fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032f6:	2302      	movs	r3, #2
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	e013      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032fc:	2301      	movs	r3, #1
 80032fe:	613b      	str	r3, [r7, #16]
 8003300:	e010      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2b80      	cmp	r3, #128	; 0x80
 8003306:	d902      	bls.n	800330e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003308:	2303      	movs	r3, #3
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	e00a      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b80      	cmp	r3, #128	; 0x80
 8003312:	d102      	bne.n	800331a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003314:	2302      	movs	r3, #2
 8003316:	613b      	str	r3, [r7, #16]
 8003318:	e004      	b.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b70      	cmp	r3, #112	; 0x70
 800331e:	d101      	bne.n	8003324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003320:	2301      	movs	r3, #1
 8003322:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f023 0207 	bic.w	r2, r3, #7
 800332c:	4909      	ldr	r1, [pc, #36]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003334:	4b07      	ldr	r3, [pc, #28]	; (8003354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0307 	and.w	r3, r3, #7
 800333c:	693a      	ldr	r2, [r7, #16]
 800333e:	429a      	cmp	r2, r3
 8003340:	d001      	beq.n	8003346 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3718      	adds	r7, #24
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	40021000 	.word	0x40021000
 8003354:	40022000 	.word	0x40022000

08003358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003360:	2300      	movs	r3, #0
 8003362:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003364:	2300      	movs	r3, #0
 8003366:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003370:	2b00      	cmp	r3, #0
 8003372:	d031      	beq.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003378:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800337c:	d01a      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800337e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003382:	d814      	bhi.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003384:	2b00      	cmp	r3, #0
 8003386:	d009      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800338c:	d10f      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800338e:	4b5d      	ldr	r3, [pc, #372]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	4a5c      	ldr	r2, [pc, #368]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800339a:	e00c      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fa44 	bl	8003830 <RCCEx_PLLSAI1_Config>
 80033a8:	4603      	mov	r3, r0
 80033aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ac:	e003      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	74fb      	strb	r3, [r7, #19]
      break;
 80033b2:	e000      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80033b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033b6:	7cfb      	ldrb	r3, [r7, #19]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033bc:	4b51      	ldr	r3, [pc, #324]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033ca:	494e      	ldr	r1, [pc, #312]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80033d2:	e001      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033d4:	7cfb      	ldrb	r3, [r7, #19]
 80033d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	f000 809e 	beq.w	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033e6:	2300      	movs	r3, #0
 80033e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80033ea:	4b46      	ldr	r3, [pc, #280]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80033ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80033fa:	2300      	movs	r3, #0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00d      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003404:	4a3f      	ldr	r2, [pc, #252]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6593      	str	r3, [r2, #88]	; 0x58
 800340c:	4b3d      	ldr	r3, [pc, #244]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800340e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003418:	2301      	movs	r3, #1
 800341a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800341c:	4b3a      	ldr	r3, [pc, #232]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a39      	ldr	r2, [pc, #228]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003428:	f7fd ff20 	bl	800126c <HAL_GetTick>
 800342c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800342e:	e009      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003430:	f7fd ff1c 	bl	800126c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d902      	bls.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	74fb      	strb	r3, [r7, #19]
        break;
 8003442:	e005      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003444:	4b30      	ldr	r3, [pc, #192]	; (8003508 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ef      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d15a      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003456:	4b2b      	ldr	r3, [pc, #172]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800345c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01e      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	429a      	cmp	r2, r3
 8003470:	d019      	beq.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003472:	4b24      	ldr	r3, [pc, #144]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003478:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800347c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800347e:	4b21      	ldr	r3, [pc, #132]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003484:	4a1f      	ldr	r2, [pc, #124]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003486:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800348e:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	4a1b      	ldr	r2, [pc, #108]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800349e:	4a19      	ldr	r2, [pc, #100]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d016      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fd fedc 	bl	800126c <HAL_GetTick>
 80034b4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034b6:	e00b      	b.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b8:	f7fd fed8 	bl	800126c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d902      	bls.n	80034d0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	74fb      	strb	r3, [r7, #19]
            break;
 80034ce:	e006      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034d0:	4b0c      	ldr	r3, [pc, #48]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d6:	f003 0302 	and.w	r3, r3, #2
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0ec      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80034de:	7cfb      	ldrb	r3, [r7, #19]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d10b      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80034e4:	4b07      	ldr	r3, [pc, #28]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034f2:	4904      	ldr	r1, [pc, #16]	; (8003504 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80034fa:	e009      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034fc:	7cfb      	ldrb	r3, [r7, #19]
 80034fe:	74bb      	strb	r3, [r7, #18]
 8003500:	e006      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003502:	bf00      	nop
 8003504:	40021000 	.word	0x40021000
 8003508:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003510:	7c7b      	ldrb	r3, [r7, #17]
 8003512:	2b01      	cmp	r3, #1
 8003514:	d105      	bne.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003516:	4b9e      	ldr	r3, [pc, #632]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351a:	4a9d      	ldr	r2, [pc, #628]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800351c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003520:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800352e:	4b98      	ldr	r3, [pc, #608]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f023 0203 	bic.w	r2, r3, #3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	4994      	ldr	r1, [pc, #592]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0302 	and.w	r3, r3, #2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003550:	4b8f      	ldr	r3, [pc, #572]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f023 020c 	bic.w	r2, r3, #12
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	498c      	ldr	r1, [pc, #560]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003572:	4b87      	ldr	r3, [pc, #540]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003580:	4983      	ldr	r1, [pc, #524]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003594:	4b7e      	ldr	r3, [pc, #504]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a2:	497b      	ldr	r1, [pc, #492]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80035b6:	4b76      	ldr	r3, [pc, #472]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	4972      	ldr	r1, [pc, #456]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80035d8:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035de:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	496a      	ldr	r1, [pc, #424]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035e8:	4313      	orrs	r3, r2
 80035ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80035fa:	4b65      	ldr	r3, [pc, #404]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80035fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003600:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003608:	4961      	ldr	r1, [pc, #388]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800360a:	4313      	orrs	r3, r2
 800360c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00a      	beq.n	8003632 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800361c:	4b5c      	ldr	r3, [pc, #368]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	4959      	ldr	r1, [pc, #356]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00a      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800363e:	4b54      	ldr	r3, [pc, #336]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003644:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364c:	4950      	ldr	r1, [pc, #320]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00a      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003660:	4b4b      	ldr	r3, [pc, #300]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003666:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800366e:	4948      	ldr	r1, [pc, #288]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003670:	4313      	orrs	r3, r2
 8003672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800367e:	2b00      	cmp	r3, #0
 8003680:	d00a      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003684:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003688:	f023 0203 	bic.w	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	493f      	ldr	r1, [pc, #252]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003692:	4313      	orrs	r3, r2
 8003694:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d028      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036a4:	4b3a      	ldr	r3, [pc, #232]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b2:	4937      	ldr	r1, [pc, #220]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80036c2:	d106      	bne.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80036c4:	4b32      	ldr	r3, [pc, #200]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	4a31      	ldr	r2, [pc, #196]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80036ce:	60d3      	str	r3, [r2, #12]
 80036d0:	e011      	b.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80036da:	d10c      	bne.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	3304      	adds	r3, #4
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 f8a4 	bl	8003830 <RCCEx_PLLSAI1_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 80036f2:	7cfb      	ldrb	r3, [r7, #19]
 80036f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003702:	4b23      	ldr	r3, [pc, #140]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003708:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003710:	491f      	ldr	r1, [pc, #124]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800371c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003720:	d106      	bne.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003722:	4b1b      	ldr	r3, [pc, #108]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	4a1a      	ldr	r2, [pc, #104]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800372c:	60d3      	str	r3, [r2, #12]
 800372e:	e011      	b.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003734:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003738:	d10c      	bne.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	3304      	adds	r3, #4
 800373e:	2101      	movs	r1, #1
 8003740:	4618      	mov	r0, r3
 8003742:	f000 f875 	bl	8003830 <RCCEx_PLLSAI1_Config>
 8003746:	4603      	mov	r3, r0
 8003748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800374a:	7cfb      	ldrb	r3, [r7, #19]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8003750:	7cfb      	ldrb	r3, [r7, #19]
 8003752:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800375c:	2b00      	cmp	r3, #0
 800375e:	d02b      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003766:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376e:	4908      	ldr	r1, [pc, #32]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003770:	4313      	orrs	r3, r2
 8003772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800377a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800377e:	d109      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003780:	4b03      	ldr	r3, [pc, #12]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	4a02      	ldr	r2, [pc, #8]	; (8003790 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8003786:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800378a:	60d3      	str	r3, [r2, #12]
 800378c:	e014      	b.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003798:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800379c:	d10c      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	3304      	adds	r3, #4
 80037a2:	2101      	movs	r1, #1
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 f843 	bl	8003830 <RCCEx_PLLSAI1_Config>
 80037aa:	4603      	mov	r3, r0
 80037ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d01c      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037c4:	4b19      	ldr	r3, [pc, #100]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d2:	4916      	ldr	r1, [pc, #88]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80037e2:	d10c      	bne.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3304      	adds	r3, #4
 80037e8:	2102      	movs	r1, #2
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 f820 	bl	8003830 <RCCEx_PLLSAI1_Config>
 80037f0:	4603      	mov	r3, r0
 80037f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037f4:	7cfb      	ldrb	r3, [r7, #19]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 80037fa:	7cfb      	ldrb	r3, [r7, #19]
 80037fc:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800380a:	4b08      	ldr	r3, [pc, #32]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003818:	4904      	ldr	r1, [pc, #16]	; (800382c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003820:	7cbb      	ldrb	r3, [r7, #18]
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	40021000 	.word	0x40021000

08003830 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800383e:	4b74      	ldr	r3, [pc, #464]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f003 0303 	and.w	r3, r3, #3
 8003846:	2b00      	cmp	r3, #0
 8003848:	d018      	beq.n	800387c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800384a:	4b71      	ldr	r3, [pc, #452]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0203 	and.w	r2, r3, #3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d10d      	bne.n	8003876 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
       ||
 800385e:	2b00      	cmp	r3, #0
 8003860:	d009      	beq.n	8003876 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003862:	4b6b      	ldr	r3, [pc, #428]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	091b      	lsrs	r3, r3, #4
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
       ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d047      	beq.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e044      	b.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b03      	cmp	r3, #3
 8003882:	d018      	beq.n	80038b6 <RCCEx_PLLSAI1_Config+0x86>
 8003884:	2b03      	cmp	r3, #3
 8003886:	d825      	bhi.n	80038d4 <RCCEx_PLLSAI1_Config+0xa4>
 8003888:	2b01      	cmp	r3, #1
 800388a:	d002      	beq.n	8003892 <RCCEx_PLLSAI1_Config+0x62>
 800388c:	2b02      	cmp	r3, #2
 800388e:	d009      	beq.n	80038a4 <RCCEx_PLLSAI1_Config+0x74>
 8003890:	e020      	b.n	80038d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11d      	bne.n	80038da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038a2:	e01a      	b.n	80038da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038a4:	4b5a      	ldr	r3, [pc, #360]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d116      	bne.n	80038de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b4:	e013      	b.n	80038de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038b6:	4b56      	ldr	r3, [pc, #344]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038c2:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038d2:	e006      	b.n	80038e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	73fb      	strb	r3, [r7, #15]
      break;
 80038d8:	e004      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038da:	bf00      	nop
 80038dc:	e002      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038de:	bf00      	nop
 80038e0:	e000      	b.n	80038e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80038e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d10d      	bne.n	8003906 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6819      	ldr	r1, [r3, #0]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	011b      	lsls	r3, r3, #4
 80038fe:	430b      	orrs	r3, r1
 8003900:	4943      	ldr	r1, [pc, #268]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003902:	4313      	orrs	r3, r2
 8003904:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003906:	7bfb      	ldrb	r3, [r7, #15]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d17c      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800390c:	4b40      	ldr	r3, [pc, #256]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a3f      	ldr	r2, [pc, #252]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003912:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003918:	f7fd fca8 	bl	800126c <HAL_GetTick>
 800391c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800391e:	e009      	b.n	8003934 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003920:	f7fd fca4 	bl	800126c <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d902      	bls.n	8003934 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	73fb      	strb	r3, [r7, #15]
        break;
 8003932:	e005      	b.n	8003940 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003934:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1ef      	bne.n	8003920 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d15f      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d110      	bne.n	800396e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800394c:	4b30      	ldr	r3, [pc, #192]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003954:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	6892      	ldr	r2, [r2, #8]
 800395c:	0211      	lsls	r1, r2, #8
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	68d2      	ldr	r2, [r2, #12]
 8003962:	06d2      	lsls	r2, r2, #27
 8003964:	430a      	orrs	r2, r1
 8003966:	492a      	ldr	r1, [pc, #168]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003968:	4313      	orrs	r3, r2
 800396a:	610b      	str	r3, [r1, #16]
 800396c:	e027      	b.n	80039be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d112      	bne.n	800399a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003974:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800397c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6892      	ldr	r2, [r2, #8]
 8003984:	0211      	lsls	r1, r2, #8
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6912      	ldr	r2, [r2, #16]
 800398a:	0852      	lsrs	r2, r2, #1
 800398c:	3a01      	subs	r2, #1
 800398e:	0552      	lsls	r2, r2, #21
 8003990:	430a      	orrs	r2, r1
 8003992:	491f      	ldr	r1, [pc, #124]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003994:	4313      	orrs	r3, r2
 8003996:	610b      	str	r3, [r1, #16]
 8003998:	e011      	b.n	80039be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800399a:	4b1d      	ldr	r3, [pc, #116]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 800399c:	691b      	ldr	r3, [r3, #16]
 800399e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80039a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6892      	ldr	r2, [r2, #8]
 80039aa:	0211      	lsls	r1, r2, #8
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	6952      	ldr	r2, [r2, #20]
 80039b0:	0852      	lsrs	r2, r2, #1
 80039b2:	3a01      	subs	r2, #1
 80039b4:	0652      	lsls	r2, r2, #25
 80039b6:	430a      	orrs	r2, r1
 80039b8:	4915      	ldr	r1, [pc, #84]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80039be:	4b14      	ldr	r3, [pc, #80]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a13      	ldr	r2, [pc, #76]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80039c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ca:	f7fd fc4f 	bl	800126c <HAL_GetTick>
 80039ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039d0:	e009      	b.n	80039e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80039d2:	f7fd fc4b 	bl	800126c <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d902      	bls.n	80039e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	73fb      	strb	r3, [r7, #15]
          break;
 80039e4:	e005      	b.n	80039f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80039e6:	4b0a      	ldr	r3, [pc, #40]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d0ef      	beq.n	80039d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80039f2:	7bfb      	ldrb	r3, [r7, #15]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d106      	bne.n	8003a06 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80039f8:	4b05      	ldr	r3, [pc, #20]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 80039fa:	691a      	ldr	r2, [r3, #16]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	699b      	ldr	r3, [r3, #24]
 8003a00:	4903      	ldr	r1, [pc, #12]	; (8003a10 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d101      	bne.n	8003a26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e040      	b.n	8003aa8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fd fab6 	bl	8000fa8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	; 0x24
 8003a40:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f022 0201 	bic.w	r2, r2, #1
 8003a50:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f000 f8c0 	bl	8003bd8 <UART_SetConfig>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e022      	b.n	8003aa8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fb10 	bl	8004090 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a7e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	689a      	ldr	r2, [r3, #8]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a8e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fb97 	bl	80041d4 <UART_CheckIdleState>
 8003aa6:	4603      	mov	r3, r0
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3708      	adds	r7, #8
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08a      	sub	sp, #40	; 0x28
 8003ab4:	af02      	add	r7, sp, #8
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	4613      	mov	r3, r2
 8003abe:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac4:	2b20      	cmp	r3, #32
 8003ac6:	f040 8082 	bne.w	8003bce <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_UART_Transmit+0x26>
 8003ad0:	88fb      	ldrh	r3, [r7, #6]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e07a      	b.n	8003bd0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d101      	bne.n	8003ae8 <HAL_UART_Transmit+0x38>
 8003ae4:	2302      	movs	r3, #2
 8003ae6:	e073      	b.n	8003bd0 <HAL_UART_Transmit+0x120>
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2221      	movs	r2, #33	; 0x21
 8003afc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003afe:	f7fd fbb5 	bl	800126c <HAL_GetTick>
 8003b02:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	88fa      	ldrh	r2, [r7, #6]
 8003b08:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	88fa      	ldrh	r2, [r7, #6]
 8003b10:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b1c:	d108      	bne.n	8003b30 <HAL_UART_Transmit+0x80>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d104      	bne.n	8003b30 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	61bb      	str	r3, [r7, #24]
 8003b2e:	e003      	b.n	8003b38 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b40:	e02d      	b.n	8003b9e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2180      	movs	r1, #128	; 0x80
 8003b4c:	68f8      	ldr	r0, [r7, #12]
 8003b4e:	f000 fb8a 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 8003b52:	4603      	mov	r3, r0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d001      	beq.n	8003b5c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e039      	b.n	8003bd0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d10b      	bne.n	8003b7a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b6e:	b292      	uxth	r2, r2
 8003b70:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b72:	69bb      	ldr	r3, [r7, #24]
 8003b74:	3302      	adds	r3, #2
 8003b76:	61bb      	str	r3, [r7, #24]
 8003b78:	e008      	b.n	8003b8c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b7a:	69fb      	ldr	r3, [r7, #28]
 8003b7c:	781a      	ldrb	r2, [r3, #0]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	b292      	uxth	r2, r2
 8003b84:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003ba4:	b29b      	uxth	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d1cb      	bne.n	8003b42 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	2140      	movs	r1, #64	; 0x40
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f000 fb56 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d001      	beq.n	8003bc4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e005      	b.n	8003bd0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	e000      	b.n	8003bd0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bce:	2302      	movs	r3, #2
  }
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3720      	adds	r7, #32
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}

08003bd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bd8:	b5b0      	push	{r4, r5, r7, lr}
 8003bda:	b088      	sub	sp, #32
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003be0:	2300      	movs	r3, #0
 8003be2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	689a      	ldr	r2, [r3, #8]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	431a      	orrs	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	695b      	ldr	r3, [r3, #20]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681a      	ldr	r2, [r3, #0]
 8003c02:	4ba4      	ldr	r3, [pc, #656]	; (8003e94 <UART_SetConfig+0x2bc>)
 8003c04:	4013      	ands	r3, r2
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	6812      	ldr	r2, [r2, #0]
 8003c0a:	69f9      	ldr	r1, [r7, #28]
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68da      	ldr	r2, [r3, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	430a      	orrs	r2, r1
 8003c24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a99      	ldr	r2, [pc, #612]	; (8003e98 <UART_SetConfig+0x2c0>)
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d004      	beq.n	8003c40 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a1b      	ldr	r3, [r3, #32]
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	69fa      	ldr	r2, [r7, #28]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a90      	ldr	r2, [pc, #576]	; (8003e9c <UART_SetConfig+0x2c4>)
 8003c5a:	4293      	cmp	r3, r2
 8003c5c:	d121      	bne.n	8003ca2 <UART_SetConfig+0xca>
 8003c5e:	4b90      	ldr	r3, [pc, #576]	; (8003ea0 <UART_SetConfig+0x2c8>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	f003 0303 	and.w	r3, r3, #3
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d817      	bhi.n	8003c9c <UART_SetConfig+0xc4>
 8003c6c:	a201      	add	r2, pc, #4	; (adr r2, 8003c74 <UART_SetConfig+0x9c>)
 8003c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c72:	bf00      	nop
 8003c74:	08003c85 	.word	0x08003c85
 8003c78:	08003c91 	.word	0x08003c91
 8003c7c:	08003c8b 	.word	0x08003c8b
 8003c80:	08003c97 	.word	0x08003c97
 8003c84:	2301      	movs	r3, #1
 8003c86:	76fb      	strb	r3, [r7, #27]
 8003c88:	e0bc      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	76fb      	strb	r3, [r7, #27]
 8003c8e:	e0b9      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003c90:	2304      	movs	r3, #4
 8003c92:	76fb      	strb	r3, [r7, #27]
 8003c94:	e0b6      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003c96:	2308      	movs	r3, #8
 8003c98:	76fb      	strb	r3, [r7, #27]
 8003c9a:	e0b3      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	76fb      	strb	r3, [r7, #27]
 8003ca0:	e0b0      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7f      	ldr	r2, [pc, #508]	; (8003ea4 <UART_SetConfig+0x2cc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d132      	bne.n	8003d12 <UART_SetConfig+0x13a>
 8003cac:	4b7c      	ldr	r3, [pc, #496]	; (8003ea0 <UART_SetConfig+0x2c8>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f003 030c 	and.w	r3, r3, #12
 8003cb6:	2b0c      	cmp	r3, #12
 8003cb8:	d828      	bhi.n	8003d0c <UART_SetConfig+0x134>
 8003cba:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0xe8>)
 8003cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003d0d 	.word	0x08003d0d
 8003cc8:	08003d0d 	.word	0x08003d0d
 8003ccc:	08003d0d 	.word	0x08003d0d
 8003cd0:	08003d01 	.word	0x08003d01
 8003cd4:	08003d0d 	.word	0x08003d0d
 8003cd8:	08003d0d 	.word	0x08003d0d
 8003cdc:	08003d0d 	.word	0x08003d0d
 8003ce0:	08003cfb 	.word	0x08003cfb
 8003ce4:	08003d0d 	.word	0x08003d0d
 8003ce8:	08003d0d 	.word	0x08003d0d
 8003cec:	08003d0d 	.word	0x08003d0d
 8003cf0:	08003d07 	.word	0x08003d07
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	76fb      	strb	r3, [r7, #27]
 8003cf8:	e084      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	76fb      	strb	r3, [r7, #27]
 8003cfe:	e081      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d00:	2304      	movs	r3, #4
 8003d02:	76fb      	strb	r3, [r7, #27]
 8003d04:	e07e      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d06:	2308      	movs	r3, #8
 8003d08:	76fb      	strb	r3, [r7, #27]
 8003d0a:	e07b      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d0c:	2310      	movs	r3, #16
 8003d0e:	76fb      	strb	r3, [r7, #27]
 8003d10:	e078      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a64      	ldr	r2, [pc, #400]	; (8003ea8 <UART_SetConfig+0x2d0>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d120      	bne.n	8003d5e <UART_SetConfig+0x186>
 8003d1c:	4b60      	ldr	r3, [pc, #384]	; (8003ea0 <UART_SetConfig+0x2c8>)
 8003d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d26:	2b30      	cmp	r3, #48	; 0x30
 8003d28:	d013      	beq.n	8003d52 <UART_SetConfig+0x17a>
 8003d2a:	2b30      	cmp	r3, #48	; 0x30
 8003d2c:	d814      	bhi.n	8003d58 <UART_SetConfig+0x180>
 8003d2e:	2b20      	cmp	r3, #32
 8003d30:	d009      	beq.n	8003d46 <UART_SetConfig+0x16e>
 8003d32:	2b20      	cmp	r3, #32
 8003d34:	d810      	bhi.n	8003d58 <UART_SetConfig+0x180>
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d002      	beq.n	8003d40 <UART_SetConfig+0x168>
 8003d3a:	2b10      	cmp	r3, #16
 8003d3c:	d006      	beq.n	8003d4c <UART_SetConfig+0x174>
 8003d3e:	e00b      	b.n	8003d58 <UART_SetConfig+0x180>
 8003d40:	2300      	movs	r3, #0
 8003d42:	76fb      	strb	r3, [r7, #27]
 8003d44:	e05e      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d46:	2302      	movs	r3, #2
 8003d48:	76fb      	strb	r3, [r7, #27]
 8003d4a:	e05b      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d4c:	2304      	movs	r3, #4
 8003d4e:	76fb      	strb	r3, [r7, #27]
 8003d50:	e058      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d52:	2308      	movs	r3, #8
 8003d54:	76fb      	strb	r3, [r7, #27]
 8003d56:	e055      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d58:	2310      	movs	r3, #16
 8003d5a:	76fb      	strb	r3, [r7, #27]
 8003d5c:	e052      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a52      	ldr	r2, [pc, #328]	; (8003eac <UART_SetConfig+0x2d4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d120      	bne.n	8003daa <UART_SetConfig+0x1d2>
 8003d68:	4b4d      	ldr	r3, [pc, #308]	; (8003ea0 <UART_SetConfig+0x2c8>)
 8003d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d72:	2bc0      	cmp	r3, #192	; 0xc0
 8003d74:	d013      	beq.n	8003d9e <UART_SetConfig+0x1c6>
 8003d76:	2bc0      	cmp	r3, #192	; 0xc0
 8003d78:	d814      	bhi.n	8003da4 <UART_SetConfig+0x1cc>
 8003d7a:	2b80      	cmp	r3, #128	; 0x80
 8003d7c:	d009      	beq.n	8003d92 <UART_SetConfig+0x1ba>
 8003d7e:	2b80      	cmp	r3, #128	; 0x80
 8003d80:	d810      	bhi.n	8003da4 <UART_SetConfig+0x1cc>
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d002      	beq.n	8003d8c <UART_SetConfig+0x1b4>
 8003d86:	2b40      	cmp	r3, #64	; 0x40
 8003d88:	d006      	beq.n	8003d98 <UART_SetConfig+0x1c0>
 8003d8a:	e00b      	b.n	8003da4 <UART_SetConfig+0x1cc>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e038      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d92:	2302      	movs	r3, #2
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e035      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	e032      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	76fb      	strb	r3, [r7, #27]
 8003da2:	e02f      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003da4:	2310      	movs	r3, #16
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	e02c      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a3a      	ldr	r2, [pc, #232]	; (8003e98 <UART_SetConfig+0x2c0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d125      	bne.n	8003e00 <UART_SetConfig+0x228>
 8003db4:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <UART_SetConfig+0x2c8>)
 8003db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dba:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc2:	d017      	beq.n	8003df4 <UART_SetConfig+0x21c>
 8003dc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc8:	d817      	bhi.n	8003dfa <UART_SetConfig+0x222>
 8003dca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dce:	d00b      	beq.n	8003de8 <UART_SetConfig+0x210>
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d811      	bhi.n	8003dfa <UART_SetConfig+0x222>
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <UART_SetConfig+0x20a>
 8003dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dde:	d006      	beq.n	8003dee <UART_SetConfig+0x216>
 8003de0:	e00b      	b.n	8003dfa <UART_SetConfig+0x222>
 8003de2:	2300      	movs	r3, #0
 8003de4:	76fb      	strb	r3, [r7, #27]
 8003de6:	e00d      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003de8:	2302      	movs	r3, #2
 8003dea:	76fb      	strb	r3, [r7, #27]
 8003dec:	e00a      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003dee:	2304      	movs	r3, #4
 8003df0:	76fb      	strb	r3, [r7, #27]
 8003df2:	e007      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003df4:	2308      	movs	r3, #8
 8003df6:	76fb      	strb	r3, [r7, #27]
 8003df8:	e004      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003dfa:	2310      	movs	r3, #16
 8003dfc:	76fb      	strb	r3, [r7, #27]
 8003dfe:	e001      	b.n	8003e04 <UART_SetConfig+0x22c>
 8003e00:	2310      	movs	r3, #16
 8003e02:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a23      	ldr	r2, [pc, #140]	; (8003e98 <UART_SetConfig+0x2c0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	f040 8084 	bne.w	8003f18 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e10:	7efb      	ldrb	r3, [r7, #27]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d823      	bhi.n	8003e5e <UART_SetConfig+0x286>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x244>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e5f 	.word	0x08003e5f
 8003e24:	08003e49 	.word	0x08003e49
 8003e28:	08003e5f 	.word	0x08003e5f
 8003e2c:	08003e4f 	.word	0x08003e4f
 8003e30:	08003e5f 	.word	0x08003e5f
 8003e34:	08003e5f 	.word	0x08003e5f
 8003e38:	08003e5f 	.word	0x08003e5f
 8003e3c:	08003e57 	.word	0x08003e57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e40:	f7ff f9fe 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8003e44:	6178      	str	r0, [r7, #20]
        break;
 8003e46:	e00f      	b.n	8003e68 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e48:	4b19      	ldr	r3, [pc, #100]	; (8003eb0 <UART_SetConfig+0x2d8>)
 8003e4a:	617b      	str	r3, [r7, #20]
        break;
 8003e4c:	e00c      	b.n	8003e68 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e4e:	f7ff f95f 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 8003e52:	6178      	str	r0, [r7, #20]
        break;
 8003e54:	e008      	b.n	8003e68 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e5a:	617b      	str	r3, [r7, #20]
        break;
 8003e5c:	e004      	b.n	8003e68 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	76bb      	strb	r3, [r7, #26]
        break;
 8003e66:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8102 	beq.w	8004074 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685a      	ldr	r2, [r3, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	4413      	add	r3, r2
 8003e7a:	697a      	ldr	r2, [r7, #20]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d305      	bcc.n	8003e8c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e86:	697a      	ldr	r2, [r7, #20]
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d913      	bls.n	8003eb4 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	76bb      	strb	r3, [r7, #26]
 8003e90:	e0f0      	b.n	8004074 <UART_SetConfig+0x49c>
 8003e92:	bf00      	nop
 8003e94:	efff69f3 	.word	0xefff69f3
 8003e98:	40008000 	.word	0x40008000
 8003e9c:	40013800 	.word	0x40013800
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	40004400 	.word	0x40004400
 8003ea8:	40004800 	.word	0x40004800
 8003eac:	40004c00 	.word	0x40004c00
 8003eb0:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f04f 0100 	mov.w	r1, #0
 8003ebc:	f04f 0200 	mov.w	r2, #0
 8003ec0:	f04f 0300 	mov.w	r3, #0
 8003ec4:	020b      	lsls	r3, r1, #8
 8003ec6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003eca:	0202      	lsls	r2, r0, #8
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	6849      	ldr	r1, [r1, #4]
 8003ed0:	0849      	lsrs	r1, r1, #1
 8003ed2:	4608      	mov	r0, r1
 8003ed4:	f04f 0100 	mov.w	r1, #0
 8003ed8:	1814      	adds	r4, r2, r0
 8003eda:	eb43 0501 	adc.w	r5, r3, r1
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	461a      	mov	r2, r3
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	4620      	mov	r0, r4
 8003eea:	4629      	mov	r1, r5
 8003eec:	f7fc f97a 	bl	80001e4 <__aeabi_uldivmod>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003efe:	d308      	bcc.n	8003f12 <UART_SetConfig+0x33a>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f06:	d204      	bcs.n	8003f12 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	693a      	ldr	r2, [r7, #16]
 8003f0e:	60da      	str	r2, [r3, #12]
 8003f10:	e0b0      	b.n	8004074 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 8003f12:	2301      	movs	r3, #1
 8003f14:	76bb      	strb	r3, [r7, #26]
 8003f16:	e0ad      	b.n	8004074 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f20:	d15c      	bne.n	8003fdc <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8003f22:	7efb      	ldrb	r3, [r7, #27]
 8003f24:	2b08      	cmp	r3, #8
 8003f26:	d828      	bhi.n	8003f7a <UART_SetConfig+0x3a2>
 8003f28:	a201      	add	r2, pc, #4	; (adr r2, 8003f30 <UART_SetConfig+0x358>)
 8003f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f2e:	bf00      	nop
 8003f30:	08003f55 	.word	0x08003f55
 8003f34:	08003f5d 	.word	0x08003f5d
 8003f38:	08003f65 	.word	0x08003f65
 8003f3c:	08003f7b 	.word	0x08003f7b
 8003f40:	08003f6b 	.word	0x08003f6b
 8003f44:	08003f7b 	.word	0x08003f7b
 8003f48:	08003f7b 	.word	0x08003f7b
 8003f4c:	08003f7b 	.word	0x08003f7b
 8003f50:	08003f73 	.word	0x08003f73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f54:	f7ff f974 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8003f58:	6178      	str	r0, [r7, #20]
        break;
 8003f5a:	e013      	b.n	8003f84 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f5c:	f7ff f986 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 8003f60:	6178      	str	r0, [r7, #20]
        break;
 8003f62:	e00f      	b.n	8003f84 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f64:	4b49      	ldr	r3, [pc, #292]	; (800408c <UART_SetConfig+0x4b4>)
 8003f66:	617b      	str	r3, [r7, #20]
        break;
 8003f68:	e00c      	b.n	8003f84 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f6a:	f7ff f8d1 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 8003f6e:	6178      	str	r0, [r7, #20]
        break;
 8003f70:	e008      	b.n	8003f84 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f76:	617b      	str	r3, [r7, #20]
        break;
 8003f78:	e004      	b.n	8003f84 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	76bb      	strb	r3, [r7, #26]
        break;
 8003f82:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d074      	beq.n	8004074 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	005a      	lsls	r2, r3, #1
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	441a      	add	r2, r3
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	2b0f      	cmp	r3, #15
 8003fa6:	d916      	bls.n	8003fd6 <UART_SetConfig+0x3fe>
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fae:	d212      	bcs.n	8003fd6 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	f023 030f 	bic.w	r3, r3, #15
 8003fb8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	89fb      	ldrh	r3, [r7, #14]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	89fa      	ldrh	r2, [r7, #14]
 8003fd2:	60da      	str	r2, [r3, #12]
 8003fd4:	e04e      	b.n	8004074 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	76bb      	strb	r3, [r7, #26]
 8003fda:	e04b      	b.n	8004074 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fdc:	7efb      	ldrb	r3, [r7, #27]
 8003fde:	2b08      	cmp	r3, #8
 8003fe0:	d827      	bhi.n	8004032 <UART_SetConfig+0x45a>
 8003fe2:	a201      	add	r2, pc, #4	; (adr r2, 8003fe8 <UART_SetConfig+0x410>)
 8003fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fe8:	0800400d 	.word	0x0800400d
 8003fec:	08004015 	.word	0x08004015
 8003ff0:	0800401d 	.word	0x0800401d
 8003ff4:	08004033 	.word	0x08004033
 8003ff8:	08004023 	.word	0x08004023
 8003ffc:	08004033 	.word	0x08004033
 8004000:	08004033 	.word	0x08004033
 8004004:	08004033 	.word	0x08004033
 8004008:	0800402b 	.word	0x0800402b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800400c:	f7ff f918 	bl	8003240 <HAL_RCC_GetPCLK1Freq>
 8004010:	6178      	str	r0, [r7, #20]
        break;
 8004012:	e013      	b.n	800403c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004014:	f7ff f92a 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 8004018:	6178      	str	r0, [r7, #20]
        break;
 800401a:	e00f      	b.n	800403c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <UART_SetConfig+0x4b4>)
 800401e:	617b      	str	r3, [r7, #20]
        break;
 8004020:	e00c      	b.n	800403c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004022:	f7ff f875 	bl	8003110 <HAL_RCC_GetSysClockFreq>
 8004026:	6178      	str	r0, [r7, #20]
        break;
 8004028:	e008      	b.n	800403c <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800402a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800402e:	617b      	str	r3, [r7, #20]
        break;
 8004030:	e004      	b.n	800403c <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	76bb      	strb	r3, [r7, #26]
        break;
 800403a:	bf00      	nop
    }

    if (pclk != 0U)
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d018      	beq.n	8004074 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	085a      	lsrs	r2, r3, #1
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	441a      	add	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	fbb2 f3f3 	udiv	r3, r2, r3
 8004054:	b29b      	uxth	r3, r3
 8004056:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	2b0f      	cmp	r3, #15
 800405c:	d908      	bls.n	8004070 <UART_SetConfig+0x498>
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004064:	d204      	bcs.n	8004070 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	60da      	str	r2, [r3, #12]
 800406e:	e001      	b.n	8004074 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2200      	movs	r2, #0
 800407e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004080:	7ebb      	ldrb	r3, [r7, #26]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3720      	adds	r7, #32
 8004086:	46bd      	mov	sp, r7
 8004088:	bdb0      	pop	{r4, r5, r7, pc}
 800408a:	bf00      	nop
 800408c:	00f42400 	.word	0x00f42400

08004090 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00a      	beq.n	80040ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00a      	beq.n	80040dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	430a      	orrs	r2, r1
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	f003 0304 	and.w	r3, r3, #4
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00a      	beq.n	80040fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	430a      	orrs	r2, r1
 80040fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d00a      	beq.n	8004120 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004124:	f003 0310 	and.w	r3, r3, #16
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00a      	beq.n	8004142 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f003 0320 	and.w	r3, r3, #32
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00a      	beq.n	8004164 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	430a      	orrs	r2, r1
 8004162:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01a      	beq.n	80041a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	430a      	orrs	r2, r1
 8004184:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800418e:	d10a      	bne.n	80041a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d00a      	beq.n	80041c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af02      	add	r7, sp, #8
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041e4:	f7fd f842 	bl	800126c <HAL_GetTick>
 80041e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0308 	and.w	r3, r3, #8
 80041f4:	2b08      	cmp	r3, #8
 80041f6:	d10e      	bne.n	8004216 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041fc:	9300      	str	r3, [sp, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f82d 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 800420c:	4603      	mov	r3, r0
 800420e:	2b00      	cmp	r3, #0
 8004210:	d001      	beq.n	8004216 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e023      	b.n	800425e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0304 	and.w	r3, r3, #4
 8004220:	2b04      	cmp	r3, #4
 8004222:	d10e      	bne.n	8004242 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004224:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2200      	movs	r2, #0
 800422e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f817 	bl	8004266 <UART_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800423e:	2303      	movs	r3, #3
 8004240:	e00d      	b.n	800425e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2220      	movs	r2, #32
 8004246:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2220      	movs	r2, #32
 800424c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800425c:	2300      	movs	r3, #0
}
 800425e:	4618      	mov	r0, r3
 8004260:	3710      	adds	r7, #16
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}

08004266 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b084      	sub	sp, #16
 800426a:	af00      	add	r7, sp, #0
 800426c:	60f8      	str	r0, [r7, #12]
 800426e:	60b9      	str	r1, [r7, #8]
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4613      	mov	r3, r2
 8004274:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004276:	e05e      	b.n	8004336 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800427e:	d05a      	beq.n	8004336 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004280:	f7fc fff4 	bl	800126c <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	69ba      	ldr	r2, [r7, #24]
 800428c:	429a      	cmp	r2, r3
 800428e:	d302      	bcc.n	8004296 <UART_WaitOnFlagUntilTimeout+0x30>
 8004290:	69bb      	ldr	r3, [r7, #24]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d11b      	bne.n	80042ce <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042a4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0201 	bic.w	r2, r2, #1
 80042b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2220      	movs	r2, #32
 80042ba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2220      	movs	r2, #32
 80042c0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e043      	b.n	8004356 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02c      	beq.n	8004336 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ea:	d124      	bne.n	8004336 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042f4:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004304:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e00f      	b.n	8004356 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	69da      	ldr	r2, [r3, #28]
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	4013      	ands	r3, r2
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	79fb      	ldrb	r3, [r7, #7]
 8004350:	429a      	cmp	r2, r3
 8004352:	d091      	beq.n	8004278 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3710      	adds	r7, #16
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <__libc_init_array>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	4d0d      	ldr	r5, [pc, #52]	; (8004398 <__libc_init_array+0x38>)
 8004364:	4c0d      	ldr	r4, [pc, #52]	; (800439c <__libc_init_array+0x3c>)
 8004366:	1b64      	subs	r4, r4, r5
 8004368:	10a4      	asrs	r4, r4, #2
 800436a:	2600      	movs	r6, #0
 800436c:	42a6      	cmp	r6, r4
 800436e:	d109      	bne.n	8004384 <__libc_init_array+0x24>
 8004370:	4d0b      	ldr	r5, [pc, #44]	; (80043a0 <__libc_init_array+0x40>)
 8004372:	4c0c      	ldr	r4, [pc, #48]	; (80043a4 <__libc_init_array+0x44>)
 8004374:	f000 f820 	bl	80043b8 <_init>
 8004378:	1b64      	subs	r4, r4, r5
 800437a:	10a4      	asrs	r4, r4, #2
 800437c:	2600      	movs	r6, #0
 800437e:	42a6      	cmp	r6, r4
 8004380:	d105      	bne.n	800438e <__libc_init_array+0x2e>
 8004382:	bd70      	pop	{r4, r5, r6, pc}
 8004384:	f855 3b04 	ldr.w	r3, [r5], #4
 8004388:	4798      	blx	r3
 800438a:	3601      	adds	r6, #1
 800438c:	e7ee      	b.n	800436c <__libc_init_array+0xc>
 800438e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004392:	4798      	blx	r3
 8004394:	3601      	adds	r6, #1
 8004396:	e7f2      	b.n	800437e <__libc_init_array+0x1e>
 8004398:	080044b0 	.word	0x080044b0
 800439c:	080044b0 	.word	0x080044b0
 80043a0:	080044b0 	.word	0x080044b0
 80043a4:	080044b4 	.word	0x080044b4

080043a8 <memset>:
 80043a8:	4402      	add	r2, r0
 80043aa:	4603      	mov	r3, r0
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d100      	bne.n	80043b2 <memset+0xa>
 80043b0:	4770      	bx	lr
 80043b2:	f803 1b01 	strb.w	r1, [r3], #1
 80043b6:	e7f9      	b.n	80043ac <memset+0x4>

080043b8 <_init>:
 80043b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043ba:	bf00      	nop
 80043bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043be:	bc08      	pop	{r3}
 80043c0:	469e      	mov	lr, r3
 80043c2:	4770      	bx	lr

080043c4 <_fini>:
 80043c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043c6:	bf00      	nop
 80043c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043ca:	bc08      	pop	{r3}
 80043cc:	469e      	mov	lr, r3
 80043ce:	4770      	bx	lr
