
CAN_LOOP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035dc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800381c  0800381c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800381c  0800381c  0001381c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003824  08003824  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003824  08003824  00013824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003828  08003828  00013828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800382c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000128  2000000c  08003838  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08003838  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1f4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019de  00000000  00000000  0002b230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002cc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002d600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002155d  00000000  00000000  0002df58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a503  00000000  00000000  0004f4b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cd781  00000000  00000000  000599b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00127139  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002864  00000000  00000000  0012718c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003758 	.word	0x08003758

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08003758 	.word	0x08003758

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <can_fil_config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void can_fil_config()
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
	 fil.FilterIdHigh=0x0000;
 80004d0:	4b17      	ldr	r3, [pc, #92]	; (8000530 <can_fil_config+0x64>)
 80004d2:	2200      	movs	r2, #0
 80004d4:	601a      	str	r2, [r3, #0]
	  	fil.FilterIdLow=0x0000;
 80004d6:	4b16      	ldr	r3, [pc, #88]	; (8000530 <can_fil_config+0x64>)
 80004d8:	2200      	movs	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
	  	fil.FilterMaskIdHigh=0x0000;
 80004dc:	4b14      	ldr	r3, [pc, #80]	; (8000530 <can_fil_config+0x64>)
 80004de:	2200      	movs	r2, #0
 80004e0:	609a      	str	r2, [r3, #8]
	  	fil.FilterMaskIdLow=0x0000;
 80004e2:	4b13      	ldr	r3, [pc, #76]	; (8000530 <can_fil_config+0x64>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	60da      	str	r2, [r3, #12]
	  	fil.FilterFIFOAssignment=0;
 80004e8:	4b11      	ldr	r3, [pc, #68]	; (8000530 <can_fil_config+0x64>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	611a      	str	r2, [r3, #16]
	  	fil.FilterBank=0;
 80004ee:	4b10      	ldr	r3, [pc, #64]	; (8000530 <can_fil_config+0x64>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	615a      	str	r2, [r3, #20]
	  	fil.FilterMode=CAN_FILTERMODE_IDMASK;
 80004f4:	4b0e      	ldr	r3, [pc, #56]	; (8000530 <can_fil_config+0x64>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
	  	fil.FilterScale=CAN_FILTERSCALE_32BIT;
 80004fa:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <can_fil_config+0x64>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	61da      	str	r2, [r3, #28]
	  	fil.FilterActivation=CAN_FILTER_ENABLE;
 8000500:	4b0b      	ldr	r3, [pc, #44]	; (8000530 <can_fil_config+0x64>)
 8000502:	2201      	movs	r2, #1
 8000504:	621a      	str	r2, [r3, #32]
	  	fil.SlaveStartFilterBank=0;
 8000506:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <can_fil_config+0x64>)
 8000508:	2200      	movs	r2, #0
 800050a:	625a      	str	r2, [r3, #36]	; 0x24

	  	if (HAL_CAN_ConfigFilter(&hcan1, &fil) != HAL_OK)
 800050c:	4908      	ldr	r1, [pc, #32]	; (8000530 <can_fil_config+0x64>)
 800050e:	4809      	ldr	r0, [pc, #36]	; (8000534 <can_fil_config+0x68>)
 8000510:	f000 fccd 	bl	8000eae <HAL_CAN_ConfigFilter>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d008      	beq.n	800052c <can_fil_config+0x60>
	  		    {
	  		        /* Filter configuration Error */
	  		        HAL_UART_Transmit(&huart3,"error in configfil\n\r", 20, 1000);
 800051a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800051e:	2214      	movs	r2, #20
 8000520:	4905      	ldr	r1, [pc, #20]	; (8000538 <can_fil_config+0x6c>)
 8000522:	4806      	ldr	r0, [pc, #24]	; (800053c <can_fil_config+0x70>)
 8000524:	f002 fc94 	bl	8002e50 <HAL_UART_Transmit>
	  		        Error_Handler();
 8000528:	f000 fa12 	bl	8000950 <Error_Handler>
	  		    }

}
 800052c:	bf00      	nop
 800052e:	bd80      	pop	{r7, pc}
 8000530:	200000f0 	.word	0x200000f0
 8000534:	200000c8 	.word	0x200000c8
 8000538:	08003770 	.word	0x08003770
 800053c:	20000028 	.word	0x20000028

08000540 <can_tx>:
void can_tx()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b084      	sub	sp, #16
 8000544:	af00      	add	r7, sp, #0



	uint8_t message[5]="SHALU";
 8000546:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <can_tx+0x44>)
 8000548:	f107 0308 	add.w	r3, r7, #8
 800054c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000550:	6018      	str	r0, [r3, #0]
 8000552:	3304      	adds	r3, #4
 8000554:	7019      	strb	r1, [r3, #0]
	uint32_t mailbox;
	txhead.StdId=0xFF;
 8000556:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <can_tx+0x48>)
 8000558:	22ff      	movs	r2, #255	; 0xff
 800055a:	601a      	str	r2, [r3, #0]
	txhead.IDE=CAN_ID_STD;
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <can_tx+0x48>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
	txhead.RTR=CAN_RTR_DATA;
 8000562:	4b09      	ldr	r3, [pc, #36]	; (8000588 <can_tx+0x48>)
 8000564:	2200      	movs	r2, #0
 8000566:	60da      	str	r2, [r3, #12]
	txhead.DLC=5;
 8000568:	4b07      	ldr	r3, [pc, #28]	; (8000588 <can_tx+0x48>)
 800056a:	2205      	movs	r2, #5
 800056c:	611a      	str	r2, [r3, #16]


	 HAL_CAN_AddTxMessage(&hcan1,&txhead, message, &mailbox);
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	f107 0208 	add.w	r2, r7, #8
 8000574:	4904      	ldr	r1, [pc, #16]	; (8000588 <can_tx+0x48>)
 8000576:	4805      	ldr	r0, [pc, #20]	; (800058c <can_tx+0x4c>)
 8000578:	f000 fda7 	bl	80010ca <HAL_CAN_AddTxMessage>


}
 800057c:	bf00      	nop
 800057e:	3710      	adds	r7, #16
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	08003788 	.word	0x08003788
 8000588:	20000118 	.word	0x20000118
 800058c:	200000c8 	.word	0x200000c8

08000590 <can_rx>:
void can_rx()
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b084      	sub	sp, #16
 8000594:	af00      	add	r7, sp, #0
	uint8_t arr[10]={0};
 8000596:	2300      	movs	r3, #0
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	f107 0308 	add.w	r3, r7, #8
 800059e:	2200      	movs	r2, #0
 80005a0:	601a      	str	r2, [r3, #0]
 80005a2:	809a      	strh	r2, [r3, #4]

	while(!(HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0)));
 80005a4:	bf00      	nop
 80005a6:	2100      	movs	r1, #0
 80005a8:	4814      	ldr	r0, [pc, #80]	; (80005fc <can_rx+0x6c>)
 80005aa:	f000 ff7b 	bl	80014a4 <HAL_CAN_GetRxFifoFillLevel>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d0f8      	beq.n	80005a6 <can_rx+0x16>
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0,&rxhead, arr) != HAL_OK)
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4a12      	ldr	r2, [pc, #72]	; (8000600 <can_rx+0x70>)
 80005b8:	2100      	movs	r1, #0
 80005ba:	4810      	ldr	r0, [pc, #64]	; (80005fc <can_rx+0x6c>)
 80005bc:	f000 fe60 	bl	8001280 <HAL_CAN_GetRxMessage>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d00f      	beq.n	80005e6 <can_rx+0x56>
      {

    	HAL_UART_Transmit(&huart3,"error in reception\n\r", 20, 1000);
 80005c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ca:	2214      	movs	r2, #20
 80005cc:	490d      	ldr	r1, [pc, #52]	; (8000604 <can_rx+0x74>)
 80005ce:	480e      	ldr	r0, [pc, #56]	; (8000608 <can_rx+0x78>)
 80005d0:	f002 fc3e 	bl	8002e50 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart3,arr,10 ,1000);
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005da:	220a      	movs	r2, #10
 80005dc:	480a      	ldr	r0, [pc, #40]	; (8000608 <can_rx+0x78>)
 80005de:	f002 fc37 	bl	8002e50 <HAL_UART_Transmit>
    	Error_Handler();
 80005e2:	f000 f9b5 	bl	8000950 <Error_Handler>
      }

   HAL_UART_Transmit(&huart3,arr,10, 1000);
 80005e6:	1d39      	adds	r1, r7, #4
 80005e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ec:	220a      	movs	r2, #10
 80005ee:	4806      	ldr	r0, [pc, #24]	; (8000608 <can_rx+0x78>)
 80005f0:	f002 fc2e 	bl	8002e50 <HAL_UART_Transmit>

}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	200000c8 	.word	0x200000c8
 8000600:	200000ac 	.word	0x200000ac
 8000604:	08003790 	.word	0x08003790
 8000608:	20000028 	.word	0x20000028

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 fad6 	bl	8000bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f834 	bl	8000680 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 f90a 	bl	8000830 <MX_GPIO_Init>
  MX_CAN1_Init();
 800061c:	f000 f89c 	bl	8000758 <MX_CAN1_Init>
  MX_USART3_UART_Init();
 8000620:	f000 f8d2 	bl	80007c8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  can_fil_config();
 8000624:	f7ff ff52 	bl	80004cc <can_fil_config>
  if(HAL_CAN_Start(&hcan1)!=HAL_OK)
 8000628:	4810      	ldr	r0, [pc, #64]	; (800066c <main+0x60>)
 800062a:	f000 fd0a 	bl	8001042 <HAL_CAN_Start>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d008      	beq.n	8000646 <main+0x3a>
  {
	  HAL_UART_Transmit(&huart3,"error in can_start\n\r", 20, 1000);
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	2214      	movs	r2, #20
 800063a:	490d      	ldr	r1, [pc, #52]	; (8000670 <main+0x64>)
 800063c:	480d      	ldr	r0, [pc, #52]	; (8000674 <main+0x68>)
 800063e:	f002 fc07 	bl	8002e50 <HAL_UART_Transmit>
	  Error_Handler();
 8000642:	f000 f985 	bl	8000950 <Error_Handler>

  }
  HAL_UART_Transmit(&huart3,"can in loop_back\n\r", 20, 1000);
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	2214      	movs	r2, #20
 800064c:	490a      	ldr	r1, [pc, #40]	; (8000678 <main+0x6c>)
 800064e:	4809      	ldr	r0, [pc, #36]	; (8000674 <main+0x68>)
 8000650:	f002 fbfe 	bl	8002e50 <HAL_UART_Transmit>
HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,0);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800065a:	4808      	ldr	r0, [pc, #32]	; (800067c <main+0x70>)
 800065c:	f001 f9aa 	bl	80019b4 <HAL_GPIO_WritePin>
can_tx();
 8000660:	f7ff ff6e 	bl	8000540 <can_tx>
can_rx();
 8000664:	f7ff ff94 	bl	8000590 <can_rx>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000668:	e7fe      	b.n	8000668 <main+0x5c>
 800066a:	bf00      	nop
 800066c:	200000c8 	.word	0x200000c8
 8000670:	080037a8 	.word	0x080037a8
 8000674:	20000028 	.word	0x20000028
 8000678:	080037c0 	.word	0x080037c0
 800067c:	48000400 	.word	0x48000400

08000680 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b0b0      	sub	sp, #192	; 0xc0
 8000684:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000686:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800068a:	2244      	movs	r2, #68	; 0x44
 800068c:	2100      	movs	r1, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f003 f85a 	bl	8003748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000694:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006a4:	463b      	mov	r3, r7
 80006a6:	2268      	movs	r2, #104	; 0x68
 80006a8:	2100      	movs	r1, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f003 f84c 	bl	8003748 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006b0:	2301      	movs	r3, #1
 80006b2:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c2:	2303      	movs	r3, #3
 80006c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c8:	2301      	movs	r3, #1
 80006ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLN = 20;
 80006ce:	2314      	movs	r3, #20
 80006d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d4:	2307      	movs	r3, #7
 80006d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 f9de 	bl	8001aac <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80006f6:	f000 f92b 	bl	8000950 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2303      	movs	r3, #3
 8000700:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000706:	2300      	movs	r3, #0
 8000708:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800070e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000712:	2104      	movs	r1, #4
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fde9 	bl	80022ec <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000720:	f000 f916 	bl	8000950 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000724:	2304      	movs	r3, #4
 8000726:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4618      	mov	r0, r3
 8000730:	f001 ffe2 	bl	80026f8 <HAL_RCCEx_PeriphCLKConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800073a:	f000 f909 	bl	8000950 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800073e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000742:	f001 f95d 	bl	8001a00 <HAL_PWREx_ControlVoltageScaling>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800074c:	f000 f900 	bl	8000950 <Error_Handler>
  }
}
 8000750:	bf00      	nop
 8000752:	37c0      	adds	r7, #192	; 0xc0
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800075c:	4b18      	ldr	r3, [pc, #96]	; (80007c0 <MX_CAN1_Init+0x68>)
 800075e:	4a19      	ldr	r2, [pc, #100]	; (80007c4 <MX_CAN1_Init+0x6c>)
 8000760:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 8000762:	4b17      	ldr	r3, [pc, #92]	; (80007c0 <MX_CAN1_Init+0x68>)
 8000764:	220a      	movs	r2, #10
 8000766:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_LOOPBACK;
 8000768:	4b15      	ldr	r3, [pc, #84]	; (80007c0 <MX_CAN1_Init+0x68>)
 800076a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800076e:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000770:	4b13      	ldr	r3, [pc, #76]	; (80007c0 <MX_CAN1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <MX_CAN1_Init+0x68>)
 8000778:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 800077c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800077e:	4b10      	ldr	r3, [pc, #64]	; (80007c0 <MX_CAN1_Init+0x68>)
 8000780:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000784:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000786:	4b0e      	ldr	r3, [pc, #56]	; (80007c0 <MX_CAN1_Init+0x68>)
 8000788:	2200      	movs	r2, #0
 800078a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_CAN1_Init+0x68>)
 800078e:	2200      	movs	r2, #0
 8000790:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <MX_CAN1_Init+0x68>)
 8000794:	2200      	movs	r2, #0
 8000796:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_CAN1_Init+0x68>)
 800079a:	2200      	movs	r2, #0
 800079c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <MX_CAN1_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80007a4:	4b06      	ldr	r3, [pc, #24]	; (80007c0 <MX_CAN1_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80007aa:	4805      	ldr	r0, [pc, #20]	; (80007c0 <MX_CAN1_Init+0x68>)
 80007ac:	f000 fa84 	bl	8000cb8 <HAL_CAN_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80007b6:	f000 f8cb 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	200000c8 	.word	0x200000c8
 80007c4:	40006400 	.word	0x40006400

080007c8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007cc:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <MX_USART3_UART_Init+0x64>)
 80007d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007d2:	4b15      	ldr	r3, [pc, #84]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007dc:	2200      	movs	r2, #0
 80007de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007e0:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007e6:	4b10      	ldr	r3, [pc, #64]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007ec:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007ee:	220c      	movs	r2, #12
 80007f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007f2:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007f8:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <MX_USART3_UART_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007fe:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_USART3_UART_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <MX_USART3_UART_Init+0x60>)
 8000806:	2208      	movs	r2, #8
 8000808:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800080a:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_USART3_UART_Init+0x60>)
 800080c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000810:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000812:	4805      	ldr	r0, [pc, #20]	; (8000828 <MX_USART3_UART_Init+0x60>)
 8000814:	f002 face 	bl	8002db4 <HAL_UART_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 800081e:	f000 f897 	bl	8000950 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000822:	bf00      	nop
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000028 	.word	0x20000028
 800082c:	40004800 	.word	0x40004800

08000830 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08a      	sub	sp, #40	; 0x28
 8000834:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 0314 	add.w	r3, r7, #20
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4b3e      	ldr	r3, [pc, #248]	; (8000940 <MX_GPIO_Init+0x110>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a3d      	ldr	r2, [pc, #244]	; (8000940 <MX_GPIO_Init+0x110>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b3b      	ldr	r3, [pc, #236]	; (8000940 <MX_GPIO_Init+0x110>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	613b      	str	r3, [r7, #16]
 800085c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800085e:	4b38      	ldr	r3, [pc, #224]	; (8000940 <MX_GPIO_Init+0x110>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	4a37      	ldr	r2, [pc, #220]	; (8000940 <MX_GPIO_Init+0x110>)
 8000864:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000868:	64d3      	str	r3, [r2, #76]	; 0x4c
 800086a:	4b35      	ldr	r3, [pc, #212]	; (8000940 <MX_GPIO_Init+0x110>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000872:	60fb      	str	r3, [r7, #12]
 8000874:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000876:	4b32      	ldr	r3, [pc, #200]	; (8000940 <MX_GPIO_Init+0x110>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	4a31      	ldr	r2, [pc, #196]	; (8000940 <MX_GPIO_Init+0x110>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000882:	4b2f      	ldr	r3, [pc, #188]	; (8000940 <MX_GPIO_Init+0x110>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	4b2c      	ldr	r3, [pc, #176]	; (8000940 <MX_GPIO_Init+0x110>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000892:	4a2b      	ldr	r2, [pc, #172]	; (8000940 <MX_GPIO_Init+0x110>)
 8000894:	f043 0302 	orr.w	r3, r3, #2
 8000898:	64d3      	str	r3, [r2, #76]	; 0x4c
 800089a:	4b29      	ldr	r3, [pc, #164]	; (8000940 <MX_GPIO_Init+0x110>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089e:	f003 0302 	and.w	r3, r3, #2
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2120      	movs	r1, #32
 80008aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ae:	f001 f881 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 80008b2:	2200      	movs	r2, #0
 80008b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008b8:	4822      	ldr	r0, [pc, #136]	; (8000944 <MX_GPIO_Init+0x114>)
 80008ba:	f001 f87b 	bl	80019b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008c4:	4b20      	ldr	r3, [pc, #128]	; (8000948 <MX_GPIO_Init+0x118>)
 80008c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 0314 	add.w	r3, r7, #20
 80008d0:	4619      	mov	r1, r3
 80008d2:	481e      	ldr	r0, [pc, #120]	; (800094c <MX_GPIO_Init+0x11c>)
 80008d4:	f000 fef4 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d8:	230c      	movs	r3, #12
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008e8:	2307      	movs	r3, #7
 80008ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f6:	f000 fee3 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80008fa:	2320      	movs	r3, #32
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000914:	f000 fed4 	bl	80016c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000918:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2300      	movs	r3, #0
 8000928:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800092a:	f107 0314 	add.w	r3, r7, #20
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0x114>)
 8000932:	f000 fec5 	bl	80016c0 <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3728      	adds	r7, #40	; 0x28
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400
 8000948:	10210000 	.word	0x10210000
 800094c:	48000800 	.word	0x48000800

08000950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000954:	b672      	cpsid	i
}
 8000956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000958:	e7fe      	b.n	8000958 <Error_Handler+0x8>
	...

0800095c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <HAL_MspInit+0x44>)
 8000964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000966:	4a0e      	ldr	r2, [pc, #56]	; (80009a0 <HAL_MspInit+0x44>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	6613      	str	r3, [r2, #96]	; 0x60
 800096e:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <HAL_MspInit+0x44>)
 8000970:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_MspInit+0x44>)
 800097c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097e:	4a08      	ldr	r2, [pc, #32]	; (80009a0 <HAL_MspInit+0x44>)
 8000980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000984:	6593      	str	r3, [r2, #88]	; 0x58
 8000986:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_MspInit+0x44>)
 8000988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098e:	603b      	str	r3, [r7, #0]
 8000990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000

080009a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 0314 	add.w	r3, r7, #20
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_CAN_MspInit+0x7c>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d128      	bne.n	8000a18 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <HAL_CAN_MspInit+0x80>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a16      	ldr	r2, [pc, #88]	; (8000a24 <HAL_CAN_MspInit+0x80>)
 80009cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <HAL_CAN_MspInit+0x80>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009de:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <HAL_CAN_MspInit+0x80>)
 80009e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e2:	4a10      	ldr	r2, [pc, #64]	; (8000a24 <HAL_CAN_MspInit+0x80>)
 80009e4:	f043 0302 	orr.w	r3, r3, #2
 80009e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <HAL_CAN_MspInit+0x80>)
 80009ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ee:	f003 0302 	and.w	r3, r3, #2
 80009f2:	60fb      	str	r3, [r7, #12]
 80009f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB12     ------> CAN1_RX
    PB13     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80009f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80009fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_CAN1;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0314 	add.w	r3, r7, #20
 8000a10:	4619      	mov	r1, r3
 8000a12:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_CAN_MspInit+0x84>)
 8000a14:	f000 fe54 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000a18:	bf00      	nop
 8000a1a:	3728      	adds	r7, #40	; 0x28
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	40006400 	.word	0x40006400
 8000a24:	40021000 	.word	0x40021000
 8000a28:	48000400 	.word	0x48000400

08000a2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b08a      	sub	sp, #40	; 0x28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a17      	ldr	r2, [pc, #92]	; (8000aa8 <HAL_UART_MspInit+0x7c>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d127      	bne.n	8000a9e <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <HAL_UART_MspInit+0x80>)
 8000a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a52:	4a16      	ldr	r2, [pc, #88]	; (8000aac <HAL_UART_MspInit+0x80>)
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5a:	4b14      	ldr	r3, [pc, #80]	; (8000aac <HAL_UART_MspInit+0x80>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a66:	4b11      	ldr	r3, [pc, #68]	; (8000aac <HAL_UART_MspInit+0x80>)
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	4a10      	ldr	r2, [pc, #64]	; (8000aac <HAL_UART_MspInit+0x80>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a72:	4b0e      	ldr	r3, [pc, #56]	; (8000aac <HAL_UART_MspInit+0x80>)
 8000a74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	60fb      	str	r3, [r7, #12]
 8000a7c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC4     ------> USART3_TX
    PC5     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a7e:	2330      	movs	r3, #48	; 0x30
 8000a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8a:	2303      	movs	r3, #3
 8000a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a8e:	2307      	movs	r3, #7
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <HAL_UART_MspInit+0x84>)
 8000a9a:	f000 fe11 	bl	80016c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40004800 	.word	0x40004800
 8000aac:	40021000 	.word	0x40021000
 8000ab0:	48000800 	.word	0x48000800

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b00:	f000 f8ba 	bl	8000c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b0c:	4b15      	ldr	r3, [pc, #84]	; (8000b64 <SystemInit+0x5c>)
 8000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b12:	4a14      	ldr	r2, [pc, #80]	; (8000b64 <SystemInit+0x5c>)
 8000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <SystemInit+0x60>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a11      	ldr	r2, [pc, #68]	; (8000b68 <SystemInit+0x60>)
 8000b22:	f043 0301 	orr.w	r3, r3, #1
 8000b26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <SystemInit+0x60>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <SystemInit+0x60>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <SystemInit+0x60>)
 8000b34:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000b38:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000b3c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <SystemInit+0x60>)
 8000b40:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b44:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b46:	4b08      	ldr	r3, [pc, #32]	; (8000b68 <SystemInit+0x60>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	4a07      	ldr	r2, [pc, #28]	; (8000b68 <SystemInit+0x60>)
 8000b4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b50:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SystemInit+0x60>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	40021000 	.word	0x40021000

08000b6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ba4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b70:	f7ff ffca 	bl	8000b08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000b74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000b76:	e003      	b.n	8000b80 <LoopCopyDataInit>

08000b78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000b7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000b7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000b7e:	3104      	adds	r1, #4

08000b80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000b80:	480a      	ldr	r0, [pc, #40]	; (8000bac <LoopForever+0xa>)
	ldr	r3, =_edata
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000b84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000b86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b88:	d3f6      	bcc.n	8000b78 <CopyDataInit>
	ldr	r2, =_sbss
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b8c:	e002      	b.n	8000b94 <LoopFillZerobss>

08000b8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b90:	f842 3b04 	str.w	r3, [r2], #4

08000b94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <LoopForever+0x16>)
	cmp	r2, r3
 8000b96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b98:	d3f9      	bcc.n	8000b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b9a:	f002 fdb1 	bl	8003700 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b9e:	f7ff fd35 	bl	800060c <main>

08000ba2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ba2:	e7fe      	b.n	8000ba2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ba4:	20028000 	.word	0x20028000
	ldr	r3, =_sidata
 8000ba8:	0800382c 	.word	0x0800382c
	ldr	r0, =_sdata
 8000bac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000bb0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000bb4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000bb8:	20000134 	.word	0x20000134

08000bbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bbc:	e7fe      	b.n	8000bbc <ADC1_IRQHandler>
	...

08000bc0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bca:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <HAL_Init+0x3c>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a0b      	ldr	r2, [pc, #44]	; (8000bfc <HAL_Init+0x3c>)
 8000bd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd6:	2003      	movs	r0, #3
 8000bd8:	f000 fd3e 	bl	8001658 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bdc:	2000      	movs	r0, #0
 8000bde:	f000 f80f 	bl	8000c00 <HAL_InitTick>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d002      	beq.n	8000bee <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	e001      	b.n	8000bf2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bee:	f7ff feb5 	bl	800095c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d023      	beq.n	8000c5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <HAL_InitTick+0x70>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <HAL_InitTick+0x6c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f000 fd3b 	bl	80016a6 <HAL_SYSTICK_Config>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d10f      	bne.n	8000c56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d809      	bhi.n	8000c50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 fd13 	bl	800166e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c48:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <HAL_InitTick+0x74>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	e007      	b.n	8000c60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c50:	2301      	movs	r3, #1
 8000c52:	73fb      	strb	r3, [r7, #15]
 8000c54:	e004      	b.n	8000c60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	73fb      	strb	r3, [r7, #15]
 8000c5a:	e001      	b.n	8000c60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	3710      	adds	r7, #16
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000000 	.word	0x20000000
 8000c74:	20000004 	.word	0x20000004

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000130 	.word	0x20000130

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000130 	.word	0x20000130

08000cb8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d101      	bne.n	8000cca <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	e0ed      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d102      	bne.n	8000cdc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff fe64 	bl	80009a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f022 0202 	bic.w	r2, r2, #2
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cec:	f7ff ffd8 	bl	8000ca0 <HAL_GetTick>
 8000cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000cf2:	e012      	b.n	8000d1a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cf4:	f7ff ffd4 	bl	8000ca0 <HAL_GetTick>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b0a      	cmp	r3, #10
 8000d00:	d90b      	bls.n	8000d1a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2205      	movs	r2, #5
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d16:	2301      	movs	r3, #1
 8000d18:	e0c5      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d1e5      	bne.n	8000cf4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f042 0201 	orr.w	r2, r2, #1
 8000d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d38:	f7ff ffb2 	bl	8000ca0 <HAL_GetTick>
 8000d3c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d3e:	e012      	b.n	8000d66 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d40:	f7ff ffae 	bl	8000ca0 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d90b      	bls.n	8000d66 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e09f      	b.n	8000ea6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d0e5      	beq.n	8000d40 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	7e1b      	ldrb	r3, [r3, #24]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d108      	bne.n	8000d8e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7e5b      	ldrb	r3, [r3, #25]
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d108      	bne.n	8000db8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	e007      	b.n	8000dc8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	7e9b      	ldrb	r3, [r3, #26]
 8000dcc:	2b01      	cmp	r3, #1
 8000dce:	d108      	bne.n	8000de2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f042 0220 	orr.w	r2, r2, #32
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	e007      	b.n	8000df2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f022 0220 	bic.w	r2, r2, #32
 8000df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	7edb      	ldrb	r3, [r3, #27]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d108      	bne.n	8000e0c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681a      	ldr	r2, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f022 0210 	bic.w	r2, r2, #16
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	e007      	b.n	8000e1c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f042 0210 	orr.w	r2, r2, #16
 8000e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7f1b      	ldrb	r3, [r3, #28]
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d108      	bne.n	8000e36 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	681a      	ldr	r2, [r3, #0]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f042 0208 	orr.w	r2, r2, #8
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	e007      	b.n	8000e46 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f022 0208 	bic.w	r2, r2, #8
 8000e44:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	7f5b      	ldrb	r3, [r3, #29]
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d108      	bne.n	8000e60 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f042 0204 	orr.w	r2, r2, #4
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	e007      	b.n	8000e70 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681a      	ldr	r2, [r3, #0]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f022 0204 	bic.w	r2, r2, #4
 8000e6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	431a      	orrs	r2, r3
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	431a      	orrs	r2, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	695b      	ldr	r3, [r3, #20]
 8000e84:	ea42 0103 	orr.w	r1, r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	1e5a      	subs	r2, r3, #1
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	430a      	orrs	r2, r1
 8000e94:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ea4:	2300      	movs	r3, #0
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b087      	sub	sp, #28
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
 8000eb6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000ec4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000ec6:	7cfb      	ldrb	r3, [r7, #19]
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d003      	beq.n	8000ed4 <HAL_CAN_ConfigFilter+0x26>
 8000ecc:	7cfb      	ldrb	r3, [r7, #19]
 8000ece:	2b02      	cmp	r3, #2
 8000ed0:	f040 80aa 	bne.w	8001028 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000eda:	f043 0201 	orr.w	r2, r3, #1
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	f003 031f 	and.w	r3, r3, #31
 8000eec:	2201      	movs	r2, #1
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	43db      	mvns	r3, r3
 8000efe:	401a      	ands	r2, r3
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d123      	bne.n	8000f56 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43db      	mvns	r3, r3
 8000f18:	401a      	ands	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f2c:	683a      	ldr	r2, [r7, #0]
 8000f2e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f30:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	3248      	adds	r2, #72	; 0x48
 8000f36:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f4a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f4c:	6979      	ldr	r1, [r7, #20]
 8000f4e:	3348      	adds	r3, #72	; 0x48
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	440b      	add	r3, r1
 8000f54:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	69db      	ldr	r3, [r3, #28]
 8000f5a:	2b01      	cmp	r3, #1
 8000f5c:	d122      	bne.n	8000fa4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	431a      	orrs	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f7e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	3248      	adds	r2, #72	; 0x48
 8000f84:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	68db      	ldr	r3, [r3, #12]
 8000f92:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f98:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f9a:	6979      	ldr	r1, [r7, #20]
 8000f9c:	3348      	adds	r3, #72	; 0x48
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	440b      	add	r3, r1
 8000fa2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d109      	bne.n	8000fc0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43db      	mvns	r3, r3
 8000fb6:	401a      	ands	r2, r3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000fbe:	e007      	b.n	8000fd0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	431a      	orrs	r2, r3
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	691b      	ldr	r3, [r3, #16]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d109      	bne.n	8000fec <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	401a      	ands	r2, r3
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000fea:	e007      	b.n	8000ffc <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d107      	bne.n	8001014 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	431a      	orrs	r2, r3
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800101a:	f023 0201 	bic.w	r2, r3, #1
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001024:	2300      	movs	r3, #0
 8001026:	e006      	b.n	8001036 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001034:	2301      	movs	r3, #1
  }
}
 8001036:	4618      	mov	r0, r3
 8001038:	371c      	adds	r7, #28
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr

08001042 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001050:	b2db      	uxtb	r3, r3
 8001052:	2b01      	cmp	r3, #1
 8001054:	d12e      	bne.n	80010b4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2202      	movs	r2, #2
 800105a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f022 0201 	bic.w	r2, r2, #1
 800106c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800106e:	f7ff fe17 	bl	8000ca0 <HAL_GetTick>
 8001072:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001074:	e012      	b.n	800109c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001076:	f7ff fe13 	bl	8000ca0 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	2b0a      	cmp	r3, #10
 8001082:	d90b      	bls.n	800109c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2205      	movs	r2, #5
 8001094:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	e012      	b.n	80010c2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1e5      	bne.n	8001076 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2200      	movs	r2, #0
 80010ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	e006      	b.n	80010c2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010b8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
  }
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3710      	adds	r7, #16
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b089      	sub	sp, #36	; 0x24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010de:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80010e8:	7ffb      	ldrb	r3, [r7, #31]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d003      	beq.n	80010f6 <HAL_CAN_AddTxMessage+0x2c>
 80010ee:	7ffb      	ldrb	r3, [r7, #31]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	f040 80b8 	bne.w	8001266 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80010f6:	69bb      	ldr	r3, [r7, #24]
 80010f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10a      	bne.n	8001116 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001106:	2b00      	cmp	r3, #0
 8001108:	d105      	bne.n	8001116 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 80a0 	beq.w	8001256 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001116:	69bb      	ldr	r3, [r7, #24]
 8001118:	0e1b      	lsrs	r3, r3, #24
 800111a:	f003 0303 	and.w	r3, r3, #3
 800111e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b02      	cmp	r3, #2
 8001124:	d907      	bls.n	8001136 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e09e      	b.n	8001274 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001136:	2201      	movs	r2, #1
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d10d      	bne.n	8001164 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001152:	68f9      	ldr	r1, [r7, #12]
 8001154:	6809      	ldr	r1, [r1, #0]
 8001156:	431a      	orrs	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	3318      	adds	r3, #24
 800115c:	011b      	lsls	r3, r3, #4
 800115e:	440b      	add	r3, r1
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	e00f      	b.n	8001184 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800116e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001174:	68f9      	ldr	r1, [r7, #12]
 8001176:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001178:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	3318      	adds	r3, #24
 800117e:	011b      	lsls	r3, r3, #4
 8001180:	440b      	add	r3, r1
 8001182:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6819      	ldr	r1, [r3, #0]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	691a      	ldr	r2, [r3, #16]
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	3318      	adds	r3, #24
 8001190:	011b      	lsls	r3, r3, #4
 8001192:	440b      	add	r3, r1
 8001194:	3304      	adds	r3, #4
 8001196:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	7d1b      	ldrb	r3, [r3, #20]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d111      	bne.n	80011c4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	3318      	adds	r3, #24
 80011a8:	011b      	lsls	r3, r3, #4
 80011aa:	4413      	add	r3, r2
 80011ac:	3304      	adds	r3, #4
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	6811      	ldr	r1, [r2, #0]
 80011b4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	3318      	adds	r3, #24
 80011bc:	011b      	lsls	r3, r3, #4
 80011be:	440b      	add	r3, r1
 80011c0:	3304      	adds	r3, #4
 80011c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3307      	adds	r3, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	061a      	lsls	r2, r3, #24
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	3306      	adds	r3, #6
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	041b      	lsls	r3, r3, #16
 80011d4:	431a      	orrs	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	3305      	adds	r3, #5
 80011da:	781b      	ldrb	r3, [r3, #0]
 80011dc:	021b      	lsls	r3, r3, #8
 80011de:	4313      	orrs	r3, r2
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	3204      	adds	r2, #4
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	4610      	mov	r0, r2
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	6811      	ldr	r1, [r2, #0]
 80011ec:	ea43 0200 	orr.w	r2, r3, r0
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	011b      	lsls	r3, r3, #4
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80011fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3303      	adds	r3, #3
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	061a      	lsls	r2, r3, #24
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3302      	adds	r3, #2
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	041b      	lsls	r3, r3, #16
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	021b      	lsls	r3, r3, #8
 8001216:	4313      	orrs	r3, r2
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	7812      	ldrb	r2, [r2, #0]
 800121c:	4610      	mov	r0, r2
 800121e:	68fa      	ldr	r2, [r7, #12]
 8001220:	6811      	ldr	r1, [r2, #0]
 8001222:	ea43 0200 	orr.w	r2, r3, r0
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	011b      	lsls	r3, r3, #4
 800122a:	440b      	add	r3, r1
 800122c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001230:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	3318      	adds	r3, #24
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	68fa      	ldr	r2, [r7, #12]
 8001242:	6811      	ldr	r1, [r2, #0]
 8001244:	f043 0201 	orr.w	r2, r3, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	3318      	adds	r3, #24
 800124c:	011b      	lsls	r3, r3, #4
 800124e:	440b      	add	r3, r1
 8001250:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001252:	2300      	movs	r3, #0
 8001254:	e00e      	b.n	8001274 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800125a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e006      	b.n	8001274 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
  }
}
 8001274:	4618      	mov	r0, r3
 8001276:	3724      	adds	r7, #36	; 0x24
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr

08001280 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001280:	b480      	push	{r7}
 8001282:	b087      	sub	sp, #28
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001294:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001296:	7dfb      	ldrb	r3, [r7, #23]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d003      	beq.n	80012a4 <HAL_CAN_GetRxMessage+0x24>
 800129c:	7dfb      	ldrb	r3, [r7, #23]
 800129e:	2b02      	cmp	r3, #2
 80012a0:	f040 80f3 	bne.w	800148a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10e      	bne.n	80012c8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	f003 0303 	and.w	r3, r3, #3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d116      	bne.n	80012e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e0e7      	b.n	8001498 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	691b      	ldr	r3, [r3, #16]
 80012ce:	f003 0303 	and.w	r3, r3, #3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d107      	bne.n	80012e6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0d8      	b.n	8001498 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	331b      	adds	r3, #27
 80012ee:	011b      	lsls	r3, r3, #4
 80012f0:	4413      	add	r3, r2
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 0204 	and.w	r2, r3, #4
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10c      	bne.n	800131e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	331b      	adds	r3, #27
 800130c:	011b      	lsls	r3, r3, #4
 800130e:	4413      	add	r3, r2
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	0d5b      	lsrs	r3, r3, #21
 8001314:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	e00b      	b.n	8001336 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	331b      	adds	r3, #27
 8001326:	011b      	lsls	r3, r3, #4
 8001328:	4413      	add	r3, r2
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	08db      	lsrs	r3, r3, #3
 800132e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	331b      	adds	r3, #27
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	4413      	add	r3, r2
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f003 0202 	and.w	r2, r3, #2
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681a      	ldr	r2, [r3, #0]
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	331b      	adds	r3, #27
 8001354:	011b      	lsls	r3, r3, #4
 8001356:	4413      	add	r3, r2
 8001358:	3304      	adds	r3, #4
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 020f 	and.w	r2, r3, #15
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	331b      	adds	r3, #27
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	4413      	add	r3, r2
 8001370:	3304      	adds	r3, #4
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0a1b      	lsrs	r3, r3, #8
 8001376:	b2da      	uxtb	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	331b      	adds	r3, #27
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	3304      	adds	r3, #4
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	0c1b      	lsrs	r3, r3, #16
 800138e:	b29a      	uxth	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	4413      	add	r3, r2
 800139e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	b2da      	uxtb	r2, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	4413      	add	r3, r2
 80013b4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	0a1a      	lsrs	r2, r3, #8
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	3301      	adds	r3, #1
 80013c0:	b2d2      	uxtb	r2, r2
 80013c2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	011b      	lsls	r3, r3, #4
 80013cc:	4413      	add	r3, r2
 80013ce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	0c1a      	lsrs	r2, r3, #16
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	3302      	adds	r3, #2
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	011b      	lsls	r3, r3, #4
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	0e1a      	lsrs	r2, r3, #24
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3303      	adds	r3, #3
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	011b      	lsls	r3, r3, #4
 8001400:	4413      	add	r3, r2
 8001402:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	3304      	adds	r3, #4
 800140c:	b2d2      	uxtb	r2, r2
 800140e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	011b      	lsls	r3, r3, #4
 8001418:	4413      	add	r3, r2
 800141a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	0a1a      	lsrs	r2, r3, #8
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	3305      	adds	r3, #5
 8001426:	b2d2      	uxtb	r2, r2
 8001428:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681a      	ldr	r2, [r3, #0]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4413      	add	r3, r2
 8001434:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	0c1a      	lsrs	r2, r3, #16
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	3306      	adds	r3, #6
 8001440:	b2d2      	uxtb	r2, r2
 8001442:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	4413      	add	r3, r2
 800144e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0e1a      	lsrs	r2, r3, #24
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	3307      	adds	r3, #7
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d108      	bne.n	8001476 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	68da      	ldr	r2, [r3, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f042 0220 	orr.w	r2, r2, #32
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	e007      	b.n	8001486 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f042 0220 	orr.w	r2, r2, #32
 8001484:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	e006      	b.n	8001498 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
  }
}
 8001498:	4618      	mov	r0, r3
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b085      	sub	sp, #20
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014b8:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80014ba:	7afb      	ldrb	r3, [r7, #11]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d002      	beq.n	80014c6 <HAL_CAN_GetRxFifoFillLevel+0x22>
 80014c0:	7afb      	ldrb	r3, [r7, #11]
 80014c2:	2b02      	cmp	r3, #2
 80014c4:	d10f      	bne.n	80014e6 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	68db      	ldr	r3, [r3, #12]
 80014d2:	f003 0303 	and.w	r3, r3, #3
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	e005      	b.n	80014e6 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	f003 0303 	and.w	r3, r3, #3
 80014e4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a2:	4770      	bx	lr
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
	...

08001614 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	3b01      	subs	r3, #1
 8001620:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001624:	d301      	bcc.n	800162a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001626:	2301      	movs	r3, #1
 8001628:	e00f      	b.n	800164a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800162a:	4a0a      	ldr	r2, [pc, #40]	; (8001654 <SysTick_Config+0x40>)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b01      	subs	r3, #1
 8001630:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001632:	210f      	movs	r1, #15
 8001634:	f04f 30ff 	mov.w	r0, #4294967295
 8001638:	f7ff ff8e 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800163c:	4b05      	ldr	r3, [pc, #20]	; (8001654 <SysTick_Config+0x40>)
 800163e:	2200      	movs	r2, #0
 8001640:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001642:	4b04      	ldr	r3, [pc, #16]	; (8001654 <SysTick_Config+0x40>)
 8001644:	2207      	movs	r2, #7
 8001646:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	e000e010 	.word	0xe000e010

08001658 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001660:	6878      	ldr	r0, [r7, #4]
 8001662:	f7ff ff47 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	b086      	sub	sp, #24
 8001672:	af00      	add	r7, sp, #0
 8001674:	4603      	mov	r3, r0
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	607a      	str	r2, [r7, #4]
 800167a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001680:	f7ff ff5c 	bl	800153c <__NVIC_GetPriorityGrouping>
 8001684:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	68b9      	ldr	r1, [r7, #8]
 800168a:	6978      	ldr	r0, [r7, #20]
 800168c:	f7ff ff8e 	bl	80015ac <NVIC_EncodePriority>
 8001690:	4602      	mov	r2, r0
 8001692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001696:	4611      	mov	r1, r2
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff5d 	bl	8001558 <__NVIC_SetPriority>
}
 800169e:	bf00      	nop
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f7ff ffb0 	bl	8001614 <SysTick_Config>
 80016b4:	4603      	mov	r3, r0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
	...

080016c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016ca:	2300      	movs	r3, #0
 80016cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ce:	e154      	b.n	800197a <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2101      	movs	r1, #1
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	4013      	ands	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 8146 	beq.w	8001974 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d00b      	beq.n	8001708 <HAL_GPIO_Init+0x48>
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d007      	beq.n	8001708 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016fc:	2b11      	cmp	r3, #17
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b12      	cmp	r3, #18
 8001706:	d130      	bne.n	800176a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	68da      	ldr	r2, [r3, #12]
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	693a      	ldr	r2, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800173e:	2201      	movs	r2, #1
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	693a      	ldr	r2, [r7, #16]
 800174a:	4013      	ands	r3, r2
 800174c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	091b      	lsrs	r3, r3, #4
 8001754:	f003 0201 	and.w	r2, r3, #1
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	2203      	movs	r2, #3
 8001776:	fa02 f303 	lsl.w	r3, r2, r3
 800177a:	43db      	mvns	r3, r3
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	4013      	ands	r3, r2
 8001780:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	693a      	ldr	r2, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_Init+0xea>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	2b12      	cmp	r3, #18
 80017a8:	d123      	bne.n	80017f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	08da      	lsrs	r2, r3, #3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3208      	adds	r2, #8
 80017b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	220f      	movs	r2, #15
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4013      	ands	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	691a      	ldr	r2, [r3, #16]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	f003 0307 	and.w	r3, r3, #7
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	fa02 f303 	lsl.w	r3, r2, r3
 80017de:	693a      	ldr	r2, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	08da      	lsrs	r2, r3, #3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	3208      	adds	r2, #8
 80017ec:	6939      	ldr	r1, [r7, #16]
 80017ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f003 0203 	and.w	r2, r3, #3
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	4313      	orrs	r3, r2
 800181e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 80a0 	beq.w	8001974 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001834:	4b58      	ldr	r3, [pc, #352]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 8001836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001838:	4a57      	ldr	r2, [pc, #348]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6613      	str	r3, [r2, #96]	; 0x60
 8001840:	4b55      	ldr	r3, [pc, #340]	; (8001998 <HAL_GPIO_Init+0x2d8>)
 8001842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001844:	f003 0301 	and.w	r3, r3, #1
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800184c:	4a53      	ldr	r2, [pc, #332]	; (800199c <HAL_GPIO_Init+0x2dc>)
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	089b      	lsrs	r3, r3, #2
 8001852:	3302      	adds	r3, #2
 8001854:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001858:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	f003 0303 	and.w	r3, r3, #3
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	220f      	movs	r2, #15
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001876:	d019      	beq.n	80018ac <HAL_GPIO_Init+0x1ec>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	4a49      	ldr	r2, [pc, #292]	; (80019a0 <HAL_GPIO_Init+0x2e0>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d013      	beq.n	80018a8 <HAL_GPIO_Init+0x1e8>
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	4a48      	ldr	r2, [pc, #288]	; (80019a4 <HAL_GPIO_Init+0x2e4>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1e4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a47      	ldr	r2, [pc, #284]	; (80019a8 <HAL_GPIO_Init+0x2e8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1e0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a46      	ldr	r2, [pc, #280]	; (80019ac <HAL_GPIO_Init+0x2ec>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1dc>
 8001898:	2304      	movs	r3, #4
 800189a:	e008      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 800189c:	2307      	movs	r3, #7
 800189e:	e006      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a0:	2303      	movs	r3, #3
 80018a2:	e004      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a4:	2302      	movs	r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <HAL_GPIO_Init+0x1ee>
 80018ac:	2300      	movs	r3, #0
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	f002 0203 	and.w	r2, r2, #3
 80018b4:	0092      	lsls	r2, r2, #2
 80018b6:	4093      	lsls	r3, r2
 80018b8:	693a      	ldr	r2, [r7, #16]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018be:	4937      	ldr	r1, [pc, #220]	; (800199c <HAL_GPIO_Init+0x2dc>)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	089b      	lsrs	r3, r3, #2
 80018c4:	3302      	adds	r3, #2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018cc:	4b38      	ldr	r3, [pc, #224]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	693a      	ldr	r2, [r7, #16]
 80018d8:	4013      	ands	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 80018e8:	693a      	ldr	r2, [r7, #16]
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018f0:	4a2f      	ldr	r2, [pc, #188]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80018f6:	4b2e      	ldr	r3, [pc, #184]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	43db      	mvns	r3, r3
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	4013      	ands	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8001912:	693a      	ldr	r2, [r7, #16]
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800191a:	4a25      	ldr	r2, [pc, #148]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	43db      	mvns	r3, r3
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	4013      	ands	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4313      	orrs	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001944:	4a1a      	ldr	r2, [pc, #104]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800194a:	4b19      	ldr	r3, [pc, #100]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 800194c:	68db      	ldr	r3, [r3, #12]
 800194e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	4013      	ands	r3, r2
 8001958:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4313      	orrs	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800196e:	4a10      	ldr	r2, [pc, #64]	; (80019b0 <HAL_GPIO_Init+0x2f0>)
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	fa22 f303 	lsr.w	r3, r2, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	f47f aea3 	bne.w	80016d0 <HAL_GPIO_Init+0x10>
  }
}
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	371c      	adds	r7, #28
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	40021000 	.word	0x40021000
 800199c:	40010000 	.word	0x40010000
 80019a0:	48000400 	.word	0x48000400
 80019a4:	48000800 	.word	0x48000800
 80019a8:	48000c00 	.word	0x48000c00
 80019ac:	48001000 	.word	0x48001000
 80019b0:	40010400 	.word	0x40010400

080019b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
 80019c0:	4613      	mov	r3, r2
 80019c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019c4:	787b      	ldrb	r3, [r7, #1]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ca:	887a      	ldrh	r2, [r7, #2]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019d0:	e002      	b.n	80019d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019d2:	887a      	ldrh	r2, [r7, #2]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_PWREx_GetVoltageRange+0x18>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40007000 	.word	0x40007000

08001a00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a0e:	d130      	bne.n	8001a72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a10:	4b23      	ldr	r3, [pc, #140]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1c:	d038      	beq.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a1e:	4b20      	ldr	r3, [pc, #128]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a26:	4a1e      	ldr	r2, [pc, #120]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a2e:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2232      	movs	r2, #50	; 0x32
 8001a34:	fb02 f303 	mul.w	r3, r2, r3
 8001a38:	4a1b      	ldr	r2, [pc, #108]	; (8001aa8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3e:	0c9b      	lsrs	r3, r3, #18
 8001a40:	3301      	adds	r3, #1
 8001a42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a44:	e002      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a4c:	4b14      	ldr	r3, [pc, #80]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a58:	d102      	bne.n	8001a60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d1f2      	bne.n	8001a46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a60:	4b0f      	ldr	r3, [pc, #60]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a6c:	d110      	bne.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e00f      	b.n	8001a92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a72:	4b0b      	ldr	r3, [pc, #44]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7e:	d007      	beq.n	8001a90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a80:	4b07      	ldr	r3, [pc, #28]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a88:	4a05      	ldr	r2, [pc, #20]	; (8001aa0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	20000000 	.word	0x20000000
 8001aa8:	431bde83 	.word	0x431bde83

08001aac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d102      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f000 bc11 	b.w	80022e2 <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac0:	4ba0      	ldr	r3, [pc, #640]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aca:	4b9e      	ldr	r3, [pc, #632]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001acc:	68db      	ldr	r3, [r3, #12]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	f000 80e4 	beq.w	8001caa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_RCC_OscConfig+0x4c>
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	2b0c      	cmp	r3, #12
 8001aec:	f040 808b 	bne.w	8001c06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	f040 8087 	bne.w	8001c06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d005      	beq.n	8001b10 <HAL_RCC_OscConfig+0x64>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e3e8      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a1a      	ldr	r2, [r3, #32]
 8001b14:	4b8b      	ldr	r3, [pc, #556]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0308 	and.w	r3, r3, #8
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d004      	beq.n	8001b2a <HAL_RCC_OscConfig+0x7e>
 8001b20:	4b88      	ldr	r3, [pc, #544]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b28:	e005      	b.n	8001b36 <HAL_RCC_OscConfig+0x8a>
 8001b2a:	4b86      	ldr	r3, [pc, #536]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b30:	091b      	lsrs	r3, r3, #4
 8001b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d223      	bcs.n	8001b82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f000 fd7a 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e3c9      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b4e:	4b7d      	ldr	r3, [pc, #500]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a7c      	ldr	r2, [pc, #496]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b54:	f043 0308 	orr.w	r3, r3, #8
 8001b58:	6013      	str	r3, [r2, #0]
 8001b5a:	4b7a      	ldr	r3, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
 8001b66:	4977      	ldr	r1, [pc, #476]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6c:	4b75      	ldr	r3, [pc, #468]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69db      	ldr	r3, [r3, #28]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	4972      	ldr	r1, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	604b      	str	r3, [r1, #4]
 8001b80:	e025      	b.n	8001bce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b82:	4b70      	ldr	r3, [pc, #448]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a6f      	ldr	r2, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	6013      	str	r3, [r2, #0]
 8001b8e:	4b6d      	ldr	r3, [pc, #436]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	496a      	ldr	r1, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69db      	ldr	r3, [r3, #28]
 8001bac:	021b      	lsls	r3, r3, #8
 8001bae:	4965      	ldr	r1, [pc, #404]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d109      	bne.n	8001bce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 fd3a 	bl	8002638 <RCC_SetFlashLatencyFromMSIRange>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e389      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bce:	f000 fc6f 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	4b5b      	ldr	r3, [pc, #364]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	091b      	lsrs	r3, r3, #4
 8001bda:	f003 030f 	and.w	r3, r3, #15
 8001bde:	495a      	ldr	r1, [pc, #360]	; (8001d48 <HAL_RCC_OscConfig+0x29c>)
 8001be0:	5ccb      	ldrb	r3, [r1, r3]
 8001be2:	f003 031f 	and.w	r3, r3, #31
 8001be6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bea:	4a58      	ldr	r2, [pc, #352]	; (8001d4c <HAL_RCC_OscConfig+0x2a0>)
 8001bec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bee:	4b58      	ldr	r3, [pc, #352]	; (8001d50 <HAL_RCC_OscConfig+0x2a4>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff f804 	bl	8000c00 <HAL_InitTick>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d052      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c02:	7bfb      	ldrb	r3, [r7, #15]
 8001c04:	e36d      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d032      	beq.n	8001c74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c0e:	4b4d      	ldr	r3, [pc, #308]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a4c      	ldr	r2, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f841 	bl	8000ca0 <HAL_GetTick>
 8001c1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c22:	f7ff f83d 	bl	8000ca0 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e356      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c34:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0302 	and.w	r3, r3, #2
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0f0      	beq.n	8001c22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c40:	4b40      	ldr	r3, [pc, #256]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a3f      	ldr	r2, [pc, #252]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6013      	str	r3, [r2, #0]
 8001c4c:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6a1b      	ldr	r3, [r3, #32]
 8001c58:	493a      	ldr	r1, [pc, #232]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5e:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	021b      	lsls	r3, r3, #8
 8001c6c:	4935      	ldr	r1, [pc, #212]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	604b      	str	r3, [r1, #4]
 8001c72:	e01a      	b.n	8001caa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c74:	4b33      	ldr	r3, [pc, #204]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a32      	ldr	r2, [pc, #200]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c80:	f7ff f80e 	bl	8000ca0 <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c88:	f7ff f80a 	bl	8000ca0 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e323      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c9a:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1dc>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0301 	and.w	r3, r3, #1
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d073      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cb6:	69bb      	ldr	r3, [r7, #24]
 8001cb8:	2b08      	cmp	r3, #8
 8001cba:	d005      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x21c>
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d10e      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	2b03      	cmp	r3, #3
 8001cc6:	d10b      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d063      	beq.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d15f      	bne.n	8001d9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e300      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ce8:	d106      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x24c>
 8001cea:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001cf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0x288>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d00:	d10c      	bne.n	8001d1c <HAL_RCC_OscConfig+0x270>
 8001d02:	4b10      	ldr	r3, [pc, #64]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a0f      	ldr	r2, [pc, #60]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d0c:	6013      	str	r3, [r2, #0]
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e00b      	b.n	8001d34 <HAL_RCC_OscConfig+0x288>
 8001d1c:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a08      	ldr	r2, [pc, #32]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d26:	6013      	str	r3, [r2, #0]
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <HAL_RCC_OscConfig+0x298>)
 8001d2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d3c:	f7fe ffb0 	bl	8000ca0 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d42:	e010      	b.n	8001d66 <HAL_RCC_OscConfig+0x2ba>
 8001d44:	40021000 	.word	0x40021000
 8001d48:	080037d4 	.word	0x080037d4
 8001d4c:	20000000 	.word	0x20000000
 8001d50:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7fe ffa4 	bl	8000ca0 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	; 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e2bd      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d66:	4baf      	ldr	r3, [pc, #700]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x2a8>
 8001d72:	e014      	b.n	8001d9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe ff94 	bl	8000ca0 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d7c:	f7fe ff90 	bl	8000ca0 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b64      	cmp	r3, #100	; 0x64
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e2a9      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d8e:	4ba5      	ldr	r3, [pc, #660]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d1f0      	bne.n	8001d7c <HAL_RCC_OscConfig+0x2d0>
 8001d9a:	e000      	b.n	8001d9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d060      	beq.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b04      	cmp	r3, #4
 8001dae:	d005      	beq.n	8001dbc <HAL_RCC_OscConfig+0x310>
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	2b0c      	cmp	r3, #12
 8001db4:	d119      	bne.n	8001dea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d116      	bne.n	8001dea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dbc:	4b99      	ldr	r3, [pc, #612]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x328>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e286      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd4:	4b93      	ldr	r3, [pc, #588]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	061b      	lsls	r3, r3, #24
 8001de2:	4990      	ldr	r1, [pc, #576]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001de8:	e040      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d023      	beq.n	8001e3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df2:	4b8c      	ldr	r3, [pc, #560]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a8b      	ldr	r2, [pc, #556]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7fe ff4f 	bl	8000ca0 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e06:	f7fe ff4b 	bl	8000ca0 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e264      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e18:	4b82      	ldr	r3, [pc, #520]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b7f      	ldr	r3, [pc, #508]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	061b      	lsls	r3, r3, #24
 8001e32:	497c      	ldr	r1, [pc, #496]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	604b      	str	r3, [r1, #4]
 8001e38:	e018      	b.n	8001e6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	4b7a      	ldr	r3, [pc, #488]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a79      	ldr	r2, [pc, #484]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e46:	f7fe ff2b 	bl	8000ca0 <HAL_GetTick>
 8001e4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e4c:	e008      	b.n	8001e60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4e:	f7fe ff27 	bl	8000ca0 <HAL_GetTick>
 8001e52:	4602      	mov	r2, r0
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d901      	bls.n	8001e60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	e240      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e60:	4b70      	ldr	r3, [pc, #448]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d1f0      	bne.n	8001e4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d03c      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d01c      	beq.n	8001eba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e80:	4b68      	ldr	r3, [pc, #416]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e86:	4a67      	ldr	r2, [pc, #412]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e90:	f7fe ff06 	bl	8000ca0 <HAL_GetTick>
 8001e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e96:	e008      	b.n	8001eaa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e98:	f7fe ff02 	bl	8000ca0 <HAL_GetTick>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e21b      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eaa:	4b5e      	ldr	r3, [pc, #376]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001eac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0ef      	beq.n	8001e98 <HAL_RCC_OscConfig+0x3ec>
 8001eb8:	e01b      	b.n	8001ef2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eba:	4b5a      	ldr	r3, [pc, #360]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec0:	4a58      	ldr	r2, [pc, #352]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001ec2:	f023 0301 	bic.w	r3, r3, #1
 8001ec6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eca:	f7fe fee9 	bl	8000ca0 <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed2:	f7fe fee5 	bl	8000ca0 <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e1fe      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee4:	4b4f      	ldr	r3, [pc, #316]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1ef      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80a6 	beq.w	800204c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f00:	2300      	movs	r3, #0
 8001f02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10d      	bne.n	8001f2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f10:	4b44      	ldr	r3, [pc, #272]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f14:	4a43      	ldr	r2, [pc, #268]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f1c:	4b41      	ldr	r3, [pc, #260]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	60bb      	str	r3, [r7, #8]
 8001f26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f2c:	4b3e      	ldr	r3, [pc, #248]	; (8002028 <HAL_RCC_OscConfig+0x57c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d118      	bne.n	8001f6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f38:	4b3b      	ldr	r3, [pc, #236]	; (8002028 <HAL_RCC_OscConfig+0x57c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a3a      	ldr	r2, [pc, #232]	; (8002028 <HAL_RCC_OscConfig+0x57c>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f44:	f7fe feac 	bl	8000ca0 <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f4c:	f7fe fea8 	bl	8000ca0 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1c1      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5e:	4b32      	ldr	r3, [pc, #200]	; (8002028 <HAL_RCC_OscConfig+0x57c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d0f0      	beq.n	8001f4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d108      	bne.n	8001f84 <HAL_RCC_OscConfig+0x4d8>
 8001f72:	4b2c      	ldr	r3, [pc, #176]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f78:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f82:	e024      	b.n	8001fce <HAL_RCC_OscConfig+0x522>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	2b05      	cmp	r3, #5
 8001f8a:	d110      	bne.n	8001fae <HAL_RCC_OscConfig+0x502>
 8001f8c:	4b25      	ldr	r3, [pc, #148]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f92:	4a24      	ldr	r2, [pc, #144]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f94:	f043 0304 	orr.w	r3, r3, #4
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fac:	e00f      	b.n	8001fce <HAL_RCC_OscConfig+0x522>
 8001fae:	4b1d      	ldr	r3, [pc, #116]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb4:	4a1b      	ldr	r2, [pc, #108]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001fb6:	f023 0301 	bic.w	r3, r3, #1
 8001fba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbe:	4b19      	ldr	r3, [pc, #100]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc4:	4a17      	ldr	r2, [pc, #92]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001fc6:	f023 0304 	bic.w	r3, r3, #4
 8001fca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d016      	beq.n	8002004 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd6:	f7fe fe63 	bl	8000ca0 <HAL_GetTick>
 8001fda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fdc:	e00a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7fe fe5f 	bl	8000ca0 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e176      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_RCC_OscConfig+0x578>)
 8001ff6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffa:	f003 0302 	and.w	r3, r3, #2
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0ed      	beq.n	8001fde <HAL_RCC_OscConfig+0x532>
 8002002:	e01a      	b.n	800203a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7fe fe4c 	bl	8000ca0 <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800200a:	e00f      	b.n	800202c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800200c:	f7fe fe48 	bl	8000ca0 <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	f241 3288 	movw	r2, #5000	; 0x1388
 800201a:	4293      	cmp	r3, r2
 800201c:	d906      	bls.n	800202c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e15f      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
 8002022:	bf00      	nop
 8002024:	40021000 	.word	0x40021000
 8002028:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800202c:	4baa      	ldr	r3, [pc, #680]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800202e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1e8      	bne.n	800200c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800203a:	7ffb      	ldrb	r3, [r7, #31]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d105      	bne.n	800204c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002040:	4ba5      	ldr	r3, [pc, #660]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002044:	4aa4      	ldr	r2, [pc, #656]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002046:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d03c      	beq.n	80020d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205c:	2b00      	cmp	r3, #0
 800205e:	d01c      	beq.n	800209a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002060:	4b9d      	ldr	r3, [pc, #628]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002066:	4a9c      	ldr	r2, [pc, #624]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002068:	f043 0301 	orr.w	r3, r3, #1
 800206c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002070:	f7fe fe16 	bl	8000ca0 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002078:	f7fe fe12 	bl	8000ca0 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e12b      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800208a:	4b93      	ldr	r3, [pc, #588]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800208c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002090:	f003 0302 	and.w	r3, r3, #2
 8002094:	2b00      	cmp	r3, #0
 8002096:	d0ef      	beq.n	8002078 <HAL_RCC_OscConfig+0x5cc>
 8002098:	e01b      	b.n	80020d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800209a:	4b8f      	ldr	r3, [pc, #572]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800209c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a0:	4a8d      	ldr	r2, [pc, #564]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020aa:	f7fe fdf9 	bl	8000ca0 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020b2:	f7fe fdf5 	bl	8000ca0 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e10e      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80020c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1ef      	bne.n	80020b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	f000 8102 	beq.w	80022e0 <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	f040 80c5 	bne.w	8002270 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	f003 0203 	and.w	r2, r3, #3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d12c      	bne.n	8002154 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	3b01      	subs	r3, #1
 8002106:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d123      	bne.n	8002154 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002116:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d11b      	bne.n	8002154 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002126:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d113      	bne.n	8002154 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002136:	085b      	lsrs	r3, r3, #1
 8002138:	3b01      	subs	r3, #1
 800213a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800213c:	429a      	cmp	r2, r3
 800213e:	d109      	bne.n	8002154 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	085b      	lsrs	r3, r3, #1
 800214c:	3b01      	subs	r3, #1
 800214e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002150:	429a      	cmp	r2, r3
 8002152:	d067      	beq.n	8002224 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d062      	beq.n	8002220 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800215a:	4b5f      	ldr	r3, [pc, #380]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e0bb      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800216a:	4b5b      	ldr	r3, [pc, #364]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002170:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002174:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002176:	f7fe fd93 	bl	8000ca0 <HAL_GetTick>
 800217a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800217c:	e008      	b.n	8002190 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800217e:	f7fe fd8f 	bl	8000ca0 <HAL_GetTick>
 8002182:	4602      	mov	r2, r0
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	1ad3      	subs	r3, r2, r3
 8002188:	2b02      	cmp	r3, #2
 800218a:	d901      	bls.n	8002190 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800218c:	2303      	movs	r3, #3
 800218e:	e0a8      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	4b51      	ldr	r3, [pc, #324]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f0      	bne.n	800217e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800219c:	4b4e      	ldr	r3, [pc, #312]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	4b4e      	ldr	r3, [pc, #312]	; (80022dc <HAL_RCC_OscConfig+0x830>)
 80021a2:	4013      	ands	r3, r2
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021a8:	687a      	ldr	r2, [r7, #4]
 80021aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021ac:	3a01      	subs	r2, #1
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	4311      	orrs	r1, r2
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021b6:	0212      	lsls	r2, r2, #8
 80021b8:	4311      	orrs	r1, r2
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021be:	0852      	lsrs	r2, r2, #1
 80021c0:	3a01      	subs	r2, #1
 80021c2:	0552      	lsls	r2, r2, #21
 80021c4:	4311      	orrs	r1, r2
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021ca:	0852      	lsrs	r2, r2, #1
 80021cc:	3a01      	subs	r2, #1
 80021ce:	0652      	lsls	r2, r2, #25
 80021d0:	4311      	orrs	r1, r2
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021d6:	06d2      	lsls	r2, r2, #27
 80021d8:	430a      	orrs	r2, r1
 80021da:	493f      	ldr	r1, [pc, #252]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021e0:	4b3d      	ldr	r3, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a3c      	ldr	r2, [pc, #240]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80021e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021ec:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	4a39      	ldr	r2, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80021f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021f8:	f7fe fd52 	bl	8000ca0 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002200:	f7fe fd4e 	bl	8000ca0 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e067      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002212:	4b31      	ldr	r3, [pc, #196]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0f0      	beq.n	8002200 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800221e:	e05f      	b.n	80022e0 <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e05e      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002224:	4b2c      	ldr	r3, [pc, #176]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d157      	bne.n	80022e0 <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002230:	4b29      	ldr	r3, [pc, #164]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a28      	ldr	r2, [pc, #160]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002236:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800223a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002242:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002246:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002248:	f7fe fd2a 	bl	8000ca0 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002250:	f7fe fd26 	bl	8000ca0 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e03f      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x7a4>
 800226e:	e037      	b.n	80022e0 <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2b0c      	cmp	r3, #12
 8002274:	d02d      	beq.n	80022d2 <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002276:	4b18      	ldr	r3, [pc, #96]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800227c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002280:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 8002294:	f023 0303 	bic.w	r3, r3, #3
 8002298:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800229a:	4b0f      	ldr	r3, [pc, #60]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80022a0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022aa:	f7fe fcf9 	bl	8000ca0 <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe fcf5 	bl	8000ca0 <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e00e      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	4b04      	ldr	r3, [pc, #16]	; (80022d8 <HAL_RCC_OscConfig+0x82c>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d1f0      	bne.n	80022b2 <HAL_RCC_OscConfig+0x806>
 80022d0:	e006      	b.n	80022e0 <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e005      	b.n	80022e2 <HAL_RCC_OscConfig+0x836>
 80022d6:	bf00      	nop
 80022d8:	40021000 	.word	0x40021000
 80022dc:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3720      	adds	r7, #32
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop

080022ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b084      	sub	sp, #16
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e0c8      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002300:	4b66      	ldr	r3, [pc, #408]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	683a      	ldr	r2, [r7, #0]
 800230a:	429a      	cmp	r2, r3
 800230c:	d910      	bls.n	8002330 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800230e:	4b63      	ldr	r3, [pc, #396]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 0207 	bic.w	r2, r3, #7
 8002316:	4961      	ldr	r1, [pc, #388]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	4313      	orrs	r3, r2
 800231c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800231e:	4b5f      	ldr	r3, [pc, #380]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0307 	and.w	r3, r3, #7
 8002326:	683a      	ldr	r2, [r7, #0]
 8002328:	429a      	cmp	r2, r3
 800232a:	d001      	beq.n	8002330 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0b0      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b00      	cmp	r3, #0
 800233a:	d04c      	beq.n	80023d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d107      	bne.n	8002354 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002344:	4b56      	ldr	r3, [pc, #344]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234c:	2b00      	cmp	r3, #0
 800234e:	d121      	bne.n	8002394 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e09e      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b02      	cmp	r3, #2
 800235a:	d107      	bne.n	800236c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800235c:	4b50      	ldr	r3, [pc, #320]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d115      	bne.n	8002394 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e092      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d107      	bne.n	8002384 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002374:	4b4a      	ldr	r3, [pc, #296]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d109      	bne.n	8002394 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e086      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002384:	4b46      	ldr	r3, [pc, #280]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	2b00      	cmp	r3, #0
 800238e:	d101      	bne.n	8002394 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e07e      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002394:	4b42      	ldr	r3, [pc, #264]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	f023 0203 	bic.w	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	493f      	ldr	r1, [pc, #252]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023a6:	f7fe fc7b 	bl	8000ca0 <HAL_GetTick>
 80023aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ac:	e00a      	b.n	80023c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023ae:	f7fe fc77 	bl	8000ca0 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023bc:	4293      	cmp	r3, r2
 80023be:	d901      	bls.n	80023c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e066      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c4:	4b36      	ldr	r3, [pc, #216]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f003 020c 	and.w	r2, r3, #12
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d1eb      	bne.n	80023ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d008      	beq.n	80023f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e2:	4b2f      	ldr	r3, [pc, #188]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	492c      	ldr	r1, [pc, #176]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 80023f0:	4313      	orrs	r3, r2
 80023f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023f4:	4b29      	ldr	r3, [pc, #164]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f003 0307 	and.w	r3, r3, #7
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d210      	bcs.n	8002424 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002402:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f023 0207 	bic.w	r2, r3, #7
 800240a:	4924      	ldr	r1, [pc, #144]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	4313      	orrs	r3, r2
 8002410:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	4b22      	ldr	r3, [pc, #136]	; (800249c <HAL_RCC_ClockConfig+0x1b0>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	683a      	ldr	r2, [r7, #0]
 800241c:	429a      	cmp	r2, r3
 800241e:	d001      	beq.n	8002424 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e036      	b.n	8002492 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 0304 	and.w	r3, r3, #4
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	4918      	ldr	r1, [pc, #96]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d009      	beq.n	8002462 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800244e:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4910      	ldr	r1, [pc, #64]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 800245e:	4313      	orrs	r3, r2
 8002460:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002462:	f000 f825 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 8002466:	4602      	mov	r2, r0
 8002468:	4b0d      	ldr	r3, [pc, #52]	; (80024a0 <HAL_RCC_ClockConfig+0x1b4>)
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	091b      	lsrs	r3, r3, #4
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	490c      	ldr	r1, [pc, #48]	; (80024a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	5ccb      	ldrb	r3, [r1, r3]
 8002476:	f003 031f 	and.w	r3, r3, #31
 800247a:	fa22 f303 	lsr.w	r3, r2, r3
 800247e:	4a0a      	ldr	r2, [pc, #40]	; (80024a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7fe fbba 	bl	8000c00 <HAL_InitTick>
 800248c:	4603      	mov	r3, r0
 800248e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002490:	7afb      	ldrb	r3, [r7, #11]
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	40022000 	.word	0x40022000
 80024a0:	40021000 	.word	0x40021000
 80024a4:	080037d4 	.word	0x080037d4
 80024a8:	20000000 	.word	0x20000000
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b089      	sub	sp, #36	; 0x24
 80024b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024b6:	2300      	movs	r3, #0
 80024b8:	61fb      	str	r3, [r7, #28]
 80024ba:	2300      	movs	r3, #0
 80024bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024be:	4b3e      	ldr	r3, [pc, #248]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 030c 	and.w	r3, r3, #12
 80024c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024c8:	4b3b      	ldr	r3, [pc, #236]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	f003 0303 	and.w	r3, r3, #3
 80024d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d005      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x34>
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	2b0c      	cmp	r3, #12
 80024dc:	d121      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d11e      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80024e4:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0308 	and.w	r3, r3, #8
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d107      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80024f0:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	0a1b      	lsrs	r3, r3, #8
 80024f8:	f003 030f 	and.w	r3, r3, #15
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002500:	4b2d      	ldr	r3, [pc, #180]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	091b      	lsrs	r3, r3, #4
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800250c:	4a2b      	ldr	r2, [pc, #172]	; (80025bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002514:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d10d      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	2b04      	cmp	r3, #4
 8002526:	d102      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002528:	4b25      	ldr	r3, [pc, #148]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e004      	b.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b08      	cmp	r3, #8
 8002532:	d101      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002536:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	2b0c      	cmp	r3, #12
 800253c:	d134      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800253e:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b02      	cmp	r3, #2
 800254c:	d003      	beq.n	8002556 <HAL_RCC_GetSysClockFreq+0xa6>
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b03      	cmp	r3, #3
 8002552:	d003      	beq.n	800255c <HAL_RCC_GetSysClockFreq+0xac>
 8002554:	e005      	b.n	8002562 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002556:	4b1a      	ldr	r3, [pc, #104]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002558:	617b      	str	r3, [r7, #20]
      break;
 800255a:	e005      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800255c:	4b19      	ldr	r3, [pc, #100]	; (80025c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800255e:	617b      	str	r3, [r7, #20]
      break;
 8002560:	e002      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	617b      	str	r3, [r7, #20]
      break;
 8002566:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	091b      	lsrs	r3, r3, #4
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	3301      	adds	r3, #1
 8002574:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002576:	4b10      	ldr	r3, [pc, #64]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	0a1b      	lsrs	r3, r3, #8
 800257c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002580:	697a      	ldr	r2, [r7, #20]
 8002582:	fb02 f203 	mul.w	r2, r2, r3
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	fbb2 f3f3 	udiv	r3, r2, r3
 800258c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	0e5b      	lsrs	r3, r3, #25
 8002594:	f003 0303 	and.w	r3, r3, #3
 8002598:	3301      	adds	r3, #1
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025a8:	69bb      	ldr	r3, [r7, #24]
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3724      	adds	r7, #36	; 0x24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	080037ec 	.word	0x080037ec
 80025c0:	00f42400 	.word	0x00f42400
 80025c4:	007a1200 	.word	0x007a1200

080025c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025cc:	4b03      	ldr	r3, [pc, #12]	; (80025dc <HAL_RCC_GetHCLKFreq+0x14>)
 80025ce:	681b      	ldr	r3, [r3, #0]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
 80025da:	bf00      	nop
 80025dc:	20000000 	.word	0x20000000

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025e4:	f7ff fff0 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4904      	ldr	r1, [pc, #16]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	f003 031f 	and.w	r3, r3, #31
 80025fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	080037e4 	.word	0x080037e4

0800260c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002610:	f7ff ffda 	bl	80025c8 <HAL_RCC_GetHCLKFreq>
 8002614:	4602      	mov	r2, r0
 8002616:	4b06      	ldr	r3, [pc, #24]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	0adb      	lsrs	r3, r3, #11
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	4904      	ldr	r1, [pc, #16]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002622:	5ccb      	ldrb	r3, [r1, r3]
 8002624:	f003 031f 	and.w	r3, r3, #31
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40021000 	.word	0x40021000
 8002634:	080037e4 	.word	0x080037e4

08002638 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b086      	sub	sp, #24
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002640:	2300      	movs	r3, #0
 8002642:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002644:	4b2a      	ldr	r3, [pc, #168]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002650:	f7ff f9c8 	bl	80019e4 <HAL_PWREx_GetVoltageRange>
 8002654:	6178      	str	r0, [r7, #20]
 8002656:	e014      	b.n	8002682 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002658:	4b25      	ldr	r3, [pc, #148]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800265c:	4a24      	ldr	r2, [pc, #144]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800265e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002662:	6593      	str	r3, [r2, #88]	; 0x58
 8002664:	4b22      	ldr	r3, [pc, #136]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002668:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002670:	f7ff f9b8 	bl	80019e4 <HAL_PWREx_GetVoltageRange>
 8002674:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267a:	4a1d      	ldr	r2, [pc, #116]	; (80026f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800267c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002680:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002688:	d10b      	bne.n	80026a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d919      	bls.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2ba0      	cmp	r3, #160	; 0xa0
 8002694:	d902      	bls.n	800269c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002696:	2302      	movs	r3, #2
 8002698:	613b      	str	r3, [r7, #16]
 800269a:	e013      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800269c:	2301      	movs	r3, #1
 800269e:	613b      	str	r3, [r7, #16]
 80026a0:	e010      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d902      	bls.n	80026ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80026a8:	2303      	movs	r3, #3
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	e00a      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b80      	cmp	r3, #128	; 0x80
 80026b2:	d102      	bne.n	80026ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80026b4:	2302      	movs	r3, #2
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	e004      	b.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b70      	cmp	r3, #112	; 0x70
 80026be:	d101      	bne.n	80026c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80026c0:	2301      	movs	r3, #1
 80026c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 0207 	bic.w	r2, r3, #7
 80026cc:	4909      	ldr	r1, [pc, #36]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	429a      	cmp	r2, r3
 80026e0:	d001      	beq.n	80026e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e000      	b.n	80026e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80026e6:	2300      	movs	r3, #0
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	3718      	adds	r7, #24
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	40022000 	.word	0x40022000

080026f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002700:	2300      	movs	r3, #0
 8002702:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002704:	2300      	movs	r3, #0
 8002706:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002710:	2b00      	cmp	r3, #0
 8002712:	d031      	beq.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002718:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800271c:	d01a      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800271e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002722:	d814      	bhi.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002724:	2b00      	cmp	r3, #0
 8002726:	d009      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002728:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800272c:	d10f      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002730:	68db      	ldr	r3, [r3, #12]
 8002732:	4a5c      	ldr	r2, [pc, #368]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002734:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002738:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800273a:	e00c      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	3304      	adds	r3, #4
 8002740:	2100      	movs	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f000 fa44 	bl	8002bd0 <RCCEx_PLLSAI1_Config>
 8002748:	4603      	mov	r3, r0
 800274a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800274c:	e003      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	74fb      	strb	r3, [r7, #19]
      break;
 8002752:	e000      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002754:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002756:	7cfb      	ldrb	r3, [r7, #19]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800275c:	4b51      	ldr	r3, [pc, #324]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800276a:	494e      	ldr	r1, [pc, #312]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002772:	e001      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 809e 	beq.w	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002786:	2300      	movs	r3, #0
 8002788:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800278a:	4b46      	ldr	r3, [pc, #280]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800278c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800278e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d101      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002796:	2301      	movs	r3, #1
 8002798:	e000      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800279a:	2300      	movs	r3, #0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00d      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027a0:	4b40      	ldr	r3, [pc, #256]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a4:	4a3f      	ldr	r2, [pc, #252]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027aa:	6593      	str	r3, [r2, #88]	; 0x58
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027b8:	2301      	movs	r3, #1
 80027ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027bc:	4b3a      	ldr	r3, [pc, #232]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a39      	ldr	r2, [pc, #228]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027c8:	f7fe fa6a 	bl	8000ca0 <HAL_GetTick>
 80027cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027ce:	e009      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027d0:	f7fe fa66 	bl	8000ca0 <HAL_GetTick>
 80027d4:	4602      	mov	r2, r0
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	1ad3      	subs	r3, r2, r3
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d902      	bls.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80027de:	2303      	movs	r3, #3
 80027e0:	74fb      	strb	r3, [r7, #19]
        break;
 80027e2:	e005      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027e4:	4b30      	ldr	r3, [pc, #192]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d0ef      	beq.n	80027d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80027f0:	7cfb      	ldrb	r3, [r7, #19]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d15a      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027f6:	4b2b      	ldr	r3, [pc, #172]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002800:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d01e      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	429a      	cmp	r2, r3
 8002810:	d019      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002812:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002814:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002818:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800281c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800281e:	4b21      	ldr	r3, [pc, #132]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002824:	4a1f      	ldr	r2, [pc, #124]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002826:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800282a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800282e:	4b1d      	ldr	r3, [pc, #116]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002834:	4a1b      	ldr	r2, [pc, #108]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800283a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800283e:	4a19      	ldr	r2, [pc, #100]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f003 0301 	and.w	r3, r3, #1
 800284c:	2b00      	cmp	r3, #0
 800284e:	d016      	beq.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002850:	f7fe fa26 	bl	8000ca0 <HAL_GetTick>
 8002854:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002856:	e00b      	b.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002858:	f7fe fa22 	bl	8000ca0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	f241 3288 	movw	r2, #5000	; 0x1388
 8002866:	4293      	cmp	r3, r2
 8002868:	d902      	bls.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	74fb      	strb	r3, [r7, #19]
            break;
 800286e:	e006      	b.n	800287e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002870:	4b0c      	ldr	r3, [pc, #48]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0ec      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800287e:	7cfb      	ldrb	r3, [r7, #19]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002892:	4904      	ldr	r1, [pc, #16]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800289a:	e009      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800289c:	7cfb      	ldrb	r3, [r7, #19]
 800289e:	74bb      	strb	r3, [r7, #18]
 80028a0:	e006      	b.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80028a2:	bf00      	nop
 80028a4:	40021000 	.word	0x40021000
 80028a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ac:	7cfb      	ldrb	r3, [r7, #19]
 80028ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028b0:	7c7b      	ldrb	r3, [r7, #17]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d105      	bne.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b6:	4b9e      	ldr	r3, [pc, #632]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	4a9d      	ldr	r2, [pc, #628]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ce:	4b98      	ldr	r3, [pc, #608]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d4:	f023 0203 	bic.w	r2, r3, #3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	4994      	ldr	r1, [pc, #592]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028f0:	4b8f      	ldr	r3, [pc, #572]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	f023 020c 	bic.w	r2, r3, #12
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	498c      	ldr	r1, [pc, #560]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00a      	beq.n	8002928 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002912:	4b87      	ldr	r3, [pc, #540]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002914:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002918:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	4983      	ldr	r1, [pc, #524]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002922:	4313      	orrs	r3, r2
 8002924:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00a      	beq.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002934:	4b7e      	ldr	r3, [pc, #504]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002936:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002942:	497b      	ldr	r1, [pc, #492]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002944:	4313      	orrs	r3, r2
 8002946:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0320 	and.w	r3, r3, #32
 8002952:	2b00      	cmp	r3, #0
 8002954:	d00a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002956:	4b76      	ldr	r3, [pc, #472]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002958:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002964:	4972      	ldr	r1, [pc, #456]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002966:	4313      	orrs	r3, r2
 8002968:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00a      	beq.n	800298e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002978:	4b6d      	ldr	r3, [pc, #436]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800297a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002986:	496a      	ldr	r1, [pc, #424]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002988:	4313      	orrs	r3, r2
 800298a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002996:	2b00      	cmp	r3, #0
 8002998:	d00a      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800299a:	4b65      	ldr	r3, [pc, #404]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800299c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a8:	4961      	ldr	r1, [pc, #388]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00a      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029bc:	4b5c      	ldr	r3, [pc, #368]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ca:	4959      	ldr	r1, [pc, #356]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00a      	beq.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029de:	4b54      	ldr	r3, [pc, #336]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	4950      	ldr	r1, [pc, #320]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a00:	4b4b      	ldr	r3, [pc, #300]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a06:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	4948      	ldr	r1, [pc, #288]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00a      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x340>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002a22:	4b43      	ldr	r3, [pc, #268]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a28:	f023 0203 	bic.w	r2, r3, #3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a30:	493f      	ldr	r1, [pc, #252]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d028      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a44:	4b3a      	ldr	r3, [pc, #232]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a52:	4937      	ldr	r1, [pc, #220]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a62:	d106      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x37a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a64:	4b32      	ldr	r3, [pc, #200]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a31      	ldr	r2, [pc, #196]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002a6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6e:	60d3      	str	r3, [r2, #12]
 8002a70:	e011      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7a:	d10c      	bne.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3304      	adds	r3, #4
 8002a80:	2101      	movs	r1, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f000 f8a4 	bl	8002bd0 <RCCEx_PLLSAI1_Config>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a8c:	7cfb      	ldrb	r3, [r7, #19]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d001      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
        {
          /* set overall return value */
          status = ret;
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d028      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002aa2:	4b23      	ldr	r3, [pc, #140]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002aa4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	491f      	ldr	r1, [pc, #124]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002abc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ac2:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	4a1a      	ldr	r2, [pc, #104]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002ac8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002acc:	60d3      	str	r3, [r2, #12]
 8002ace:	e011      	b.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad8:	d10c      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3304      	adds	r3, #4
 8002ade:	2101      	movs	r1, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f875 	bl	8002bd0 <RCCEx_PLLSAI1_Config>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
      {
        /* set overall return value */
        status = ret;
 8002af0:	7cfb      	ldrb	r3, [r7, #19]
 8002af2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d02b      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x460>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b00:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0e:	4908      	ldr	r1, [pc, #32]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b1e:	d109      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b20:	4b03      	ldr	r3, [pc, #12]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b22:	68db      	ldr	r3, [r3, #12]
 8002b24:	4a02      	ldr	r2, [pc, #8]	; (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b2a:	60d3      	str	r3, [r2, #12]
 8002b2c:	e014      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x460>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x460>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3304      	adds	r3, #4
 8002b42:	2101      	movs	r1, #1
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f843 	bl	8002bd0 <RCCEx_PLLSAI1_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x460>
      {
        /* set overall return value */
        status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01c      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b64:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	4916      	ldr	r1, [pc, #88]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b82:	d10c      	bne.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3304      	adds	r3, #4
 8002b88:	2102      	movs	r1, #2
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f000 f820 	bl	8002bd0 <RCCEx_PLLSAI1_Config>
 8002b90:	4603      	mov	r3, r0
 8002b92:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b94:	7cfb      	ldrb	r3, [r7, #19]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d001      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
      {
        /* set overall return value */
        status = ret;
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002baa:	4b08      	ldr	r3, [pc, #32]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bb8:	4904      	ldr	r1, [pc, #16]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bc0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40021000 	.word	0x40021000

08002bd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bde:	4b74      	ldr	r3, [pc, #464]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d018      	beq.n	8002c1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bea:	4b71      	ldr	r3, [pc, #452]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f003 0203 	and.w	r2, r3, #3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d10d      	bne.n	8002c16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c02:	4b6b      	ldr	r3, [pc, #428]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	091b      	lsrs	r3, r3, #4
 8002c08:	f003 0307 	and.w	r3, r3, #7
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	685b      	ldr	r3, [r3, #4]
       ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d047      	beq.n	8002ca6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
 8002c1a:	e044      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	d018      	beq.n	8002c56 <RCCEx_PLLSAI1_Config+0x86>
 8002c24:	2b03      	cmp	r3, #3
 8002c26:	d825      	bhi.n	8002c74 <RCCEx_PLLSAI1_Config+0xa4>
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d002      	beq.n	8002c32 <RCCEx_PLLSAI1_Config+0x62>
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d009      	beq.n	8002c44 <RCCEx_PLLSAI1_Config+0x74>
 8002c30:	e020      	b.n	8002c74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c32:	4b5f      	ldr	r3, [pc, #380]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11d      	bne.n	8002c7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c42:	e01a      	b.n	8002c7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c44:	4b5a      	ldr	r3, [pc, #360]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d116      	bne.n	8002c7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c54:	e013      	b.n	8002c7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c56:	4b56      	ldr	r3, [pc, #344]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d10f      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c62:	4b53      	ldr	r3, [pc, #332]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d109      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c72:	e006      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	73fb      	strb	r3, [r7, #15]
      break;
 8002c78:	e004      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7a:	bf00      	nop
 8002c7c:	e002      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c7e:	bf00      	nop
 8002c80:	e000      	b.n	8002c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c84:	7bfb      	ldrb	r3, [r7, #15]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10d      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c8a:	4b49      	ldr	r3, [pc, #292]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6819      	ldr	r1, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	430b      	orrs	r3, r1
 8002ca0:	4943      	ldr	r1, [pc, #268]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ca6:	7bfb      	ldrb	r3, [r7, #15]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d17c      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cac:	4b40      	ldr	r3, [pc, #256]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a3f      	ldr	r2, [pc, #252]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb8:	f7fd fff2 	bl	8000ca0 <HAL_GetTick>
 8002cbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cbe:	e009      	b.n	8002cd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cc0:	f7fd ffee 	bl	8000ca0 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d902      	bls.n	8002cd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8002cd2:	e005      	b.n	8002ce0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cd4:	4b36      	ldr	r3, [pc, #216]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d1ef      	bne.n	8002cc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ce0:	7bfb      	ldrb	r3, [r7, #15]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d15f      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d110      	bne.n	8002d0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cf8:	687a      	ldr	r2, [r7, #4]
 8002cfa:	6892      	ldr	r2, [r2, #8]
 8002cfc:	0211      	lsls	r1, r2, #8
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68d2      	ldr	r2, [r2, #12]
 8002d02:	06d2      	lsls	r2, r2, #27
 8002d04:	430a      	orrs	r2, r1
 8002d06:	492a      	ldr	r1, [pc, #168]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	610b      	str	r3, [r1, #16]
 8002d0c:	e027      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	d112      	bne.n	8002d3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d14:	4b26      	ldr	r3, [pc, #152]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	0211      	lsls	r1, r2, #8
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	6912      	ldr	r2, [r2, #16]
 8002d2a:	0852      	lsrs	r2, r2, #1
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0552      	lsls	r2, r2, #21
 8002d30:	430a      	orrs	r2, r1
 8002d32:	491f      	ldr	r1, [pc, #124]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	610b      	str	r3, [r1, #16]
 8002d38:	e011      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d3a:	4b1d      	ldr	r3, [pc, #116]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6892      	ldr	r2, [r2, #8]
 8002d4a:	0211      	lsls	r1, r2, #8
 8002d4c:	687a      	ldr	r2, [r7, #4]
 8002d4e:	6952      	ldr	r2, [r2, #20]
 8002d50:	0852      	lsrs	r2, r2, #1
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0652      	lsls	r2, r2, #25
 8002d56:	430a      	orrs	r2, r1
 8002d58:	4915      	ldr	r1, [pc, #84]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a13      	ldr	r2, [pc, #76]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fd ff99 	bl	8000ca0 <HAL_GetTick>
 8002d6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d70:	e009      	b.n	8002d86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d72:	f7fd ff95 	bl	8000ca0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d902      	bls.n	8002d86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	73fb      	strb	r3, [r7, #15]
          break;
 8002d84:	e005      	b.n	8002d92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d86:	4b0a      	ldr	r3, [pc, #40]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0ef      	beq.n	8002d72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d106      	bne.n	8002da6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d98:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d9a:	691a      	ldr	r2, [r3, #16]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	4903      	ldr	r1, [pc, #12]	; (8002db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000

08002db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e040      	b.n	8002e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d106      	bne.n	8002ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fd fe28 	bl	8000a2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2224      	movs	r2, #36	; 0x24
 8002de0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0201 	bic.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f8c0 	bl	8002f78 <UART_SetConfig>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e022      	b.n	8002e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d002      	beq.n	8002e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 fb10 	bl	8003430 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	689a      	ldr	r2, [r3, #8]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fb97 	bl	8003574 <UART_CheckIdleState>
 8002e46:	4603      	mov	r3, r0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3708      	adds	r7, #8
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b08a      	sub	sp, #40	; 0x28
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	603b      	str	r3, [r7, #0]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	f040 8082 	bne.w	8002f6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d002      	beq.n	8002e76 <HAL_UART_Transmit+0x26>
 8002e70:	88fb      	ldrh	r3, [r7, #6]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07a      	b.n	8002f70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Transmit+0x38>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e073      	b.n	8002f70 <HAL_UART_Transmit+0x120>
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2221      	movs	r2, #33	; 0x21
 8002e9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e9e:	f7fd feff 	bl	8000ca0 <HAL_GetTick>
 8002ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	88fa      	ldrh	r2, [r7, #6]
 8002ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ebc:	d108      	bne.n	8002ed0 <HAL_UART_Transmit+0x80>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d104      	bne.n	8002ed0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002eca:	68bb      	ldr	r3, [r7, #8]
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	e003      	b.n	8002ed8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ee0:	e02d      	b.n	8002f3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fb8a 	bl	8003606 <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e039      	b.n	8002f70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10b      	bne.n	8002f1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	881a      	ldrh	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f0e:	b292      	uxth	r2, r2
 8002f10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	3302      	adds	r3, #2
 8002f16:	61bb      	str	r3, [r7, #24]
 8002f18:	e008      	b.n	8002f2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	781a      	ldrb	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	b292      	uxth	r2, r2
 8002f24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3301      	adds	r3, #1
 8002f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1cb      	bne.n	8002ee2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2200      	movs	r2, #0
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	68f8      	ldr	r0, [r7, #12]
 8002f56:	f000 fb56 	bl	8003606 <UART_WaitOnFlagUntilTimeout>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e005      	b.n	8002f70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2220      	movs	r2, #32
 8002f68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	e000      	b.n	8002f70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f6e:	2302      	movs	r3, #2
  }
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3720      	adds	r7, #32
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f78:	b5b0      	push	{r4, r5, r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f80:	2300      	movs	r3, #0
 8002f82:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689a      	ldr	r2, [r3, #8]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	695b      	ldr	r3, [r3, #20]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69db      	ldr	r3, [r3, #28]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	4ba4      	ldr	r3, [pc, #656]	; (8003234 <UART_SetConfig+0x2bc>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	69f9      	ldr	r1, [r7, #28]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a99      	ldr	r2, [pc, #612]	; (8003238 <UART_SetConfig+0x2c0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d004      	beq.n	8002fe0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	69fa      	ldr	r2, [r7, #28]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a90      	ldr	r2, [pc, #576]	; (800323c <UART_SetConfig+0x2c4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d121      	bne.n	8003042 <UART_SetConfig+0xca>
 8002ffe:	4b90      	ldr	r3, [pc, #576]	; (8003240 <UART_SetConfig+0x2c8>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f003 0303 	and.w	r3, r3, #3
 8003008:	2b03      	cmp	r3, #3
 800300a:	d817      	bhi.n	800303c <UART_SetConfig+0xc4>
 800300c:	a201      	add	r2, pc, #4	; (adr r2, 8003014 <UART_SetConfig+0x9c>)
 800300e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003012:	bf00      	nop
 8003014:	08003025 	.word	0x08003025
 8003018:	08003031 	.word	0x08003031
 800301c:	0800302b 	.word	0x0800302b
 8003020:	08003037 	.word	0x08003037
 8003024:	2301      	movs	r3, #1
 8003026:	76fb      	strb	r3, [r7, #27]
 8003028:	e0bc      	b.n	80031a4 <UART_SetConfig+0x22c>
 800302a:	2302      	movs	r3, #2
 800302c:	76fb      	strb	r3, [r7, #27]
 800302e:	e0b9      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003030:	2304      	movs	r3, #4
 8003032:	76fb      	strb	r3, [r7, #27]
 8003034:	e0b6      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003036:	2308      	movs	r3, #8
 8003038:	76fb      	strb	r3, [r7, #27]
 800303a:	e0b3      	b.n	80031a4 <UART_SetConfig+0x22c>
 800303c:	2310      	movs	r3, #16
 800303e:	76fb      	strb	r3, [r7, #27]
 8003040:	e0b0      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a7f      	ldr	r2, [pc, #508]	; (8003244 <UART_SetConfig+0x2cc>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d132      	bne.n	80030b2 <UART_SetConfig+0x13a>
 800304c:	4b7c      	ldr	r3, [pc, #496]	; (8003240 <UART_SetConfig+0x2c8>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d828      	bhi.n	80030ac <UART_SetConfig+0x134>
 800305a:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <UART_SetConfig+0xe8>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003095 	.word	0x08003095
 8003064:	080030ad 	.word	0x080030ad
 8003068:	080030ad 	.word	0x080030ad
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030a1 	.word	0x080030a1
 8003074:	080030ad 	.word	0x080030ad
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080030ad 	.word	0x080030ad
 8003080:	0800309b 	.word	0x0800309b
 8003084:	080030ad 	.word	0x080030ad
 8003088:	080030ad 	.word	0x080030ad
 800308c:	080030ad 	.word	0x080030ad
 8003090:	080030a7 	.word	0x080030a7
 8003094:	2300      	movs	r3, #0
 8003096:	76fb      	strb	r3, [r7, #27]
 8003098:	e084      	b.n	80031a4 <UART_SetConfig+0x22c>
 800309a:	2302      	movs	r3, #2
 800309c:	76fb      	strb	r3, [r7, #27]
 800309e:	e081      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030a0:	2304      	movs	r3, #4
 80030a2:	76fb      	strb	r3, [r7, #27]
 80030a4:	e07e      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030a6:	2308      	movs	r3, #8
 80030a8:	76fb      	strb	r3, [r7, #27]
 80030aa:	e07b      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030ac:	2310      	movs	r3, #16
 80030ae:	76fb      	strb	r3, [r7, #27]
 80030b0:	e078      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a64      	ldr	r2, [pc, #400]	; (8003248 <UART_SetConfig+0x2d0>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d120      	bne.n	80030fe <UART_SetConfig+0x186>
 80030bc:	4b60      	ldr	r3, [pc, #384]	; (8003240 <UART_SetConfig+0x2c8>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80030c6:	2b30      	cmp	r3, #48	; 0x30
 80030c8:	d013      	beq.n	80030f2 <UART_SetConfig+0x17a>
 80030ca:	2b30      	cmp	r3, #48	; 0x30
 80030cc:	d814      	bhi.n	80030f8 <UART_SetConfig+0x180>
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d009      	beq.n	80030e6 <UART_SetConfig+0x16e>
 80030d2:	2b20      	cmp	r3, #32
 80030d4:	d810      	bhi.n	80030f8 <UART_SetConfig+0x180>
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <UART_SetConfig+0x168>
 80030da:	2b10      	cmp	r3, #16
 80030dc:	d006      	beq.n	80030ec <UART_SetConfig+0x174>
 80030de:	e00b      	b.n	80030f8 <UART_SetConfig+0x180>
 80030e0:	2300      	movs	r3, #0
 80030e2:	76fb      	strb	r3, [r7, #27]
 80030e4:	e05e      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030e6:	2302      	movs	r3, #2
 80030e8:	76fb      	strb	r3, [r7, #27]
 80030ea:	e05b      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030ec:	2304      	movs	r3, #4
 80030ee:	76fb      	strb	r3, [r7, #27]
 80030f0:	e058      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030f2:	2308      	movs	r3, #8
 80030f4:	76fb      	strb	r3, [r7, #27]
 80030f6:	e055      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030f8:	2310      	movs	r3, #16
 80030fa:	76fb      	strb	r3, [r7, #27]
 80030fc:	e052      	b.n	80031a4 <UART_SetConfig+0x22c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a52      	ldr	r2, [pc, #328]	; (800324c <UART_SetConfig+0x2d4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d120      	bne.n	800314a <UART_SetConfig+0x1d2>
 8003108:	4b4d      	ldr	r3, [pc, #308]	; (8003240 <UART_SetConfig+0x2c8>)
 800310a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003112:	2bc0      	cmp	r3, #192	; 0xc0
 8003114:	d013      	beq.n	800313e <UART_SetConfig+0x1c6>
 8003116:	2bc0      	cmp	r3, #192	; 0xc0
 8003118:	d814      	bhi.n	8003144 <UART_SetConfig+0x1cc>
 800311a:	2b80      	cmp	r3, #128	; 0x80
 800311c:	d009      	beq.n	8003132 <UART_SetConfig+0x1ba>
 800311e:	2b80      	cmp	r3, #128	; 0x80
 8003120:	d810      	bhi.n	8003144 <UART_SetConfig+0x1cc>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <UART_SetConfig+0x1b4>
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d006      	beq.n	8003138 <UART_SetConfig+0x1c0>
 800312a:	e00b      	b.n	8003144 <UART_SetConfig+0x1cc>
 800312c:	2300      	movs	r3, #0
 800312e:	76fb      	strb	r3, [r7, #27]
 8003130:	e038      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003132:	2302      	movs	r3, #2
 8003134:	76fb      	strb	r3, [r7, #27]
 8003136:	e035      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003138:	2304      	movs	r3, #4
 800313a:	76fb      	strb	r3, [r7, #27]
 800313c:	e032      	b.n	80031a4 <UART_SetConfig+0x22c>
 800313e:	2308      	movs	r3, #8
 8003140:	76fb      	strb	r3, [r7, #27]
 8003142:	e02f      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003144:	2310      	movs	r3, #16
 8003146:	76fb      	strb	r3, [r7, #27]
 8003148:	e02c      	b.n	80031a4 <UART_SetConfig+0x22c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a3a      	ldr	r2, [pc, #232]	; (8003238 <UART_SetConfig+0x2c0>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d125      	bne.n	80031a0 <UART_SetConfig+0x228>
 8003154:	4b3a      	ldr	r3, [pc, #232]	; (8003240 <UART_SetConfig+0x2c8>)
 8003156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800315e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003162:	d017      	beq.n	8003194 <UART_SetConfig+0x21c>
 8003164:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003168:	d817      	bhi.n	800319a <UART_SetConfig+0x222>
 800316a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800316e:	d00b      	beq.n	8003188 <UART_SetConfig+0x210>
 8003170:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003174:	d811      	bhi.n	800319a <UART_SetConfig+0x222>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <UART_SetConfig+0x20a>
 800317a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800317e:	d006      	beq.n	800318e <UART_SetConfig+0x216>
 8003180:	e00b      	b.n	800319a <UART_SetConfig+0x222>
 8003182:	2300      	movs	r3, #0
 8003184:	76fb      	strb	r3, [r7, #27]
 8003186:	e00d      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003188:	2302      	movs	r3, #2
 800318a:	76fb      	strb	r3, [r7, #27]
 800318c:	e00a      	b.n	80031a4 <UART_SetConfig+0x22c>
 800318e:	2304      	movs	r3, #4
 8003190:	76fb      	strb	r3, [r7, #27]
 8003192:	e007      	b.n	80031a4 <UART_SetConfig+0x22c>
 8003194:	2308      	movs	r3, #8
 8003196:	76fb      	strb	r3, [r7, #27]
 8003198:	e004      	b.n	80031a4 <UART_SetConfig+0x22c>
 800319a:	2310      	movs	r3, #16
 800319c:	76fb      	strb	r3, [r7, #27]
 800319e:	e001      	b.n	80031a4 <UART_SetConfig+0x22c>
 80031a0:	2310      	movs	r3, #16
 80031a2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a23      	ldr	r2, [pc, #140]	; (8003238 <UART_SetConfig+0x2c0>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	f040 8084 	bne.w	80032b8 <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80031b0:	7efb      	ldrb	r3, [r7, #27]
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d823      	bhi.n	80031fe <UART_SetConfig+0x286>
 80031b6:	a201      	add	r2, pc, #4	; (adr r2, 80031bc <UART_SetConfig+0x244>)
 80031b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031bc:	080031e1 	.word	0x080031e1
 80031c0:	080031ff 	.word	0x080031ff
 80031c4:	080031e9 	.word	0x080031e9
 80031c8:	080031ff 	.word	0x080031ff
 80031cc:	080031ef 	.word	0x080031ef
 80031d0:	080031ff 	.word	0x080031ff
 80031d4:	080031ff 	.word	0x080031ff
 80031d8:	080031ff 	.word	0x080031ff
 80031dc:	080031f7 	.word	0x080031f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031e0:	f7ff f9fe 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 80031e4:	6178      	str	r0, [r7, #20]
        break;
 80031e6:	e00f      	b.n	8003208 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031e8:	4b19      	ldr	r3, [pc, #100]	; (8003250 <UART_SetConfig+0x2d8>)
 80031ea:	617b      	str	r3, [r7, #20]
        break;
 80031ec:	e00c      	b.n	8003208 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ee:	f7ff f95f 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 80031f2:	6178      	str	r0, [r7, #20]
        break;
 80031f4:	e008      	b.n	8003208 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031fa:	617b      	str	r3, [r7, #20]
        break;
 80031fc:	e004      	b.n	8003208 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	76bb      	strb	r3, [r7, #26]
        break;
 8003206:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	2b00      	cmp	r3, #0
 800320c:	f000 8102 	beq.w	8003414 <UART_SetConfig+0x49c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	005b      	lsls	r3, r3, #1
 8003218:	4413      	add	r3, r2
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	d305      	bcc.n	800322c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	429a      	cmp	r2, r3
 800322a:	d913      	bls.n	8003254 <UART_SetConfig+0x2dc>
      {
        ret = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	76bb      	strb	r3, [r7, #26]
 8003230:	e0f0      	b.n	8003414 <UART_SetConfig+0x49c>
 8003232:	bf00      	nop
 8003234:	efff69f3 	.word	0xefff69f3
 8003238:	40008000 	.word	0x40008000
 800323c:	40013800 	.word	0x40013800
 8003240:	40021000 	.word	0x40021000
 8003244:	40004400 	.word	0x40004400
 8003248:	40004800 	.word	0x40004800
 800324c:	40004c00 	.word	0x40004c00
 8003250:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	4618      	mov	r0, r3
 8003258:	f04f 0100 	mov.w	r1, #0
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	020b      	lsls	r3, r1, #8
 8003266:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800326a:	0202      	lsls	r2, r0, #8
 800326c:	6879      	ldr	r1, [r7, #4]
 800326e:	6849      	ldr	r1, [r1, #4]
 8003270:	0849      	lsrs	r1, r1, #1
 8003272:	4608      	mov	r0, r1
 8003274:	f04f 0100 	mov.w	r1, #0
 8003278:	1814      	adds	r4, r2, r0
 800327a:	eb43 0501 	adc.w	r5, r3, r1
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	461a      	mov	r2, r3
 8003284:	f04f 0300 	mov.w	r3, #0
 8003288:	4620      	mov	r0, r4
 800328a:	4629      	mov	r1, r5
 800328c:	f7fc ffa2 	bl	80001d4 <__aeabi_uldivmod>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4613      	mov	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800329e:	d308      	bcc.n	80032b2 <UART_SetConfig+0x33a>
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a6:	d204      	bcs.n	80032b2 <UART_SetConfig+0x33a>
        {
          huart->Instance->BRR = usartdiv;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e0b0      	b.n	8003414 <UART_SetConfig+0x49c>
        }
        else
        {
          ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	76bb      	strb	r3, [r7, #26]
 80032b6:	e0ad      	b.n	8003414 <UART_SetConfig+0x49c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c0:	d15c      	bne.n	800337c <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80032c2:	7efb      	ldrb	r3, [r7, #27]
 80032c4:	2b08      	cmp	r3, #8
 80032c6:	d828      	bhi.n	800331a <UART_SetConfig+0x3a2>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <UART_SetConfig+0x358>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	080032fd 	.word	0x080032fd
 80032d8:	08003305 	.word	0x08003305
 80032dc:	0800331b 	.word	0x0800331b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800331b 	.word	0x0800331b
 80032e8:	0800331b 	.word	0x0800331b
 80032ec:	0800331b 	.word	0x0800331b
 80032f0:	08003313 	.word	0x08003313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f4:	f7ff f974 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 80032f8:	6178      	str	r0, [r7, #20]
        break;
 80032fa:	e013      	b.n	8003324 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fc:	f7ff f986 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 8003300:	6178      	str	r0, [r7, #20]
        break;
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003304:	4b49      	ldr	r3, [pc, #292]	; (800342c <UART_SetConfig+0x4b4>)
 8003306:	617b      	str	r3, [r7, #20]
        break;
 8003308:	e00c      	b.n	8003324 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800330a:	f7ff f8d1 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 800330e:	6178      	str	r0, [r7, #20]
        break;
 8003310:	e008      	b.n	8003324 <UART_SetConfig+0x3ac>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003312:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003316:	617b      	str	r3, [r7, #20]
        break;
 8003318:	e004      	b.n	8003324 <UART_SetConfig+0x3ac>
      default:
        pclk = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	76bb      	strb	r3, [r7, #26]
        break;
 8003322:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d074      	beq.n	8003414 <UART_SetConfig+0x49c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	005a      	lsls	r2, r3, #1
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	085b      	lsrs	r3, r3, #1
 8003334:	441a      	add	r2, r3
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	fbb2 f3f3 	udiv	r3, r2, r3
 800333e:	b29b      	uxth	r3, r3
 8003340:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	2b0f      	cmp	r3, #15
 8003346:	d916      	bls.n	8003376 <UART_SetConfig+0x3fe>
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334e:	d212      	bcs.n	8003376 <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	b29b      	uxth	r3, r3
 8003354:	f023 030f 	bic.w	r3, r3, #15
 8003358:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	b29b      	uxth	r3, r3
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	b29a      	uxth	r2, r3
 8003366:	89fb      	ldrh	r3, [r7, #14]
 8003368:	4313      	orrs	r3, r2
 800336a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	89fa      	ldrh	r2, [r7, #14]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	e04e      	b.n	8003414 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	76bb      	strb	r3, [r7, #26]
 800337a:	e04b      	b.n	8003414 <UART_SetConfig+0x49c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800337c:	7efb      	ldrb	r3, [r7, #27]
 800337e:	2b08      	cmp	r3, #8
 8003380:	d827      	bhi.n	80033d2 <UART_SetConfig+0x45a>
 8003382:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <UART_SetConfig+0x410>)
 8003384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003388:	080033ad 	.word	0x080033ad
 800338c:	080033b5 	.word	0x080033b5
 8003390:	080033bd 	.word	0x080033bd
 8003394:	080033d3 	.word	0x080033d3
 8003398:	080033c3 	.word	0x080033c3
 800339c:	080033d3 	.word	0x080033d3
 80033a0:	080033d3 	.word	0x080033d3
 80033a4:	080033d3 	.word	0x080033d3
 80033a8:	080033cb 	.word	0x080033cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033ac:	f7ff f918 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 80033b0:	6178      	str	r0, [r7, #20]
        break;
 80033b2:	e013      	b.n	80033dc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033b4:	f7ff f92a 	bl	800260c <HAL_RCC_GetPCLK2Freq>
 80033b8:	6178      	str	r0, [r7, #20]
        break;
 80033ba:	e00f      	b.n	80033dc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	; (800342c <UART_SetConfig+0x4b4>)
 80033be:	617b      	str	r3, [r7, #20]
        break;
 80033c0:	e00c      	b.n	80033dc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033c2:	f7ff f875 	bl	80024b0 <HAL_RCC_GetSysClockFreq>
 80033c6:	6178      	str	r0, [r7, #20]
        break;
 80033c8:	e008      	b.n	80033dc <UART_SetConfig+0x464>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ce:	617b      	str	r3, [r7, #20]
        break;
 80033d0:	e004      	b.n	80033dc <UART_SetConfig+0x464>
      default:
        pclk = 0U;
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	76bb      	strb	r3, [r7, #26]
        break;
 80033da:	bf00      	nop
    }

    if (pclk != 0U)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d018      	beq.n	8003414 <UART_SetConfig+0x49c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	085a      	lsrs	r2, r3, #1
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	441a      	add	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b0f      	cmp	r3, #15
 80033fc:	d908      	bls.n	8003410 <UART_SetConfig+0x498>
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003404:	d204      	bcs.n	8003410 <UART_SetConfig+0x498>
      {
        huart->Instance->BRR = usartdiv;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	e001      	b.n	8003414 <UART_SetConfig+0x49c>
      }
      else
      {
        ret = HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003420:	7ebb      	ldrb	r3, [r7, #26]
}
 8003422:	4618      	mov	r0, r3
 8003424:	3720      	adds	r7, #32
 8003426:	46bd      	mov	sp, r7
 8003428:	bdb0      	pop	{r4, r5, r7, pc}
 800342a:	bf00      	nop
 800342c:	00f42400 	.word	0x00f42400

08003430 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	f003 0308 	and.w	r3, r3, #8
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c4:	f003 0310 	and.w	r3, r3, #16
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d01a      	beq.n	8003546 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800352e:	d10a      	bne.n	8003546 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	430a      	orrs	r2, r1
 8003566:	605a      	str	r2, [r3, #4]
  }
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003584:	f7fd fb8c 	bl	8000ca0 <HAL_GetTick>
 8003588:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d10e      	bne.n	80035b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003598:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f82d 	bl	8003606 <UART_WaitOnFlagUntilTimeout>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e023      	b.n	80035fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0304 	and.w	r3, r3, #4
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d10e      	bne.n	80035e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035c8:	9300      	str	r3, [sp, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	f000 f817 	bl	8003606 <UART_WaitOnFlagUntilTimeout>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d001      	beq.n	80035e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e00d      	b.n	80035fe <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2220      	movs	r2, #32
 80035ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003616:	e05e      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d05a      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003620:	f7fd fb3e 	bl	8000ca0 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	429a      	cmp	r2, r3
 800362e:	d302      	bcc.n	8003636 <UART_WaitOnFlagUntilTimeout+0x30>
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d11b      	bne.n	800366e <UART_WaitOnFlagUntilTimeout+0x68>
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003644:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0201 	bic.w	r2, r2, #1
 8003654:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2220      	movs	r2, #32
 800365a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2220      	movs	r2, #32
 8003660:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	e043      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0304 	and.w	r3, r3, #4
 8003678:	2b00      	cmp	r3, #0
 800367a:	d02c      	beq.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003686:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800368a:	d124      	bne.n	80036d6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003694:	621a      	str	r2, [r3, #32]
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036a4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689a      	ldr	r2, [r3, #8]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2220      	movs	r2, #32
 80036ba:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2220      	movs	r2, #32
 80036c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e00f      	b.n	80036f6 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	69da      	ldr	r2, [r3, #28]
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	4013      	ands	r3, r2
 80036e0:	68ba      	ldr	r2, [r7, #8]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	bf0c      	ite	eq
 80036e6:	2301      	moveq	r3, #1
 80036e8:	2300      	movne	r3, #0
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	461a      	mov	r2, r3
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d091      	beq.n	8003618 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3710      	adds	r7, #16
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
	...

08003700 <__libc_init_array>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	4d0d      	ldr	r5, [pc, #52]	; (8003738 <__libc_init_array+0x38>)
 8003704:	4c0d      	ldr	r4, [pc, #52]	; (800373c <__libc_init_array+0x3c>)
 8003706:	1b64      	subs	r4, r4, r5
 8003708:	10a4      	asrs	r4, r4, #2
 800370a:	2600      	movs	r6, #0
 800370c:	42a6      	cmp	r6, r4
 800370e:	d109      	bne.n	8003724 <__libc_init_array+0x24>
 8003710:	4d0b      	ldr	r5, [pc, #44]	; (8003740 <__libc_init_array+0x40>)
 8003712:	4c0c      	ldr	r4, [pc, #48]	; (8003744 <__libc_init_array+0x44>)
 8003714:	f000 f820 	bl	8003758 <_init>
 8003718:	1b64      	subs	r4, r4, r5
 800371a:	10a4      	asrs	r4, r4, #2
 800371c:	2600      	movs	r6, #0
 800371e:	42a6      	cmp	r6, r4
 8003720:	d105      	bne.n	800372e <__libc_init_array+0x2e>
 8003722:	bd70      	pop	{r4, r5, r6, pc}
 8003724:	f855 3b04 	ldr.w	r3, [r5], #4
 8003728:	4798      	blx	r3
 800372a:	3601      	adds	r6, #1
 800372c:	e7ee      	b.n	800370c <__libc_init_array+0xc>
 800372e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003732:	4798      	blx	r3
 8003734:	3601      	adds	r6, #1
 8003736:	e7f2      	b.n	800371e <__libc_init_array+0x1e>
 8003738:	08003824 	.word	0x08003824
 800373c:	08003824 	.word	0x08003824
 8003740:	08003824 	.word	0x08003824
 8003744:	08003828 	.word	0x08003828

08003748 <memset>:
 8003748:	4402      	add	r2, r0
 800374a:	4603      	mov	r3, r0
 800374c:	4293      	cmp	r3, r2
 800374e:	d100      	bne.n	8003752 <memset+0xa>
 8003750:	4770      	bx	lr
 8003752:	f803 1b01 	strb.w	r1, [r3], #1
 8003756:	e7f9      	b.n	800374c <memset+0x4>

08003758 <_init>:
 8003758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800375a:	bf00      	nop
 800375c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800375e:	bc08      	pop	{r3}
 8003760:	469e      	mov	lr, r3
 8003762:	4770      	bx	lr

08003764 <_fini>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	bf00      	nop
 8003768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376a:	bc08      	pop	{r3}
 800376c:	469e      	mov	lr, r3
 800376e:	4770      	bx	lr
